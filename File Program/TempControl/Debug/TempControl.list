
TempControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800d5a8  0800d5a8  0000e5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da40  0800da40  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800da40  0800da40  0000ea40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da48  0800da48  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da48  0800da48  0000ea48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da4c  0800da4c  0000ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800da50  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  200001ec  0800dc3c  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  0800dc3c  0000f984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aadc  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e1  00000000  00000000  00029cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0002d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001143  00000000  00000000  0002ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ac4  00000000  00000000  0002fd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c51b  00000000  00000000  00052847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd985  00000000  00000000  0006ed62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c6e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007370  00000000  00000000  0014c72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00153a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d58c 	.word	0x0800d58c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800d58c 	.word	0x0800d58c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <moving_average_volt>:
float buffer1[100], buffer2[100], sum1 = 0, sum2 = 0;
float moving_avg1 = 0, moving_avg2 = 0,error,volt_buff, current_buff;
uint16_t indx1 = 0, indx2;
int D, timer_config;

float moving_average_volt(float result) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	ed87 0a01 	vstr	s0, [r7, #4]

	sum1 -= buffer1[indx1];
 800103e:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <moving_average_volt+0x94>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <moving_average_volt+0x98>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <moving_average_volt+0x9c>)
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <moving_average_volt+0x94>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
	buffer1[indx1] = result;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <moving_average_volt+0x98>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <moving_average_volt+0x9c>)
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
	sum1 += result;
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <moving_average_volt+0x94>)
 800106c:	ed93 7a00 	vldr	s14, [r3]
 8001070:	edd7 7a01 	vldr	s15, [r7, #4]
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <moving_average_volt+0x94>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
	moving_avg1 = (sum1 / 100.0);
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <moving_average_volt+0x94>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80010d4 <moving_average_volt+0xa0>
 8001088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <moving_average_volt+0xa4>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
	indx1 = (indx1 + 1) % 100;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <moving_average_volt+0x98>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <moving_average_volt+0xa8>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	1151      	asrs	r1, r2, #5
 80010a0:	17da      	asrs	r2, r3, #31
 80010a2:	1a8a      	subs	r2, r1, r2
 80010a4:	2164      	movs	r1, #100	@ 0x64
 80010a6:	fb01 f202 	mul.w	r2, r1, r2
 80010aa:	1a9a      	subs	r2, r3, r2
 80010ac:	b292      	uxth	r2, r2
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <moving_average_volt+0x98>)
 80010b0:	801a      	strh	r2, [r3, #0]
	return moving_avg1;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <moving_average_volt+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	ee07 3a90 	vmov	s15, r3
}
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000540 	.word	0x20000540
 80010cc:	2000055c 	.word	0x2000055c
 80010d0:	20000220 	.word	0x20000220
 80010d4:	42c80000 	.word	0x42c80000
 80010d8:	20000548 	.word	0x20000548
 80010dc:	51eb851f 	.word	0x51eb851f

080010e0 <moving_average_current>:

float moving_average_current(float result) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]
	sum2 -= buffer2[indx2];
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <moving_average_current+0x94>)
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <moving_average_current+0x98>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <moving_average_current+0x9c>)
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <moving_average_current+0x94>)
 8001104:	edc3 7a00 	vstr	s15, [r3]
	buffer2[indx2] = result;
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <moving_average_current+0x98>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <moving_average_current+0x9c>)
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
	sum2 += result;
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <moving_average_current+0x94>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <moving_average_current+0x94>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
	moving_avg2 = (sum2 / 100.0);
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <moving_average_current+0x94>)
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001180 <moving_average_current+0xa0>
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <moving_average_current+0xa4>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
	indx2 = (indx2 + 1) % 100;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <moving_average_current+0x98>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a10      	ldr	r2, [pc, #64]	@ (8001188 <moving_average_current+0xa8>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	1151      	asrs	r1, r2, #5
 800114c:	17da      	asrs	r2, r3, #31
 800114e:	1a8a      	subs	r2, r1, r2
 8001150:	2164      	movs	r1, #100	@ 0x64
 8001152:	fb01 f202 	mul.w	r2, r1, r2
 8001156:	1a9a      	subs	r2, r3, r2
 8001158:	b292      	uxth	r2, r2
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <moving_average_current+0x98>)
 800115c:	801a      	strh	r2, [r3, #0]
	return moving_avg2;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <moving_average_current+0xa4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	ee07 3a90 	vmov	s15, r3
}
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000544 	.word	0x20000544
 8001178:	2000055e 	.word	0x2000055e
 800117c:	200003b0 	.word	0x200003b0
 8001180:	42c80000 	.word	0x42c80000
 8001184:	2000054c 	.word	0x2000054c
 8001188:	51eb851f 	.word	0x51eb851f

0800118c <adc_conv>:

void adc_conv(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	Param *calc = &conv;
 8001192:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <adc_conv+0x138>)
 8001194:	607b      	str	r3, [r7, #4]
	if(calc->current>0){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edd3 7a01 	vldr	s15, [r3, #4]
 800119c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dd13      	ble.n	80011ce <adc_conv+0x42>
	volt_buff = 709-moving_average_volt(ADC_Val[0]);
 80011a6:	4b48      	ldr	r3, [pc, #288]	@ (80012c8 <adc_conv+0x13c>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f7ff ff3d 	bl	8001034 <moving_average_volt>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80012cc <adc_conv+0x140>
 80011c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c6:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <adc_conv+0x144>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
 80011cc:	e003      	b.n	80011d6 <adc_conv+0x4a>
	}else{
	volt_buff =0;
 80011ce:	4b40      	ldr	r3, [pc, #256]	@ (80012d0 <adc_conv+0x144>)
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
	}
	calc->voltage = 3*volt_buff*21/4095.0; 						//channel 6, voltage
 80011d6:	4b3e      	ldr	r3, [pc, #248]	@ (80012d0 <adc_conv+0x144>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 80011e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011ec:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80012d4 <adc_conv+0x148>
 80011f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edc3 7a00 	vstr	s15, [r3]

	current_buff = moving_average_current(ADC_Val[1]);
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <adc_conv+0x13c>)
 80011fc:	885b      	ldrh	r3, [r3, #2]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	f7ff ff69 	bl	80010e0 <moving_average_current>
 800120e:	eef0 7a40 	vmov.f32	s15, s0
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <adc_conv+0x14c>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
	calc->current = current_buff * 3/ 4095.0; 			//channel 7, current
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <adc_conv+0x14c>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001222:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001226:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80012d4 <adc_conv+0x148>
 800122a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	edc3 7a01 	vstr	s15, [r3, #4]


	calc->temperature = ADC_Val[2] * 205 *2/ 4095; 		//channel 8, temperature
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <adc_conv+0x13c>)
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	461a      	mov	r2, r3
 800123a:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	4a26      	ldr	r2, [pc, #152]	@ (80012dc <adc_conv+0x150>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	441a      	add	r2, r3
 800124a:	12d2      	asrs	r2, r2, #11
 800124c:	17db      	asrs	r3, r3, #31
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edc3 7a02 	vstr	s15, [r3, #8]

	calc->buff_set_point = (ADC_Val[3] * 45 / 4029) + 45; 	//channel 12, potentio set point
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <adc_conv+0x13c>)
 8001260:	88db      	ldrh	r3, [r3, #6]
 8001262:	461a      	mov	r2, r3
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	011a      	lsls	r2, r3, #4
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <adc_conv+0x154>)
 8001270:	fb82 1203 	smull	r1, r2, r2, r3
 8001274:	1252      	asrs	r2, r2, #9
 8001276:	17db      	asrs	r3, r3, #31
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	332d      	adds	r3, #45	@ 0x2d
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	829a      	strh	r2, [r3, #20]
	calc->buff_set_Time = ADC_Val[4] * 240 / 4029; 			//channel 15, potentio timer
 8001284:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <adc_conv+0x13c>)
 8001286:	891b      	ldrh	r3, [r3, #8]
 8001288:	461a      	mov	r2, r3
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <adc_conv+0x154>)
 8001294:	fb82 1203 	smull	r1, r2, r2, r3
 8001298:	1252      	asrs	r2, r2, #9
 800129a:	17db      	asrs	r3, r3, #31
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	82da      	strh	r2, [r3, #22]

	calc->power = calc->current*calc->voltage;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000208 	.word	0x20000208
 80012c8:	200006cc 	.word	0x200006cc
 80012cc:	44314000 	.word	0x44314000
 80012d0:	20000554 	.word	0x20000554
 80012d4:	457ff000 	.word	0x457ff000
 80012d8:	20000558 	.word	0x20000558
 80012dc:	80080081 	.word	0x80080081
 80012e0:	20883a75 	.word	0x20883a75
 80012e4:	00000000 	.word	0x00000000

080012e8 <PWM_Control>:

//Control PWM
float PWM_Control(float Set_Point) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	ed87 0a01 	vstr	s0, [r7, #4]
	Param *calc = &conv;
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <PWM_Control+0x100>)
 80012f4:	60fb      	str	r3, [r7, #12]
//float tolerance = 0.07 * Set_Point;

	error = (float)((Set_Point - calc->temperature)*1.0/Set_Point);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001300:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001304:	ed97 7a01 	vldr	s14, [r7, #4]
 8001308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130c:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <PWM_Control+0x104>)
 800130e:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(LED_SETPOINT_GPIO_Port, LED_SETPOINT_Pin, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131c:	f003 f9b2 	bl	8004684 <HAL_GPIO_WritePin>
	if(error<0.95 && error>0.05){
 8001320:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <PWM_Control+0x104>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a32b      	add	r3, pc, #172	@ (adr r3, 80013d8 <PWM_Control+0xf0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff fbfc 	bl	8000b2c <__aeabi_dcmplt>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01a      	beq.n	8001370 <PWM_Control+0x88>
 800133a:	4b2c      	ldr	r3, [pc, #176]	@ (80013ec <PWM_Control+0x104>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f92a 	bl	8000598 <__aeabi_f2d>
 8001344:	a326      	add	r3, pc, #152	@ (adr r3, 80013e0 <PWM_Control+0xf8>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff fc0d 	bl	8000b68 <__aeabi_dcmpgt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00d      	beq.n	8001370 <PWM_Control+0x88>
	duty = error*20000;
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <PWM_Control+0x104>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80013f0 <PWM_Control+0x108>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <PWM_Control+0x10c>)
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e028      	b.n	80013c2 <PWM_Control+0xda>
	}else if(error<0.05){
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <PWM_Control+0x104>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f90f 	bl	8000598 <__aeabi_f2d>
 800137a:	a319      	add	r3, pc, #100	@ (adr r3, 80013e0 <PWM_Control+0xf8>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fbd4 	bl	8000b2c <__aeabi_dcmplt>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00a      	beq.n	80013a0 <PWM_Control+0xb8>
		HAL_GPIO_WritePin(LED_SETPOINT_GPIO_Port, LED_SETPOINT_Pin, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001394:	f003 f976 	bl	8004684 <HAL_GPIO_WritePin>
	duty =100;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <PWM_Control+0x10c>)
 800139a:	2264      	movs	r2, #100	@ 0x64
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e010      	b.n	80013c2 <PWM_Control+0xda>
}else if(error>0.95){
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <PWM_Control+0x104>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8f7 	bl	8000598 <__aeabi_f2d>
 80013aa:	a30b      	add	r3, pc, #44	@ (adr r3, 80013d8 <PWM_Control+0xf0>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fbda 	bl	8000b68 <__aeabi_dcmpgt>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <PWM_Control+0xda>
	duty = 19000;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <PWM_Control+0x10c>)
 80013bc:	f644 2238 	movw	r2, #19000	@ 0x4a38
 80013c0:	601a      	str	r2, [r3, #0]
	}


	return duty;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <PWM_Control+0x10c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	66666666 	.word	0x66666666
 80013dc:	3fee6666 	.word	0x3fee6666
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3fa99999 	.word	0x3fa99999
 80013e8:	20000208 	.word	0x20000208
 80013ec:	20000550 	.word	0x20000550
 80013f0:	469c4000 	.word	0x469c4000
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <DataSend>:
float D_;

int cntr = 0, data_cntr = 0, base1 = 0, base2 = 0;
char merge[20] = "";

void DataSend(void) {
 80013f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013fc:	b099      	sub	sp, #100	@ 0x64
 80013fe:	af0e      	add	r7, sp, #56	@ 0x38
	if (addr->mode_set == 'A') {
 8001400:	4b5d      	ldr	r3, [pc, #372]	@ (8001578 <DataSend+0x180>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b41      	cmp	r3, #65	@ 0x41
 8001408:	d11e      	bne.n	8001448 <DataSend+0x50>
		Param *calc = &conv;
 800140a:	4b5c      	ldr	r3, [pc, #368]	@ (800157c <DataSend+0x184>)
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
		calc->set_point=calc->buff_set_point;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	8a9a      	ldrh	r2, [r3, #20]
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	821a      	strh	r2, [r3, #16]
		calc->set_Time=calc->buff_set_Time;
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	8ada      	ldrh	r2, [r3, #22]
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	825a      	strh	r2, [r3, #18]
		bufferMode[0] = 0;
 800141e:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <DataSend+0x188>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
		if (addr->StartStop == 'C') {
 8001424:	4b54      	ldr	r3, [pc, #336]	@ (8001578 <DataSend+0x180>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	2b43      	cmp	r3, #67	@ 0x43
 800142c:	d103      	bne.n	8001436 <DataSend+0x3e>
			bufferMode[1] = 2;
 800142e:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <DataSend+0x188>)
 8001430:	2202      	movs	r2, #2
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	e010      	b.n	8001458 <DataSend+0x60>
		} else if (addr->StartStop == 'D') {
 8001436:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <DataSend+0x180>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	2b44      	cmp	r3, #68	@ 0x44
 800143e:	d10b      	bne.n	8001458 <DataSend+0x60>
			bufferMode[1] = 3;
 8001440:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <DataSend+0x188>)
 8001442:	2203      	movs	r2, #3
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	e007      	b.n	8001458 <DataSend+0x60>
		}
	} else if (addr->mode_set == 'B') {
 8001448:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <DataSend+0x180>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b42      	cmp	r3, #66	@ 0x42
 8001450:	d102      	bne.n	8001458 <DataSend+0x60>
		bufferMode[0] = 1;
 8001452:	4b4b      	ldr	r3, [pc, #300]	@ (8001580 <DataSend+0x188>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
	}
	D_ = duty * 100.0 / 20000.0;
 8001458:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <DataSend+0x18c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f889 	bl	8000574 <__aeabi_i2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <DataSend+0x190>)
 8001468:	f7ff f8ee 	bl	8000648 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	a33e      	add	r3, pc, #248	@ (adr r3, 8001570 <DataSend+0x178>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff fa0f 	bl	800089c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fbd7 	bl	8000c38 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	4a3f      	ldr	r2, [pc, #252]	@ (800158c <DataSend+0x194>)
 800148e:	6013      	str	r3, [r2, #0]

	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 8001490:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <DataSend+0x188>)
 8001492:	681e      	ldr	r6, [r3, #0]
 8001494:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <DataSend+0x188>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61fb      	str	r3, [r7, #28]
			bufferMode[1], rslt->voltage, rslt->current, rslt->power,
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <DataSend+0x198>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f879 	bl	8000598 <__aeabi_f2d>
 80014a6:	4680      	mov	r8, r0
 80014a8:	4689      	mov	r9, r1
			bufferMode[1], rslt->voltage, rslt->current, rslt->power,
 80014aa:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <DataSend+0x198>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f871 	bl	8000598 <__aeabi_f2d>
 80014b6:	4682      	mov	sl, r0
 80014b8:	468b      	mov	fp, r1
			bufferMode[1], rslt->voltage, rslt->current, rslt->power,
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <DataSend+0x198>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f869 	bl	8000598 <__aeabi_f2d>
 80014c6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80014ca:	4b30      	ldr	r3, [pc, #192]	@ (800158c <DataSend+0x194>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f862 	bl	8000598 <__aeabi_f2d>
 80014d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
			D_, rslt->temperature, rslt->set_point,
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <DataSend+0x198>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f85a 	bl	8000598 <__aeabi_f2d>
 80014e4:	4604      	mov	r4, r0
 80014e6:	460d      	mov	r5, r1
			D_, rslt->temperature, rslt->set_point,
 80014e8:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <DataSend+0x198>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	8a1b      	ldrh	r3, [r3, #16]
	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 80014ee:	61bb      	str	r3, [r7, #24]
			rslt->set_Time, counter/60.0);
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <DataSend+0x198>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	8a5b      	ldrh	r3, [r3, #18]
	sprintf(data, "%d,%d,%.3f,%.3f,%.3f,%.3f,%.2f,%d,%d,%.2f\r\n", bufferMode[0],
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <DataSend+0x19c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f839 	bl	8000574 <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <DataSend+0x1a0>)
 8001508:	f7ff f9c8 	bl	800089c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	920a      	str	r2, [sp, #40]	@ 0x28
 800151c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001520:	ed97 7b02 	vldr	d7, [r7, #8]
 8001524:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001528:	ed97 7b04 	vldr	d7, [r7, #16]
 800152c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001530:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001534:	e9cd 8900 	strd	r8, r9, [sp]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4632      	mov	r2, r6
 800153c:	4917      	ldr	r1, [pc, #92]	@ (800159c <DataSend+0x1a4>)
 800153e:	4818      	ldr	r0, [pc, #96]	@ (80015a0 <DataSend+0x1a8>)
 8001540:	f008 fc5a 	bl	8009df8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) &data, strlen(data), HAL_MAX_DELAY);
 8001544:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <DataSend+0x1a8>)
 8001546:	f7fe febb 	bl	80002c0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	4913      	ldr	r1, [pc, #76]	@ (80015a0 <DataSend+0x1a8>)
 8001554:	4813      	ldr	r0, [pc, #76]	@ (80015a4 <DataSend+0x1ac>)
 8001556:	f005 fbc3 	bl	8006ce0 <HAL_UART_Transmit>
	memset(data, 0, sizeof(data));
 800155a:	2264      	movs	r2, #100	@ 0x64
 800155c:	2100      	movs	r1, #0
 800155e:	4810      	ldr	r0, [pc, #64]	@ (80015a0 <DataSend+0x1a8>)
 8001560:	f008 fcad 	bl	8009ebe <memset>
}
 8001564:	bf00      	nop
 8001566:	372c      	adds	r7, #44	@ 0x2c
 8001568:	46bd      	mov	sp, r7
 800156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800156e:	bf00      	nop
 8001570:	00000000 	.word	0x00000000
 8001574:	40d38800 	.word	0x40d38800
 8001578:	20000004 	.word	0x20000004
 800157c:	20000208 	.word	0x20000208
 8001580:	20000560 	.word	0x20000560
 8001584:	2000000c 	.word	0x2000000c
 8001588:	40590000 	.word	0x40590000
 800158c:	200005dc 	.word	0x200005dc
 8001590:	20000000 	.word	0x20000000
 8001594:	20000704 	.word	0x20000704
 8001598:	404e0000 	.word	0x404e0000
 800159c:	0800d5a8 	.word	0x0800d5a8
 80015a0:	20000578 	.word	0x20000578
 80015a4:	200007a0 	.word	0x200007a0

080015a8 <parseData>:

int cp = 0;
void parseData(void) {
 80015a8:	b598      	push	{r3, r4, r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	if (rcv_data[base1] == '@') {
 80015ac:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <parseData+0xd8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a34      	ldr	r2, [pc, #208]	@ (8001684 <parseData+0xdc>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	2b40      	cmp	r3, #64	@ 0x40
 80015b6:	d14d      	bne.n	8001654 <parseData+0xac>
		if (rcv_data[data_cntr] == '\n') {
 80015b8:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <parseData+0xe0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a31      	ldr	r2, [pc, #196]	@ (8001684 <parseData+0xdc>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	2b0a      	cmp	r3, #10
 80015c2:	d106      	bne.n	80015d2 <parseData+0x2a>
			systemVal();
 80015c4:	f000 fcea 	bl	8001f9c <systemVal>
//			data_cntr = 0;
			memset(rcv_data, 0, sizeof(rcv_data));
 80015c8:	220f      	movs	r2, #15
 80015ca:	2100      	movs	r1, #0
 80015cc:	482d      	ldr	r0, [pc, #180]	@ (8001684 <parseData+0xdc>)
 80015ce:	f008 fc76 	bl	8009ebe <memset>
		}
		if (rcv_data[data_cntr] != ',') {
 80015d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <parseData+0xe0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001684 <parseData+0xdc>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	2b2c      	cmp	r3, #44	@ 0x2c
 80015dc:	d00d      	beq.n	80015fa <parseData+0x52>
			strcat(merge, &rcv_data[data_cntr]);
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <parseData+0xe0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a28      	ldr	r2, [pc, #160]	@ (8001684 <parseData+0xdc>)
 80015e4:	4413      	add	r3, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	4828      	ldr	r0, [pc, #160]	@ (800168c <parseData+0xe4>)
 80015ea:	f008 fc70 	bl	8009ece <strcat>
			data_cntr++;
 80015ee:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <parseData+0xe0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a24      	ldr	r2, [pc, #144]	@ (8001688 <parseData+0xe0>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e024      	b.n	8001644 <parseData+0x9c>
		} else if (rcv_data[data_cntr] == ',') {
 80015fa:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <parseData+0xe0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a21      	ldr	r2, [pc, #132]	@ (8001684 <parseData+0xdc>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	2b2c      	cmp	r3, #44	@ 0x2c
 8001604:	d11e      	bne.n	8001644 <parseData+0x9c>
			rcv_buffer[cntr] = atoi(merge);
 8001606:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <parseData+0xe8>)
 8001608:	681c      	ldr	r4, [r3, #0]
 800160a:	4820      	ldr	r0, [pc, #128]	@ (800168c <parseData+0xe4>)
 800160c:	f007 fc3c 	bl	8008e88 <atoi>
 8001610:	4603      	mov	r3, r0
 8001612:	4a20      	ldr	r2, [pc, #128]	@ (8001694 <parseData+0xec>)
 8001614:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			memset(merge, 0, sizeof(merge));
 8001618:	2214      	movs	r2, #20
 800161a:	2100      	movs	r1, #0
 800161c:	481b      	ldr	r0, [pc, #108]	@ (800168c <parseData+0xe4>)
 800161e:	f008 fc4e 	bl	8009ebe <memset>
			cntr++;
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <parseData+0xe8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <parseData+0xe8>)
 800162a:	6013      	str	r3, [r2, #0]
			if (cntr >= sizeof(rcv_buffer) / sizeof(rcv_buffer[0])) {
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <parseData+0xe8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d902      	bls.n	800163a <parseData+0x92>
				cntr = 0;
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <parseData+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
			}
			data_cntr++;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <parseData+0xe0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <parseData+0xe0>)
 8001642:	6013      	str	r3, [r2, #0]
		}
		if (data_cntr > 14)
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <parseData+0xe0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b0e      	cmp	r3, #14
 800164a:	dd17      	ble.n	800167c <parseData+0xd4>
			data_cntr = 0;
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <parseData+0xe0>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
		if (base1 > 14)
			base1 = 0;
		data_cntr = base1 + 1;
		cntr = 0;
	}
}
 8001652:	e013      	b.n	800167c <parseData+0xd4>
		base1++;
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <parseData+0xd8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <parseData+0xd8>)
 800165c:	6013      	str	r3, [r2, #0]
		if (base1 > 14)
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <parseData+0xd8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b0e      	cmp	r3, #14
 8001664:	dd02      	ble.n	800166c <parseData+0xc4>
			base1 = 0;
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <parseData+0xd8>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
		data_cntr = base1 + 1;
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <parseData+0xd8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <parseData+0xe0>)
 8001674:	6013      	str	r3, [r2, #0]
		cntr = 0;
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <parseData+0xe8>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	bd98      	pop	{r3, r4, r7, pc}
 8001680:	200005e8 	.word	0x200005e8
 8001684:	200006f0 	.word	0x200006f0
 8001688:	200005e4 	.word	0x200005e4
 800168c:	200005ec 	.word	0x200005ec
 8001690:	200005e0 	.word	0x200005e0
 8001694:	20000568 	.word	0x20000568

08001698 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800169e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2220      	movs	r2, #32
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 fc04 	bl	8009ebe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b6:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016be:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c6:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016cc:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016da:	2201      	movs	r2, #1
 80016dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 80016f0:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016f2:	2205      	movs	r2, #5
 80016f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f6:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fe:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <MX_ADC1_Init+0x158>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <MX_ADC1_Init+0x158>)
 8001706:	2200      	movs	r2, #0
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <MX_ADC1_Init+0x158>)
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <MX_ADC1_Init+0x158>)
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001718:	4b35      	ldr	r3, [pc, #212]	@ (80017f0 <MX_ADC1_Init+0x158>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001720:	4833      	ldr	r0, [pc, #204]	@ (80017f0 <MX_ADC1_Init+0x158>)
 8001722:	f001 f9a9 	bl	8002a78 <HAL_ADC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800172c:	f000 fa53 	bl	8001bd6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	482d      	ldr	r0, [pc, #180]	@ (80017f0 <MX_ADC1_Init+0x158>)
 800173c:	f002 f922 	bl	8003984 <HAL_ADCEx_MultiModeConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001746:	f000 fa46 	bl	8001bd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800174a:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <MX_ADC1_Init+0x15c>)
 800174c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800174e:	2306      	movs	r3, #6
 8001750:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001752:	2307      	movs	r3, #7
 8001754:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001756:	237f      	movs	r3, #127	@ 0x7f
 8001758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800175a:	2304      	movs	r3, #4
 800175c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4822      	ldr	r0, [pc, #136]	@ (80017f0 <MX_ADC1_Init+0x158>)
 8001768:	f001 fbdc 	bl	8002f24 <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001772:	f000 fa30 	bl	8001bd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <MX_ADC1_Init+0x160>)
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800177a:	230c      	movs	r3, #12
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	481b      	ldr	r0, [pc, #108]	@ (80017f0 <MX_ADC1_Init+0x158>)
 8001784:	f001 fbce 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800178e:	f000 fa22 	bl	8001bd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_ADC1_Init+0x164>)
 8001794:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001796:	2312      	movs	r3, #18
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4814      	ldr	r0, [pc, #80]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80017a0:	f001 fbc0 	bl	8002f24 <HAL_ADC_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80017aa:	f000 fa14 	bl	8001bd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_ADC1_Init+0x168>)
 80017b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017b2:	2318      	movs	r3, #24
 80017b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80017bc:	f001 fbb2 	bl	8002f24 <HAL_ADC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80017c6:	f000 fa06 	bl	8001bd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_ADC1_Init+0x16c>)
 80017cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80017ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_ADC1_Init+0x158>)
 80017da:	f001 fba3 	bl	8002f24 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80017e4:	f000 f9f7 	bl	8001bd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	@ 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000600 	.word	0x20000600
 80017f4:	19200040 	.word	0x19200040
 80017f8:	1d500080 	.word	0x1d500080
 80017fc:	21800100 	.word	0x21800100
 8001800:	32601000 	.word	0x32601000
 8001804:	3ef08000 	.word	0x3ef08000

08001808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09c      	sub	sp, #112	@ 0x70
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	2244      	movs	r2, #68	@ 0x44
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f008 fb48 	bl	8009ebe <memset>
  if(adcHandle->Instance==ADC1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001836:	d176      	bne.n	8001926 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800183c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800183e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001842:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fd39 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001854:	f000 f9bf 	bl	8001bd6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	4a34      	ldr	r2, [pc, #208]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 800185e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001864:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187c:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188c:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001894:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <HAL_ADC_MspInit+0x128>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VOLT_Pin|ADC_CUR_Pin|ADC_TEMP_Pin;
 80018a0:	2307      	movs	r3, #7
 80018a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4820      	ldr	r0, [pc, #128]	@ (8001934 <HAL_ADC_MspInit+0x12c>)
 80018b4:	f002 fd4c 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT_TIMER_Pin|POT_SETPOINT_Pin;
 80018b8:	2303      	movs	r3, #3
 80018ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018c8:	4619      	mov	r1, r3
 80018ca:	481b      	ldr	r0, [pc, #108]	@ (8001938 <HAL_ADC_MspInit+0x130>)
 80018cc:	f002 fd40 	bl	8004350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <HAL_ADC_MspInit+0x138>)
 80018d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018d8:	2205      	movs	r2, #5
 80018da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_ADC_MspInit+0x134>)
 80018f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_ADC_MspInit+0x134>)
 8001900:	2220      	movs	r2, #32
 8001902:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_ADC_MspInit+0x134>)
 8001906:	2200      	movs	r2, #0
 8001908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800190a:	480c      	ldr	r0, [pc, #48]	@ (800193c <HAL_ADC_MspInit+0x134>)
 800190c:	f002 f9ee 	bl	8003cec <HAL_DMA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8001916:	f000 f95e 	bl	8001bd6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_ADC_MspInit+0x134>)
 800191e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001920:	4a06      	ldr	r2, [pc, #24]	@ (800193c <HAL_ADC_MspInit+0x134>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001926:	bf00      	nop
 8001928:	3770      	adds	r7, #112	@ 0x70
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	48000800 	.word	0x48000800
 8001938:	48000400 	.word	0x48000400
 800193c:	2000066c 	.word	0x2000066c
 8001940:	40020008 	.word	0x40020008

08001944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <MX_DMA_Init+0x50>)
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <MX_DMA_Init+0x50>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6493      	str	r3, [r2, #72]	@ 0x48
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_DMA_Init+0x50>)
 8001958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001962:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_DMA_Init+0x50>)
 8001964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001966:	4a0b      	ldr	r2, [pc, #44]	@ (8001994 <MX_DMA_Init+0x50>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6493      	str	r3, [r2, #72]	@ 0x48
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_DMA_Init+0x50>)
 8001970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200b      	movs	r0, #11
 8001980:	f002 f97f 	bl	8003c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001984:	200b      	movs	r0, #11
 8001986:	f002 f996 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000

08001998 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a31      	ldr	r2, [pc, #196]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	4a25      	ldr	r2, [pc, #148]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <MX_GPIO_Init+0xe0>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_MODE_Pin|LED_STOPRUN_Pin|LED_SETPOINT_Pin|LED_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a00:	f002 fe40 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PB_Mode_Pin|PB_StartStop_Pin|Reset_state_Pin;
 8001a04:	2307      	movs	r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a08:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1c:	f002 fc98 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_MODE_Pin|LED_STOPRUN_Pin|LED_SETPOINT_Pin|LED_Pin;
 8001a20:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f002 fc88 	bl	8004350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2006      	movs	r0, #6
 8001a46:	f002 f91c 	bl	8003c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a4a:	2006      	movs	r0, #6
 8001a4c:	f002 f933 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2007      	movs	r0, #7
 8001a56:	f002 f914 	bl	8003c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a5a:	2007      	movs	r0, #7
 8001a5c:	f002 f92b 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2008      	movs	r0, #8
 8001a66:	f002 f90c 	bl	8003c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a6a:	2008      	movs	r0, #8
 8001a6c:	f002 f923 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a80:	f000 fd49 	bl	8002516 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a84:	f000 f85c 	bl	8001b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a88:	f7ff ff86 	bl	8001998 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a8c:	f7ff ff5a 	bl	8001944 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a90:	f7ff fe02 	bl	8001698 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001a94:	f000 fb82 	bl	800219c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a98:	f000 fc68 	bl	800236c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a9c:	f000 fb30 	bl	8002100 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Val, 5);
 8001aa0:	2205      	movs	r2, #5
 8001aa2:	491e      	ldr	r1, [pc, #120]	@ (8001b1c <main+0xa0>)
 8001aa4:	481e      	ldr	r0, [pc, #120]	@ (8001b20 <main+0xa4>)
 8001aa6:	f001 f96b 	bl	8002d80 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rcv_data, 15);
 8001aaa:	220f      	movs	r2, #15
 8001aac:	491d      	ldr	r1, [pc, #116]	@ (8001b24 <main+0xa8>)
 8001aae:	481e      	ldr	r0, [pc, #120]	@ (8001b28 <main+0xac>)
 8001ab0:	f005 f9a4 	bl	8006dfc <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	481d      	ldr	r0, [pc, #116]	@ (8001b2c <main+0xb0>)
 8001ab8:	f003 ff16 	bl	80058e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001abc:	481c      	ldr	r0, [pc, #112]	@ (8001b30 <main+0xb4>)
 8001abe:	f003 fe47 	bl	8005750 <HAL_TIM_Base_Start_IT>
  temp->mode_set = 'A';
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <main+0xb8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2241      	movs	r2, #65	@ 0x41
 8001ac8:	701a      	strb	r2, [r3, #0]
  temp->StartStop = 'C';
 8001aca:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <main+0xb8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2243      	movs	r2, #67	@ 0x43
 8001ad0:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(LED_MODE_GPIO_Port, LED_MODE_Pin, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001adc:	f002 fdd2 	bl	8004684 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_msg == 1){
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <main+0xbc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d104      	bne.n	8001af2 <main+0x76>
		  DataSend();
 8001ae8:	f7ff fc86 	bl	80013f8 <DataSend>
		  flag_msg = 0;
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <main+0xbc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001af2:	2201      	movs	r2, #1
 8001af4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afc:	f002 fdc2 	bl	8004684 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,duty);
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <main+0xc0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <main+0xb0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34
	  adc_conv();
 8001b0a:	f7ff fb3f 	bl	800118c <adc_conv>
	  parseData();
 8001b0e:	f7ff fd4b 	bl	80015a8 <parseData>
	  HAL_Delay(100);
 8001b12:	2064      	movs	r0, #100	@ 0x64
 8001b14:	f000 fd70 	bl	80025f8 <HAL_Delay>
	  if(flag_msg == 1){
 8001b18:	e7e2      	b.n	8001ae0 <main+0x64>
 8001b1a:	bf00      	nop
 8001b1c:	200006cc 	.word	0x200006cc
 8001b20:	20000600 	.word	0x20000600
 8001b24:	200006f0 	.word	0x200006f0
 8001b28:	200007a0 	.word	0x200007a0
 8001b2c:	20000754 	.word	0x20000754
 8001b30:	20000708 	.word	0x20000708
 8001b34:	20000008 	.word	0x20000008
 8001b38:	200006e4 	.word	0x200006e4
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b094      	sub	sp, #80	@ 0x50
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f008 f9b5 	bl	8009ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f002 fdca 	bl	80046fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b72:	2340      	movs	r3, #64	@ 0x40
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b82:	2355      	movs	r3, #85	@ 0x55
 8001b84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b92:	f107 0318 	add.w	r3, r7, #24
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fe64 	bl	8004864 <HAL_RCC_OscConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ba2:	f000 f818 	bl	8001bd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001baa:	2303      	movs	r3, #3
 8001bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 f962 	bl	8004e88 <HAL_RCC_ClockConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bca:	f000 f804 	bl	8001bd6 <Error_Handler>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3750      	adds	r7, #80	@ 0x50
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bda:	b672      	cpsid	i
}
 8001bdc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bde:	bf00      	nop
 8001be0:	e7fd      	b.n	8001bde <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bee:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_MspInit+0x44>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_MspInit+0x44>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c1a:	f002 fe13 	bl	8004844 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <NMI_Handler+0x4>

08001c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <MemManage_Handler+0x4>

08001c44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f000 fc9b 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_Mode_Pin);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f002 fd0f 	bl	80046b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(HAL_GPIO_ReadPin(PB_Mode_GPIO_Port, PB_Mode_Pin) == 1 /*&& state1==0*/){
 8001c96:	2101      	movs	r1, #1
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c9c:	f002 fcda 	bl	8004654 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d110      	bne.n	8001cc8 <EXTI0_IRQHandler+0x3c>
	  ptr->mode_set = 'B'; //PC
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <EXTI0_IRQHandler+0x40>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2242      	movs	r2, #66	@ 0x42
 8001cac:	701a      	strb	r2, [r3, #0]
	  led_status = 0;
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <EXTI0_IRQHandler+0x44>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_MODE_GPIO_Port, LED_MODE_Pin, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbe:	f002 fce1 	bl	8004684 <HAL_GPIO_WritePin>
	  state1=1;
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <EXTI0_IRQHandler+0x48>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
//  else if(HAL_GPIO_ReadPin(PB_Mode_GPIO_Port, PB_Mode_Pin) == 1 && state1==1){
//	  ptr->mode_set = 'A'; //Hardware
//	  state1=0;
//  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	200006e8 	.word	0x200006e8
 8001cd4:	200006dc 	.word	0x200006dc

08001cd8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_StartStop_Pin);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f002 fce9 	bl	80046b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if(HAL_GPIO_ReadPin(PB_StartStop_GPIO_Port, PB_StartStop_Pin) == 1 && state2==0){
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce8:	f002 fcb4 	bl	8004654 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10b      	bne.n	8001d0a <EXTI1_IRQHandler+0x32>
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <EXTI1_IRQHandler+0x5c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <EXTI1_IRQHandler+0x32>
	  ptr->StartStop = 'D'; //start
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <EXTI1_IRQHandler+0x60>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2244      	movs	r2, #68	@ 0x44
 8001d00:	705a      	strb	r2, [r3, #1]
	  state2=1;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <EXTI1_IRQHandler+0x5c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
  }else if(HAL_GPIO_ReadPin(PB_StartStop_GPIO_Port, PB_StartStop_Pin) == 1 && state2==1){
	  ptr->StartStop = 'C'; //stop
	  state2=0;
  }
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d08:	e012      	b.n	8001d30 <EXTI1_IRQHandler+0x58>
  }else if(HAL_GPIO_ReadPin(PB_StartStop_GPIO_Port, PB_StartStop_Pin) == 1 && state2==1){
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d10:	f002 fca0 	bl	8004654 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10a      	bne.n	8001d30 <EXTI1_IRQHandler+0x58>
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <EXTI1_IRQHandler+0x5c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <EXTI1_IRQHandler+0x58>
	  ptr->StartStop = 'C'; //stop
 8001d22:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <EXTI1_IRQHandler+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2243      	movs	r2, #67	@ 0x43
 8001d28:	705a      	strb	r2, [r3, #1]
	  state2=0;
 8001d2a:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <EXTI1_IRQHandler+0x5c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200006e0 	.word	0x200006e0
 8001d38:	20000010 	.word	0x20000010

08001d3c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reset_state_Pin);
 8001d40:	2004      	movs	r0, #4
 8001d42:	f002 fcb7 	bl	80046b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  control_state = 1;
 8001d46:	4b02      	ldr	r3, [pc, #8]	@ (8001d50 <EXTI2_IRQHandler+0x14>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000014 	.word	0x20000014

08001d54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <DMA1_Channel1_IRQHandler+0x10>)
 8001d5a:	f002 f9aa 	bl	80040b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000066c 	.word	0x2000066c

08001d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <TIM2_IRQHandler+0x38>)
 8001d6e:	f003 febb 	bl	8005ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  systemTimer();
 8001d72:	f000 f95f 	bl	8002034 <systemTimer>
  if(systemCount%4==0){
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <TIM2_IRQHandler+0x3c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <TIM2_IRQHandler+0x24>
	  systemFunction();
 8001d82:	f000 f8e9 	bl	8001f58 <systemFunction>
	  systemCount=1;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <TIM2_IRQHandler+0x3c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }
  systemCount++;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <TIM2_IRQHandler+0x3c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <TIM2_IRQHandler+0x3c>)
 8001d94:	6013      	str	r3, [r2, #0]
  flag_msg = 1;
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <TIM2_IRQHandler+0x40>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000708 	.word	0x20000708
 8001da4:	200006ec 	.word	0x200006ec
 8001da8:	200006e4 	.word	0x200006e4

08001dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <USART1_IRQHandler+0x18>)
 8001db2:	f005 f86f 	bl	8006e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rcv_data, 15);
 8001db6:	220f      	movs	r2, #15
 8001db8:	4903      	ldr	r1, [pc, #12]	@ (8001dc8 <USART1_IRQHandler+0x1c>)
 8001dba:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <USART1_IRQHandler+0x18>)
 8001dbc:	f005 f81e 	bl	8006dfc <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200007a0 	.word	0x200007a0
 8001dc8:	200006f0 	.word	0x200006f0

08001dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_kill>:

int _kill(int pid, int sig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de6:	f008 f8cb 	bl	8009f80 <__errno>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2216      	movs	r2, #22
 8001dee:	601a      	str	r2, [r3, #0]
  return -1;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_exit>:

void _exit (int status)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ffe7 	bl	8001ddc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e0e:	bf00      	nop
 8001e10:	e7fd      	b.n	8001e0e <_exit+0x12>

08001e12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00a      	b.n	8001e3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e24:	f3af 8000 	nop.w
 8001e28:	4601      	mov	r1, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	b2ca      	uxtb	r2, r1
 8001e32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dbf0      	blt.n	8001e24 <_read+0x12>
  }

  return len;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e009      	b.n	8001e72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	60ba      	str	r2, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf1      	blt.n	8001e5e <_write+0x12>
  }
  return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_close>:

int _close(int file)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eac:	605a      	str	r2, [r3, #4]
  return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_isatty>:

int _isatty(int file)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f008 f830 	bl	8009f80 <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20008000 	.word	0x20008000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	20000700 	.word	0x20000700
 8001f54:	20000988 	.word	0x20000988

08001f58 <systemFunction>:
#include "system.h"

int control_state = 1, counter;
extern int rcv_buffer[4], bufferMode[2];

void systemFunction(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
//	State *addr = &state;
	Param *calc = &conv;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <systemFunction+0x38>)
 8001f60:	607b      	str	r3, [r7, #4]
	if (control_state == 1) {
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <systemFunction+0x3c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10a      	bne.n	8001f80 <systemFunction+0x28>
			PWM_Control((float)calc->set_point);		//activating control
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8a1b      	ldrh	r3, [r3, #16]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	f7ff f9b5 	bl	80012e8 <PWM_Control>
	}else{
		duty=100;
	}
}
 8001f7e:	e002      	b.n	8001f86 <systemFunction+0x2e>
		duty=100;
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <systemFunction+0x40>)
 8001f82:	2264      	movs	r2, #100	@ 0x64
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000208 	.word	0x20000208
 8001f94:	20000014 	.word	0x20000014
 8001f98:	2000000c 	.word	0x2000000c

08001f9c <systemVal>:

void systemVal(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
	State *addr = &state;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <systemVal+0x88>)
 8001fa4:	607b      	str	r3, [r7, #4]
	Param *calc = &conv;
 8001fa6:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <systemVal+0x8c>)
 8001fa8:	603b      	str	r3, [r7, #0]
	if (addr->mode_set == 'B') {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b42      	cmp	r3, #66	@ 0x42
 8001fb0:	d128      	bne.n	8002004 <systemVal+0x68>
		if(rcv_buffer[1] != 0){
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <systemVal+0x90>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <systemVal+0x26>
		bufferMode[1]=rcv_buffer[1];
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <systemVal+0x90>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <systemVal+0x94>)
 8001fc0:	6053      	str	r3, [r2, #4]
		}
		if (rcv_buffer[0] == 5) {
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <systemVal+0x90>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d109      	bne.n	8001fde <systemVal+0x42>
			HAL_GPIO_WritePin(LED_MODE_GPIO_Port, LED_MODE_Pin, 1);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd4:	f002 fb56 	bl	8004684 <HAL_GPIO_WritePin>
			addr->mode_set = 'A';
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2241      	movs	r2, #65	@ 0x41
 8001fdc:	701a      	strb	r2, [r3, #0]
		}
		if (rcv_buffer[3] != 0) {
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <systemVal+0x90>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <systemVal+0x54>
			calc->set_Time = rcv_buffer[3];
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <systemVal+0x90>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	825a      	strh	r2, [r3, #18]
		}
		if (rcv_buffer[2] != 0) {
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <systemVal+0x90>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d011      	beq.n	800201c <systemVal+0x80>
			calc->set_point = rcv_buffer[2];
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <systemVal+0x90>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	821a      	strh	r2, [r3, #16]
		}
	} else if (addr->mode_set == 'A') {
		calc->set_Time = calc->buff_set_Time;
		calc->set_point = calc->buff_set_point;
	}
}
 8002002:	e00b      	b.n	800201c <systemVal+0x80>
	} else if (addr->mode_set == 'A') {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b41      	cmp	r3, #65	@ 0x41
 800200a:	d107      	bne.n	800201c <systemVal+0x80>
		calc->set_Time = calc->buff_set_Time;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	8ada      	ldrh	r2, [r3, #22]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	825a      	strh	r2, [r3, #18]
		calc->set_point = calc->buff_set_point;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	8a9a      	ldrh	r2, [r3, #20]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	821a      	strh	r2, [r3, #16]
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200006d8 	.word	0x200006d8
 8002028:	20000208 	.word	0x20000208
 800202c:	20000568 	.word	0x20000568
 8002030:	20000560 	.word	0x20000560

08002034 <systemTimer>:

void systemTimer(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
//	State *addr = &state;
	Param *calc = &conv;
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <systemTimer+0x98>)
 800203c:	607b      	str	r3, [r7, #4]
	if ((bufferMode[1] == 2 && control_state == 0) ||bufferMode[1] == 2) {
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <systemTimer+0x9c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d103      	bne.n	800204e <systemTimer+0x1a>
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <systemTimer+0xa0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <systemTimer+0x22>
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <systemTimer+0x9c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d109      	bne.n	800206a <systemTimer+0x36>
		counter = 0;
 8002056:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <systemTimer+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_STOPRUN_GPIO_Port, LED_STOPRUN_Pin, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002066:	f002 fb0d 	bl	8004684 <HAL_GPIO_WritePin>
	}
	if (bufferMode[1] == 3 && control_state == 1) {
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <systemTimer+0x9c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d127      	bne.n	80020c2 <systemTimer+0x8e>
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <systemTimer+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d123      	bne.n	80020c2 <systemTimer+0x8e>
		HAL_GPIO_WritePin(LED_STOPRUN_GPIO_Port, LED_STOPRUN_Pin, 1);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002084:	f002 fafe 	bl	8004684 <HAL_GPIO_WritePin>
		counter++;
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <systemTimer+0xa4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <systemTimer+0xa4>)
 8002090:	6013      	str	r3, [r2, #0]
		if (counter == (calc->set_Time * 600)) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8a5b      	ldrh	r3, [r3, #18]
 8002096:	461a      	mov	r2, r3
 8002098:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800209c:	fb03 f202 	mul.w	r2, r3, r2
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <systemTimer+0xa4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d10c      	bne.n	80020c2 <systemTimer+0x8e>
			HAL_GPIO_WritePin(LED_STOPRUN_GPIO_Port, LED_STOPRUN_Pin, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b2:	f002 fae7 	bl	8004684 <HAL_GPIO_WritePin>
			control_state = 0;
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <systemTimer+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
			counter = 0;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <systemTimer+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
//		if (counter == (calc->PC_set_Time * 600)) {
//			control_state = 0;
//			counter = 0;
//		}
//	}
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000208 	.word	0x20000208
 80020d0:	20000560 	.word	0x20000560
 80020d4:	20000014 	.word	0x20000014
 80020d8:	20000704 	.word	0x20000704

080020dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <MX_TIM2_Init+0x94>)
 8002120:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002124:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <MX_TIM2_Init+0x94>)
 8002128:	22a9      	movs	r2, #169	@ 0xa9
 800212a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <MX_TIM2_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_TIM2_Init+0x94>)
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <MX_TIM2_Init+0x98>)
 8002136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_TIM2_Init+0x94>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_TIM2_Init+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002144:	4813      	ldr	r0, [pc, #76]	@ (8002194 <MX_TIM2_Init+0x94>)
 8002146:	f003 faab 	bl	80056a0 <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002150:	f7ff fd41 	bl	8001bd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4619      	mov	r1, r3
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <MX_TIM2_Init+0x94>)
 8002162:	f003 ff25 	bl	8005fb0 <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800216c:	f7ff fd33 	bl	8001bd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_TIM2_Init+0x94>)
 800217e:	f004 fc97 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002188:	f7ff fd25 	bl	8001bd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000708 	.word	0x20000708
 8002198:	0001869f 	.word	0x0001869f

0800219c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	@ 0x38
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021bc:	463b      	mov	r3, r7
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002288 <MX_TIM3_Init+0xec>)
 80021d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021d6:	22a9      	movs	r2, #169	@ 0xa9
 80021d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80021e0:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021e2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80021e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f4:	4823      	ldr	r0, [pc, #140]	@ (8002284 <MX_TIM3_Init+0xe8>)
 80021f6:	f003 fa53 	bl	80056a0 <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002200:	f7ff fce9 	bl	8001bd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800220a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220e:	4619      	mov	r1, r3
 8002210:	481c      	ldr	r0, [pc, #112]	@ (8002284 <MX_TIM3_Init+0xe8>)
 8002212:	f003 fecd 	bl	8005fb0 <HAL_TIM_ConfigClockSource>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800221c:	f7ff fcdb 	bl	8001bd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002220:	4818      	ldr	r0, [pc, #96]	@ (8002284 <MX_TIM3_Init+0xe8>)
 8002222:	f003 faff 	bl	8005824 <HAL_TIM_PWM_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800222c:	f7ff fcd3 	bl	8001bd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4811      	ldr	r0, [pc, #68]	@ (8002284 <MX_TIM3_Init+0xe8>)
 8002240:	f004 fc36 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800224a:	f7ff fcc4 	bl	8001bd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224e:	2360      	movs	r3, #96	@ 0x60
 8002250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225e:	463b      	mov	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	4807      	ldr	r0, [pc, #28]	@ (8002284 <MX_TIM3_Init+0xe8>)
 8002266:	f003 fd8f 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002270:	f7ff fcb1 	bl	8001bd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002274:	4803      	ldr	r0, [pc, #12]	@ (8002284 <MX_TIM3_Init+0xe8>)
 8002276:	f000 f841 	bl	80022fc <HAL_TIM_MspPostInit>

}
 800227a:	bf00      	nop
 800227c:	3738      	adds	r7, #56	@ 0x38
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000754 	.word	0x20000754
 8002288:	40000400 	.word	0x40000400

0800228c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229c:	d114      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	201c      	movs	r0, #28
 80022bc:	f001 fce1 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022c0:	201c      	movs	r0, #28
 80022c2:	f001 fcf8 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022c6:	e010      	b.n	80022ea <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <HAL_TIM_Base_MspInit+0x6c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10b      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_TIM_Base_MspInit+0x68>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40000400 	.word	0x40000400

080022fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_TIM_MspPostInit+0x64>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d11b      	bne.n	8002356 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_TIM_MspPostInit+0x68>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_TIM_MspPostInit+0x68>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232a:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_TIM_MspPostInit+0x68>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_GEN_Pin;
 8002336:	2340      	movs	r3, #64	@ 0x40
 8002338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002346:	2302      	movs	r3, #2
 8002348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GEN_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	@ (8002368 <HAL_TIM_MspPostInit+0x6c>)
 8002352:	f001 fffd 	bl	8004350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40000400 	.word	0x40000400
 8002364:	40021000 	.word	0x40021000
 8002368:	48000800 	.word	0x48000800

0800236c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002370:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 8002372:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <MX_USART1_UART_Init+0x94>)
 8002374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002376:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800238a:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023a8:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ae:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b4:	4811      	ldr	r0, [pc, #68]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023b6:	f004 fc43 	bl	8006c40 <HAL_UART_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023c0:	f7ff fc09 	bl	8001bd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c4:	2100      	movs	r1, #0
 80023c6:	480d      	ldr	r0, [pc, #52]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023c8:	f006 fc93 	bl	8008cf2 <HAL_UARTEx_SetTxFifoThreshold>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023d2:	f7ff fc00 	bl	8001bd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d6:	2100      	movs	r1, #0
 80023d8:	4808      	ldr	r0, [pc, #32]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023da:	f006 fcc8 	bl	8008d6e <HAL_UARTEx_SetRxFifoThreshold>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023e4:	f7ff fbf7 	bl	8001bd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023e8:	4804      	ldr	r0, [pc, #16]	@ (80023fc <MX_USART1_UART_Init+0x90>)
 80023ea:	f006 fc49 	bl	8008c80 <HAL_UARTEx_DisableFifoMode>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023f4:	f7ff fbef 	bl	8001bd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200007a0 	.word	0x200007a0
 8002400:	40013800 	.word	0x40013800

08002404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b09a      	sub	sp, #104	@ 0x68
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2244      	movs	r2, #68	@ 0x44
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f007 fd4a 	bl	8009ebe <memset>
  if(uartHandle->Instance==USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <HAL_UART_MspInit+0xb4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d13d      	bne.n	80024b0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002434:	2301      	movs	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f002 ff3d 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800244c:	f7ff fbc3 	bl	8001bd6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_UART_MspInit+0xb8>)
 8002452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002454:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_UART_MspInit+0xb8>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800245a:	6613      	str	r3, [r2, #96]	@ 0x60
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_UART_MspInit+0xb8>)
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_UART_MspInit+0xb8>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	4a13      	ldr	r2, [pc, #76]	@ (80024bc <HAL_UART_MspInit+0xb8>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_UART_MspInit+0xb8>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002480:	2330      	movs	r3, #48	@ 0x30
 8002482:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002490:	2307      	movs	r3, #7
 8002492:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002498:	4619      	mov	r1, r3
 800249a:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <HAL_UART_MspInit+0xbc>)
 800249c:	f001 ff58 	bl	8004350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	2025      	movs	r0, #37	@ 0x25
 80024a6:	f001 fbec 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024aa:	2025      	movs	r0, #37	@ 0x25
 80024ac:	f001 fc03 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024b0:	bf00      	nop
 80024b2:	3768      	adds	r7, #104	@ 0x68
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000800 	.word	0x48000800

080024c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024c4:	480d      	ldr	r0, [pc, #52]	@ (80024fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024c8:	f7ff fe08 	bl	80020dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024cc:	480c      	ldr	r0, [pc, #48]	@ (8002500 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ce:	490d      	ldr	r1, [pc, #52]	@ (8002504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <LoopForever+0xe>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002510 <LoopForever+0x16>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f007 fd4b 	bl	8009f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024f6:	f7ff fac1 	bl	8001a7c <main>

080024fa <LoopForever>:

LoopForever:
    b LoopForever
 80024fa:	e7fe      	b.n	80024fa <LoopForever>
  ldr   r0, =_estack
 80024fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002508:	0800da50 	.word	0x0800da50
  ldr r2, =_sbss
 800250c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002510:	20000984 	.word	0x20000984

08002514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC1_2_IRQHandler>

08002516 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002520:	2003      	movs	r0, #3
 8002522:	f001 fba3 	bl	8003c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002526:	200f      	movs	r0, #15
 8002528:	f000 f80e 	bl	8002548 <HAL_InitTick>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	e001      	b.n	800253c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002538:	f7ff fb54 	bl	8001be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800253c:	79fb      	ldrb	r3, [r7, #7]

}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002554:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <HAL_InitTick+0x68>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d022      	beq.n	80025a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <HAL_InitTick+0x6c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <HAL_InitTick+0x68>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002568:	fbb1 f3f3 	udiv	r3, r1, r3
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fbae 	bl	8003cd2 <HAL_SYSTICK_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10f      	bne.n	800259c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b0f      	cmp	r3, #15
 8002580:	d809      	bhi.n	8002596 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002582:	2200      	movs	r2, #0
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	f04f 30ff 	mov.w	r0, #4294967295
 800258a:	f001 fb7a 	bl	8003c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <HAL_InitTick+0x70>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e007      	b.n	80025a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e004      	b.n	80025a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e001      	b.n	80025a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000020 	.word	0x20000020
 80025b4:	20000018 	.word	0x20000018
 80025b8:	2000001c 	.word	0x2000001c

080025bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_IncTick+0x1c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_IncTick+0x20>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a03      	ldr	r2, [pc, #12]	@ (80025d8 <HAL_IncTick+0x1c>)
 80025cc:	6013      	str	r3, [r2, #0]
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20000834 	.word	0x20000834
 80025dc:	20000020 	.word	0x20000020

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000834 	.word	0x20000834

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d004      	beq.n	800261c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_Delay+0x40>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800261c:	bf00      	nop
 800261e:	f7ff ffdf 	bl	80025e0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	d8f7      	bhi.n	800261e <HAL_Delay+0x26>
  {
  }
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000020 	.word	0x20000020

0800263c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3360      	adds	r3, #96	@ 0x60
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <LL_ADC_SetOffset+0x44>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	03fff000 	.word	0x03fff000

080026ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3360      	adds	r3, #96	@ 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3360      	adds	r3, #96	@ 0x60
 8002728:	461a      	mov	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3360      	adds	r3, #96	@ 0x60
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3360      	adds	r3, #96	@ 0x60
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	615a      	str	r2, [r3, #20]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3330      	adds	r3, #48	@ 0x30
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	211f      	movs	r1, #31
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	401a      	ands	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 011f 	and.w	r1, r3, #31
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3314      	adds	r3, #20
 800286e:	461a      	mov	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	0e5b      	lsrs	r3, r3, #25
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	0d1b      	lsrs	r3, r3, #20
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2107      	movs	r1, #7
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	401a      	ands	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	0d1b      	lsrs	r3, r3, #20
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	431a      	orrs	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0318 	and.w	r3, r3, #24
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028d8:	40d9      	lsrs	r1, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	400b      	ands	r3, r1
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	0007ffff 	.word	0x0007ffff

080028fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 031f 	and.w	r3, r3, #31
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002928:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6093      	str	r3, [r2, #8]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800294c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002950:	d101      	bne.n	8002956 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002978:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <LL_ADC_IsEnabled+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_ADC_IsEnabled+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d101      	bne.n	8002a42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d101      	bne.n	8002a68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e167      	b.n	8002d62 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe feb1 	bl	8001808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff3f 	bl	800293c <LL_ADC_IsDeepPowerDownEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff25 	bl	8002918 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff5a 	bl	800298c <LL_ADC_IsInternalRegulatorEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d115      	bne.n	8002b0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff3e 	bl	8002964 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8002d6c <HAL_ADC_Init+0x2f4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	4aa0      	ldr	r2, [pc, #640]	@ (8002d70 <HAL_ADC_Init+0x2f8>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	3301      	adds	r3, #1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff3c 	bl	800298c <LL_ADC_IsInternalRegulatorEnabled>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	f043 0210 	orr.w	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff75 	bl	8002a2a <LL_ADC_REG_IsConversionOngoing>
 8002b40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f040 8100 	bne.w	8002d50 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 80fc 	bne.w	8002d50 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b60:	f043 0202 	orr.w	r2, r3, #2
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff35 	bl	80029dc <LL_ADC_IsEnabled>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b7c:	f7ff ff2e 	bl	80029dc <LL_ADC_IsEnabled>
 8002b80:	4604      	mov	r4, r0
 8002b82:	487c      	ldr	r0, [pc, #496]	@ (8002d74 <HAL_ADC_Init+0x2fc>)
 8002b84:	f7ff ff2a 	bl	80029dc <LL_ADC_IsEnabled>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4878      	ldr	r0, [pc, #480]	@ (8002d78 <HAL_ADC_Init+0x300>)
 8002b98:	f7ff fd50 	bl	800263c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7f5b      	ldrb	r3, [r3, #29]
 8002ba0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ba6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d106      	bne.n	8002bd8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	045b      	lsls	r3, r3, #17
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <HAL_ADC_Init+0x304>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff14 	bl	8002a50 <LL_ADC_INJ_IsConversionOngoing>
 8002c28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d16d      	bne.n	8002d0c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d16a      	bne.n	8002d0c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c52:	f023 0302 	bic.w	r3, r3, #2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6911      	ldr	r1, [r2, #16]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c96:	e013      	b.n	8002cc0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ca6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d118      	bne.n	8002cfc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cec:	430a      	orrs	r2, r1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	e007      	b.n	8002d0c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10c      	bne.n	8002d2e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f023 010f 	bic.w	r1, r3, #15
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d2c:	e007      	b.n	8002d3e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 020f 	bic.w	r2, r2, #15
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	f023 0303 	bic.w	r3, r3, #3
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d4e:	e007      	b.n	8002d60 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	@ 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000018 	.word	0x20000018
 8002d70:	053e2d63 	.word	0x053e2d63
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000300 	.word	0x50000300
 8002d7c:	fff04007 	.word	0xfff04007

08002d80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d8c:	4851      	ldr	r0, [pc, #324]	@ (8002ed4 <HAL_ADC_Start_DMA+0x154>)
 8002d8e:	f7ff fdb5 	bl	80028fc <LL_ADC_GetMultimode>
 8002d92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fe46 	bl	8002a2a <LL_ADC_REG_IsConversionOngoing>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 808f 	bne.w	8002ec4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_Start_DMA+0x34>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e08a      	b.n	8002eca <HAL_ADC_Start_DMA+0x14a>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d002      	beq.n	8002dce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	d173      	bne.n	8002eb6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fc98 	bl	8003704 <ADC_Enable>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d166      	bne.n	8002eac <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a38      	ldr	r2, [pc, #224]	@ (8002ed8 <HAL_ADC_Start_DMA+0x158>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d002      	beq.n	8002e02 <HAL_ADC_Start_DMA+0x82>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e001      	b.n	8002e06 <HAL_ADC_Start_DMA+0x86>
 8002e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d002      	beq.n	8002e14 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e30:	f023 0206 	bic.w	r2, r3, #6
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	4a25      	ldr	r2, [pc, #148]	@ (8002edc <HAL_ADC_Start_DMA+0x15c>)
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ee0 <HAL_ADC_Start_DMA+0x160>)
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	4a23      	ldr	r2, [pc, #140]	@ (8002ee4 <HAL_ADC_Start_DMA+0x164>)
 8002e56:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	221c      	movs	r2, #28
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0210 	orr.w	r2, r2, #16
 8002e76:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3340      	adds	r3, #64	@ 0x40
 8002e92:	4619      	mov	r1, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f000 ffd0 	bl	8003e3c <HAL_DMA_Start_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fdac 	bl	8002a02 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002eaa:	e00d      	b.n	8002ec8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002eb4:	e008      	b.n	8002ec8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002ec2:	e001      	b.n	8002ec8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	50000300 	.word	0x50000300
 8002ed8:	50000100 	.word	0x50000100
 8002edc:	08003811 	.word	0x08003811
 8002ee0:	080038e9 	.word	0x080038e9
 8002ee4:	08003905 	.word	0x08003905

08002ee8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b0b6      	sub	sp, #216	@ 0xd8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x22>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e3c8      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x7b4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fd69 	bl	8002a2a <LL_ADC_REG_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 83ad 	bne.w	80036ba <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f7ff fc4a 	bl	8002806 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fd57 	bl	8002a2a <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fd63 	bl	8002a50 <LL_ADC_INJ_IsConversionOngoing>
 8002f8a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 81d9 	bne.w	800334a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 81d4 	bne.w	800334a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002faa:	d10f      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7ff fc51 	bl	800285e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fbf8 	bl	80027ba <LL_ADC_SetSamplingTimeCommonConfig>
 8002fca:	e00e      	b.n	8002fea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f7ff fc40 	bl	800285e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fbe8 	bl	80027ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d022      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800301c:	f7ff fb42 	bl	80026a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6919      	ldr	r1, [r3, #16]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	461a      	mov	r2, r3
 800302e:	f7ff fb8e 	bl	800274e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x124>
 8003042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003046:	e000      	b.n	800304a <HAL_ADC_ConfigChannel+0x126>
 8003048:	2300      	movs	r3, #0
 800304a:	461a      	mov	r2, r3
 800304c:	f7ff fb9a 	bl	8002784 <LL_ADC_SetOffsetSaturation>
 8003050:	e17b      	b.n	800334a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fb47 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_ADC_ConfigChannel+0x15a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fb3c 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	e01e      	b.n	80030bc <HAL_ADC_ConfigChannel+0x198>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fb31 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800309c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e004      	b.n	80030ba <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80030b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x1b0>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	e018      	b.n	8003106 <HAL_ADC_ConfigChannel+0x1e2>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80030f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e004      	b.n	8003106 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80030fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003106:	429a      	cmp	r2, r3
 8003108:	d106      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fb00 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fae4 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x220>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fad9 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	e01e      	b.n	8003182 <HAL_ADC_ConfigChannel+0x25e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff face 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003166:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800316a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003172:	2320      	movs	r3, #32
 8003174:	e004      	b.n	8003180 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <HAL_ADC_ConfigChannel+0x276>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	e018      	b.n	80031cc <HAL_ADC_ConfigChannel+0x2a8>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80031be:	2320      	movs	r3, #32
 80031c0:	e004      	b.n	80031cc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80031c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d106      	bne.n	80031de <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fa9d 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fa81 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_ADC_ConfigChannel+0x2e6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fa76 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	e01e      	b.n	8003248 <HAL_ADC_ConfigChannel+0x324>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fa6b 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003228:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800322c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003230:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e004      	b.n	8003246 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800323c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x33c>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	e016      	b.n	800328e <HAL_ADC_ConfigChannel+0x36a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003272:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e004      	b.n	800328e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	2102      	movs	r1, #2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fa3c 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2103      	movs	r1, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fa20 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x3a8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2103      	movs	r1, #3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fa15 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	e017      	b.n	80032fc <HAL_ADC_ConfigChannel+0x3d8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2103      	movs	r1, #3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fa0a 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032e6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80032e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e003      	b.n	80032fa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80032f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x3f0>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	e011      	b.n	8003338 <HAL_ADC_ConfigChannel+0x414>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003324:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003338:	429a      	cmp	r2, r3
 800333a:	d106      	bne.n	800334a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	2103      	movs	r1, #3
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff f9e7 	bl	8002718 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fb44 	bl	80029dc <LL_ADC_IsEnabled>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8140 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	461a      	mov	r2, r3
 800336a:	f7ff faa3 	bl	80028b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a8f      	ldr	r2, [pc, #572]	@ (80035b0 <HAL_ADC_ConfigChannel+0x68c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f040 8131 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x47e>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0e9b      	lsrs	r3, r3, #26
 8003390:	3301      	adds	r3, #1
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2b09      	cmp	r3, #9
 8003398:	bf94      	ite	ls
 800339a:	2301      	movls	r3, #1
 800339c:	2300      	movhi	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e019      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x4b2>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80033ba:	2320      	movs	r3, #32
 80033bc:	e003      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80033be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d079      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x4d2>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0e9b      	lsrs	r3, r3, #26
 80033ec:	3301      	adds	r3, #1
 80033ee:	069b      	lsls	r3, r3, #26
 80033f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033f4:	e015      	b.n	8003422 <HAL_ADC_ConfigChannel+0x4fe>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003406:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e003      	b.n	800341a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	069b      	lsls	r3, r3, #26
 800341e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x51e>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0e9b      	lsrs	r3, r3, #26
 8003434:	3301      	adds	r3, #1
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	e017      	b.n	8003472 <HAL_ADC_ConfigChannel+0x54e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003452:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e003      	b.n	8003466 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800345e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	ea42 0103 	orr.w	r1, r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x574>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	0e9b      	lsrs	r3, r3, #26
 8003488:	3301      	adds	r3, #1
 800348a:	f003 021f 	and.w	r2, r3, #31
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	051b      	lsls	r3, r3, #20
 8003496:	e018      	b.n	80034ca <HAL_ADC_ConfigChannel+0x5a6>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 021f 	and.w	r2, r3, #31
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ca:	430b      	orrs	r3, r1
 80034cc:	e081      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x5c6>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	3301      	adds	r3, #1
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034e8:	e015      	b.n	8003516 <HAL_ADC_ConfigChannel+0x5f2>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	069b      	lsls	r3, r3, #26
 8003512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x612>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	0e9b      	lsrs	r3, r3, #26
 8003528:	3301      	adds	r3, #1
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	e017      	b.n	8003566 <HAL_ADC_ConfigChannel+0x642>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	61fb      	str	r3, [r7, #28]
  return result;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800354e:	2320      	movs	r3, #32
 8003550:	e003      	b.n	800355a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	ea42 0103 	orr.w	r1, r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x66e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	3301      	adds	r3, #1
 800357e:	f003 021f 	and.w	r2, r3, #31
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	3b1e      	subs	r3, #30
 800358a:	051b      	lsls	r3, r3, #20
 800358c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003590:	e01e      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x6ac>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	613b      	str	r3, [r7, #16]
  return result;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e006      	b.n	80035bc <HAL_ADC_ConfigChannel+0x698>
 80035ae:	bf00      	nop
 80035b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 021f 	and.w	r2, r3, #31
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	3b1e      	subs	r3, #30
 80035ca:	051b      	lsls	r3, r3, #20
 80035cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7ff f941 	bl	800285e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d071      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e8:	483e      	ldr	r0, [pc, #248]	@ (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80035ea:	f7ff f84d 	bl	8002688 <LL_ADC_GetCommonPathInternalCh>
 80035ee:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3c      	ldr	r2, [pc, #240]	@ (80036e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x6e2>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <HAL_ADC_ConfigChannel+0x7c8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d127      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800360a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d121      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361a:	d157      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800361c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003620:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003624:	4619      	mov	r1, r3
 8003626:	482f      	ldr	r0, [pc, #188]	@ (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003628:	f7ff f81b 	bl	8002662 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362c:	4b30      	ldr	r3, [pc, #192]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7cc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003646:	e002      	b.n	800364e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003654:	e03a      	b.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a27      	ldr	r2, [pc, #156]	@ (80036f8 <HAL_ADC_ConfigChannel+0x7d4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d113      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_ADC_ConfigChannel+0x7d8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02a      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800367e:	4619      	mov	r1, r3
 8003680:	4818      	ldr	r0, [pc, #96]	@ (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003682:	f7fe ffee 	bl	8002662 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003686:	e021      	b.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <HAL_ADC_ConfigChannel+0x7dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d11c      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <HAL_ADC_ConfigChannel+0x7d8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d011      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036b0:	4619      	mov	r1, r3
 80036b2:	480c      	ldr	r0, [pc, #48]	@ (80036e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80036b4:	f7fe ffd5 	bl	8002662 <LL_ADC_SetCommonPathInternalCh>
 80036b8:	e008      	b.n	80036cc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036d8:	4618      	mov	r0, r3
 80036da:	37d8      	adds	r7, #216	@ 0xd8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	80080000 	.word	0x80080000
 80036e4:	50000300 	.word	0x50000300
 80036e8:	c3210000 	.word	0xc3210000
 80036ec:	90c00010 	.word	0x90c00010
 80036f0:	20000018 	.word	0x20000018
 80036f4:	053e2d63 	.word	0x053e2d63
 80036f8:	c7520000 	.word	0xc7520000
 80036fc:	50000100 	.word	0x50000100
 8003700:	cb840000 	.word	0xcb840000

08003704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff f961 	bl	80029dc <LL_ADC_IsEnabled>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d169      	bne.n	80037f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	4b36      	ldr	r3, [pc, #216]	@ (8003800 <ADC_Enable+0xfc>)
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003732:	f043 0210 	orr.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e055      	b.n	80037f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f930 	bl	80029b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003754:	482b      	ldr	r0, [pc, #172]	@ (8003804 <ADC_Enable+0x100>)
 8003756:	f7fe ff97 	bl	8002688 <LL_ADC_GetCommonPathInternalCh>
 800375a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800375c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003764:	4b28      	ldr	r3, [pc, #160]	@ (8003808 <ADC_Enable+0x104>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	4a28      	ldr	r2, [pc, #160]	@ (800380c <ADC_Enable+0x108>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800377e:	e002      	b.n	8003786 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3b01      	subs	r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f9      	bne.n	8003780 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800378c:	f7fe ff28 	bl	80025e0 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003792:	e028      	b.n	80037e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f91f 	bl	80029dc <LL_ADC_IsEnabled>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f903 	bl	80029b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037ae:	f7fe ff17 	bl	80025e0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d914      	bls.n	80037e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d00d      	beq.n	80037e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e007      	b.n	80037f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d1cf      	bne.n	8003794 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	8000003f 	.word	0x8000003f
 8003804:	50000300 	.word	0x50000300
 8003808:	20000018 	.word	0x20000018
 800380c:	053e2d63 	.word	0x053e2d63

08003810 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d14b      	bne.n	80038c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d021      	beq.n	8003888 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe ffc9 	bl	80027e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d032      	beq.n	80038ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d12b      	bne.n	80038ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11f      	bne.n	80038ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003886:	e018      	b.n	80038ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d111      	bne.n	80038ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff fb14 	bl	8002ee8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038c0:	e00e      	b.n	80038e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff fb1e 	bl	8002f10 <HAL_ADC_ErrorCallback>
}
 80038d4:	e004      	b.n	80038e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fb00 	bl	8002efc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff faf0 	bl	8002f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <LL_ADC_IsEnabled>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <LL_ADC_IsEnabled+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_ADC_IsEnabled+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_ADC_REG_IsConversionOngoing>:
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d101      	bne.n	8003976 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b0a1      	sub	sp, #132	@ 0x84
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e08b      	b.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039aa:	2300      	movs	r3, #0
 80039ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039ae:	2300      	movs	r3, #0
 80039b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ba:	d102      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039bc:	4b41      	ldr	r3, [pc, #260]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	e001      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e06a      	b.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ffb9 	bl	800395e <LL_ADC_REG_IsConversionOngoing>
 80039ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ffb3 	bl	800395e <LL_ADC_REG_IsConversionOngoing>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d14c      	bne.n	8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80039fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d149      	bne.n	8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a04:	4b30      	ldr	r3, [pc, #192]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003a06:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d028      	beq.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a22:	035b      	lsls	r3, r3, #13
 8003a24:	430b      	orrs	r3, r1
 8003a26:	431a      	orrs	r2, r3
 8003a28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a30:	f7ff ff82 	bl	8003938 <LL_ADC_IsEnabled>
 8003a34:	4604      	mov	r4, r0
 8003a36:	4823      	ldr	r0, [pc, #140]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a38:	f7ff ff7e 	bl	8003938 <LL_ADC_IsEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4323      	orrs	r3, r4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d133      	bne.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	6811      	ldr	r1, [r2, #0]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	6892      	ldr	r2, [r2, #8]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a5e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a60:	e024      	b.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a6e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a72:	f7ff ff61 	bl	8003938 <LL_ADC_IsEnabled>
 8003a76:	4604      	mov	r4, r0
 8003a78:	4812      	ldr	r0, [pc, #72]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a7a:	f7ff ff5d 	bl	8003938 <LL_ADC_IsEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4323      	orrs	r3, r4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d112      	bne.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a8e:	f023 030f 	bic.w	r3, r3, #15
 8003a92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a96:	e009      	b.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003aaa:	e000      	b.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003aac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ab6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3784      	adds	r7, #132	@ 0x84
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	50000100 	.word	0x50000100
 8003ac8:	50000300 	.word	0x50000300

08003acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afe:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60d3      	str	r3, [r2, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b18:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <__NVIC_GetPriorityGrouping+0x18>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f003 0307 	and.w	r3, r3, #7
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db0b      	blt.n	8003b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	4907      	ldr	r1, [pc, #28]	@ (8003b68 <__NVIC_EnableIRQ+0x38>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	db0a      	blt.n	8003b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <__NVIC_SetPriority+0x4c>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	0112      	lsls	r2, r2, #4
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b94:	e00a      	b.n	8003bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4908      	ldr	r1, [pc, #32]	@ (8003bbc <__NVIC_SetPriority+0x50>)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	440b      	add	r3, r1
 8003baa:	761a      	strb	r2, [r3, #24]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000e100 	.word	0xe000e100
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	@ 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f1c3 0307 	rsb	r3, r3, #7
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	bf28      	it	cs
 8003bde:	2304      	movcs	r3, #4
 8003be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d902      	bls.n	8003bf0 <NVIC_EncodePriority+0x30>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3b03      	subs	r3, #3
 8003bee:	e000      	b.n	8003bf2 <NVIC_EncodePriority+0x32>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	401a      	ands	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43d9      	mvns	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	4313      	orrs	r3, r2
         );
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3724      	adds	r7, #36	@ 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c38:	d301      	bcc.n	8003c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e00f      	b.n	8003c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c68 <SysTick_Config+0x40>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c46:	210f      	movs	r1, #15
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	f7ff ff8e 	bl	8003b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <SysTick_Config+0x40>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c56:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <SysTick_Config+0x40>)
 8003c58:	2207      	movs	r2, #7
 8003c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	e000e010 	.word	0xe000e010

08003c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ff29 	bl	8003acc <__NVIC_SetPriorityGrouping>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	4603      	mov	r3, r0
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c90:	f7ff ff40 	bl	8003b14 <__NVIC_GetPriorityGrouping>
 8003c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff90 	bl	8003bc0 <NVIC_EncodePriority>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff5f 	bl	8003b6c <__NVIC_SetPriority>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff33 	bl	8003b30 <__NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffa4 	bl	8003c28 <SysTick_Config>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e08d      	b.n	8003e1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_DMA_Init+0x138>)
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d80f      	bhi.n	8003d2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b45      	ldr	r3, [pc, #276]	@ (8003e28 <HAL_DMA_Init+0x13c>)
 8003d12:	4413      	add	r3, r2
 8003d14:	4a45      	ldr	r2, [pc, #276]	@ (8003e2c <HAL_DMA_Init+0x140>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	009a      	lsls	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a42      	ldr	r2, [pc, #264]	@ (8003e30 <HAL_DMA_Init+0x144>)
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d28:	e00e      	b.n	8003d48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b40      	ldr	r3, [pc, #256]	@ (8003e34 <HAL_DMA_Init+0x148>)
 8003d32:	4413      	add	r3, r2
 8003d34:	4a3d      	ldr	r2, [pc, #244]	@ (8003e2c <HAL_DMA_Init+0x140>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	009a      	lsls	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a3c      	ldr	r2, [pc, #240]	@ (8003e38 <HAL_DMA_Init+0x14c>)
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa76 	bl	800428c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da8:	d102      	bne.n	8003db0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dc4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_DMA_Init+0x104>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d80c      	bhi.n	8003df0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa96 	bl	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	e008      	b.n	8003e02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40020407 	.word	0x40020407
 8003e28:	bffdfff8 	.word	0xbffdfff8
 8003e2c:	cccccccd 	.word	0xcccccccd
 8003e30:	40020000 	.word	0x40020000
 8003e34:	bffdfbf8 	.word	0xbffdfbf8
 8003e38:	40020400 	.word	0x40020400

08003e3c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_DMA_Start_IT+0x20>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e066      	b.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d155      	bne.n	8003f1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f9bb 	bl	8004210 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 020e 	orr.w	r2, r2, #14
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0204 	bic.w	r2, r2, #4
 8003ec2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 020a 	orr.w	r2, r2, #10
 8003ed2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e005      	b.n	8003f28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d005      	beq.n	8003f56 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e037      	b.n	8003fc6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 020e 	bic.w	r2, r2, #14
 8003f64:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f74:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	f003 021f 	and.w	r2, r3, #31
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f202 	lsl.w	r2, r1, r2
 8003f98:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fa2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00c      	beq.n	8003fc6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fc4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d00d      	beq.n	8004018 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	e047      	b.n	80040a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 020e 	bic.w	r2, r2, #14
 8004026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004042:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004064:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800407c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004086:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
    }
  }
  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2204      	movs	r2, #4
 80040d4:	409a      	lsls	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d026      	beq.n	800412c <HAL_DMA_IRQHandler+0x7a>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d021      	beq.n	800412c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0204 	bic.w	r2, r2, #4
 8004104:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f003 021f 	and.w	r2, r3, #31
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	2104      	movs	r1, #4
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	2b00      	cmp	r3, #0
 8004120:	d071      	beq.n	8004206 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800412a:	e06c      	b.n	8004206 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2202      	movs	r2, #2
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02e      	beq.n	800419e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d029      	beq.n	800419e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 020a 	bic.w	r2, r2, #10
 8004166:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	2102      	movs	r1, #2
 800417e:	fa01 f202 	lsl.w	r2, r1, r2
 8004182:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d038      	beq.n	8004206 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800419c:	e033      	b.n	8004206 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2208      	movs	r2, #8
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02a      	beq.n	8004208 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d025      	beq.n	8004208 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020e 	bic.w	r2, r2, #14
 80041ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004206:	bf00      	nop
 8004208:	bf00      	nop
}
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004226:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f202 	lsl.w	r2, r1, r2
 800424c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b10      	cmp	r3, #16
 800425c:	d108      	bne.n	8004270 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800426e:	e007      	b.n	8004280 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4b16      	ldr	r3, [pc, #88]	@ (80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d802      	bhi.n	80042a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80042a0:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e001      	b.n	80042aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80042a6:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80042a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3b08      	subs	r3, #8
 80042b6:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	009a      	lsls	r2, r3, #2
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40020407 	.word	0x40020407
 80042f8:	40020800 	.word	0x40020800
 80042fc:	40020820 	.word	0x40020820
 8004300:	cccccccd 	.word	0xcccccccd
 8004304:	40020880 	.word	0x40020880

08004308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a08      	ldr	r2, [pc, #32]	@ (800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800432a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b01      	subs	r3, #1
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2201      	movs	r2, #1
 8004336:	409a      	lsls	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	1000823f 	.word	0x1000823f
 800434c:	40020940 	.word	0x40020940

08004350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800435e:	e15a      	b.n	8004616 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	4013      	ands	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 814c 	beq.w	8004610 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d005      	beq.n	8004390 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800438c:	2b02      	cmp	r3, #2
 800438e:	d130      	bne.n	80043f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043c6:	2201      	movs	r2, #1
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0201 	and.w	r2, r3, #1
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d017      	beq.n	800442e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	2203      	movs	r2, #3
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d123      	bne.n	8004482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	08da      	lsrs	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3208      	adds	r2, #8
 8004442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	220f      	movs	r2, #15
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	08da      	lsrs	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3208      	adds	r2, #8
 800447c:	6939      	ldr	r1, [r7, #16]
 800447e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	2203      	movs	r2, #3
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80a6 	beq.w	8004610 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004634 <HAL_GPIO_Init+0x2e4>)
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004634 <HAL_GPIO_Init+0x2e4>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80044d0:	4b58      	ldr	r3, [pc, #352]	@ (8004634 <HAL_GPIO_Init+0x2e4>)
 80044d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044dc:	4a56      	ldr	r2, [pc, #344]	@ (8004638 <HAL_GPIO_Init+0x2e8>)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	3302      	adds	r3, #2
 80044e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	220f      	movs	r2, #15
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004506:	d01f      	beq.n	8004548 <HAL_GPIO_Init+0x1f8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a4c      	ldr	r2, [pc, #304]	@ (800463c <HAL_GPIO_Init+0x2ec>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d019      	beq.n	8004544 <HAL_GPIO_Init+0x1f4>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a4b      	ldr	r2, [pc, #300]	@ (8004640 <HAL_GPIO_Init+0x2f0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_GPIO_Init+0x1f0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a4a      	ldr	r2, [pc, #296]	@ (8004644 <HAL_GPIO_Init+0x2f4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00d      	beq.n	800453c <HAL_GPIO_Init+0x1ec>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a49      	ldr	r2, [pc, #292]	@ (8004648 <HAL_GPIO_Init+0x2f8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <HAL_GPIO_Init+0x1e8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a48      	ldr	r2, [pc, #288]	@ (800464c <HAL_GPIO_Init+0x2fc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_GPIO_Init+0x1e4>
 8004530:	2305      	movs	r3, #5
 8004532:	e00a      	b.n	800454a <HAL_GPIO_Init+0x1fa>
 8004534:	2306      	movs	r3, #6
 8004536:	e008      	b.n	800454a <HAL_GPIO_Init+0x1fa>
 8004538:	2304      	movs	r3, #4
 800453a:	e006      	b.n	800454a <HAL_GPIO_Init+0x1fa>
 800453c:	2303      	movs	r3, #3
 800453e:	e004      	b.n	800454a <HAL_GPIO_Init+0x1fa>
 8004540:	2302      	movs	r3, #2
 8004542:	e002      	b.n	800454a <HAL_GPIO_Init+0x1fa>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_GPIO_Init+0x1fa>
 8004548:	2300      	movs	r3, #0
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	f002 0203 	and.w	r2, r2, #3
 8004550:	0092      	lsls	r2, r2, #2
 8004552:	4093      	lsls	r3, r2
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800455a:	4937      	ldr	r1, [pc, #220]	@ (8004638 <HAL_GPIO_Init+0x2e8>)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	3302      	adds	r3, #2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004568:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <HAL_GPIO_Init+0x300>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800458c:	4a30      	ldr	r2, [pc, #192]	@ (8004650 <HAL_GPIO_Init+0x300>)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004592:	4b2f      	ldr	r3, [pc, #188]	@ (8004650 <HAL_GPIO_Init+0x300>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045b6:	4a26      	ldr	r2, [pc, #152]	@ (8004650 <HAL_GPIO_Init+0x300>)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045bc:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_GPIO_Init+0x300>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <HAL_GPIO_Init+0x300>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004650 <HAL_GPIO_Init+0x300>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800460a:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <HAL_GPIO_Init+0x300>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3301      	adds	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	f47f ae9d 	bne.w	8004360 <HAL_GPIO_Init+0x10>
  }
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40021000 	.word	0x40021000
 8004638:	40010000 	.word	0x40010000
 800463c:	48000400 	.word	0x48000400
 8004640:	48000800 	.word	0x48000800
 8004644:	48000c00 	.word	0x48000c00
 8004648:	48001000 	.word	0x48001000
 800464c:	48001400 	.word	0x48001400
 8004650:	40010400 	.word	0x40010400

08004654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e001      	b.n	8004676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046be:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d006      	beq.n	80046d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ca:	4a05      	ldr	r2, [pc, #20]	@ (80046e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f806 	bl	80046e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40010400 	.word	0x40010400

080046e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d141      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800470a:	4b4b      	ldr	r3, [pc, #300]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004716:	d131      	bne.n	800477c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004718:	4b47      	ldr	r3, [pc, #284]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471e:	4a46      	ldr	r2, [pc, #280]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004728:	4b43      	ldr	r3, [pc, #268]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004730:	4a41      	ldr	r2, [pc, #260]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004738:	4b40      	ldr	r3, [pc, #256]	@ (800483c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2232      	movs	r2, #50	@ 0x32
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	4a3f      	ldr	r2, [pc, #252]	@ (8004840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	0c9b      	lsrs	r3, r3, #18
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	e002      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004756:	4b38      	ldr	r3, [pc, #224]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004762:	d102      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f2      	bne.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476a:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004776:	d158      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e057      	b.n	800482c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800477c:	4b2e      	ldr	r3, [pc, #184]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004782:	4a2d      	ldr	r2, [pc, #180]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004788:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800478c:	e04d      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004794:	d141      	bne.n	800481a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004796:	4b28      	ldr	r3, [pc, #160]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a2:	d131      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a4:	4b24      	ldr	r3, [pc, #144]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047aa:	4a23      	ldr	r2, [pc, #140]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b4:	4b20      	ldr	r3, [pc, #128]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047c4:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2232      	movs	r2, #50	@ 0x32
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	0c9b      	lsrs	r3, r3, #18
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047da:	e002      	b.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e2:	4b15      	ldr	r3, [pc, #84]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ee:	d102      	bne.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f2      	bne.n	80047dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047f6:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004802:	d112      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e011      	b.n	800482c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480e:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004818:	e007      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800481a:	4b07      	ldr	r3, [pc, #28]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004822:	4a05      	ldr	r2, [pc, #20]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004828:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40007000 	.word	0x40007000
 800483c:	20000018 	.word	0x20000018
 8004840:	431bde83 	.word	0x431bde83

08004844 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004848:	4b05      	ldr	r3, [pc, #20]	@ (8004860 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a04      	ldr	r2, [pc, #16]	@ (8004860 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800484e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004852:	6093      	str	r3, [r2, #8]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40007000 	.word	0x40007000

08004864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e2fe      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d075      	beq.n	800496e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004882:	4b97      	ldr	r3, [pc, #604]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800488c:	4b94      	ldr	r3, [pc, #592]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d102      	bne.n	80048a2 <HAL_RCC_OscConfig+0x3e>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d002      	beq.n	80048a8 <HAL_RCC_OscConfig+0x44>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	4b8d      	ldr	r3, [pc, #564]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05b      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d157      	bne.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e2d9      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x74>
 80048ca:	4b85      	ldr	r3, [pc, #532]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a84      	ldr	r2, [pc, #528]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e01d      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b7c      	ldr	r3, [pc, #496]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048fc:	4b78      	ldr	r3, [pc, #480]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a77      	ldr	r2, [pc, #476]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b75      	ldr	r3, [pc, #468]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a74      	ldr	r2, [pc, #464]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fd fe60 	bl	80025e0 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004924:	f7fd fe5c 	bl	80025e0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	@ 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e29e      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004936:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0xc0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fe4c 	bl	80025e0 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd fe48 	bl	80025e0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	@ 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e28a      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800495e:	4b60      	ldr	r3, [pc, #384]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d075      	beq.n	8004a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497a:	4b59      	ldr	r3, [pc, #356]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004984:	4b56      	ldr	r3, [pc, #344]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d102      	bne.n	800499a <HAL_RCC_OscConfig+0x136>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_OscConfig+0x13c>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d11f      	bne.n	80049e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_OscConfig+0x154>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e25d      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b49      	ldr	r3, [pc, #292]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	4946      	ldr	r1, [pc, #280]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049cc:	4b45      	ldr	r3, [pc, #276]	@ (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fd fdb9 	bl	8002548 <HAL_InitTick>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d043      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e249      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fdf4 	bl	80025e0 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fd fdf0 	bl	80025e0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e232      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a0e:	4b34      	ldr	r3, [pc, #208]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	492d      	ldr	r1, [pc, #180]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
 8004a2e:	e01a      	b.n	8004a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fdd0 	bl	80025e0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a44:	f7fd fdcc 	bl	80025e0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e20e      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a56:	4b22      	ldr	r3, [pc, #136]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x1e0>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d041      	beq.n	8004af6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01c      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a80:	4a17      	ldr	r2, [pc, #92]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd fda9 	bl	80025e0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd fda5 	bl	80025e0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1e7      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0ef      	beq.n	8004a92 <HAL_RCC_OscConfig+0x22e>
 8004ab2:	e020      	b.n	8004af6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aba:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_OscConfig+0x27c>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fd fd8c 	bl	80025e0 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aca:	e00d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fd fd88 	bl	80025e0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d906      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1ca      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ea      	bne.n	8004acc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80a6 	beq.w	8004c50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b04:	2300      	movs	r3, #0
 8004b06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b08:	4b84      	ldr	r3, [pc, #528]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_OscConfig+0x2b4>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x2b6>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b22:	4a7e      	ldr	r2, [pc, #504]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b36:	2301      	movs	r3, #1
 8004b38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3a:	4b79      	ldr	r3, [pc, #484]	@ (8004d20 <HAL_RCC_OscConfig+0x4bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d118      	bne.n	8004b78 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b46:	4b76      	ldr	r3, [pc, #472]	@ (8004d20 <HAL_RCC_OscConfig+0x4bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	@ (8004d20 <HAL_RCC_OscConfig+0x4bc>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b52:	f7fd fd45 	bl	80025e0 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fd fd41 	bl	80025e0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e183      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d20 <HAL_RCC_OscConfig+0x4bc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d108      	bne.n	8004b92 <HAL_RCC_OscConfig+0x32e>
 8004b80:	4b66      	ldr	r3, [pc, #408]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b86:	4a65      	ldr	r2, [pc, #404]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b90:	e024      	b.n	8004bdc <HAL_RCC_OscConfig+0x378>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d110      	bne.n	8004bbc <HAL_RCC_OscConfig+0x358>
 8004b9a:	4b60      	ldr	r3, [pc, #384]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f043 0304 	orr.w	r3, r3, #4
 8004ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004baa:	4b5c      	ldr	r3, [pc, #368]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bba:	e00f      	b.n	8004bdc <HAL_RCC_OscConfig+0x378>
 8004bbc:	4b57      	ldr	r3, [pc, #348]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc2:	4a56      	ldr	r2, [pc, #344]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bcc:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd2:	4a52      	ldr	r2, [pc, #328]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d016      	beq.n	8004c12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fd fcfc 	bl	80025e0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fd fcf8 	bl	80025e0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e138      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	4b46      	ldr	r3, [pc, #280]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ed      	beq.n	8004bec <HAL_RCC_OscConfig+0x388>
 8004c10:	e015      	b.n	8004c3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fce5 	bl	80025e0 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fd fce1 	bl	80025e0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e121      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c30:	4b3a      	ldr	r3, [pc, #232]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ed      	bne.n	8004c1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c3e:	7ffb      	ldrb	r3, [r7, #31]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c48:	4a34      	ldr	r2, [pc, #208]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01c      	beq.n	8004c9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c64:	4b2d      	ldr	r3, [pc, #180]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fd fcb4 	bl	80025e0 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c7c:	f7fd fcb0 	bl	80025e0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0f2      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c8e:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ef      	beq.n	8004c7c <HAL_RCC_OscConfig+0x418>
 8004c9c:	e01b      	b.n	8004cd6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7fd fc97 	bl	80025e0 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cb6:	f7fd fc93 	bl	80025e0 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e0d5      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc8:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1ef      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80c9 	beq.w	8004e72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	f000 8083 	beq.w	8004df4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d15e      	bne.n	8004db4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fd fc6d 	bl	80025e0 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d08:	e00c      	b.n	8004d24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fd fc69 	bl	80025e0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d905      	bls.n	8004d24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0ab      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d24:	4b55      	ldr	r3, [pc, #340]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ec      	bne.n	8004d0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d30:	4b52      	ldr	r3, [pc, #328]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	4b52      	ldr	r3, [pc, #328]	@ (8004e80 <HAL_RCC_OscConfig+0x61c>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6a11      	ldr	r1, [r2, #32]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d40:	3a01      	subs	r2, #1
 8004d42:	0112      	lsls	r2, r2, #4
 8004d44:	4311      	orrs	r1, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d4a:	0212      	lsls	r2, r2, #8
 8004d4c:	4311      	orrs	r1, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d52:	0852      	lsrs	r2, r2, #1
 8004d54:	3a01      	subs	r2, #1
 8004d56:	0552      	lsls	r2, r2, #21
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d5e:	0852      	lsrs	r2, r2, #1
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0652      	lsls	r2, r2, #25
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d6a:	06d2      	lsls	r2, r2, #27
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	4943      	ldr	r1, [pc, #268]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d74:	4b41      	ldr	r3, [pc, #260]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a40      	ldr	r2, [pc, #256]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d80:	4b3e      	ldr	r3, [pc, #248]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a3d      	ldr	r2, [pc, #244]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fc28 	bl	80025e0 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fc24 	bl	80025e0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e066      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da6:	4b35      	ldr	r3, [pc, #212]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x530>
 8004db2:	e05e      	b.n	8004e72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db4:	4b31      	ldr	r3, [pc, #196]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a30      	ldr	r2, [pc, #192]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fc0e 	bl	80025e0 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fd fc0a 	bl	80025e0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e04c      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dda:	4b28      	ldr	r3, [pc, #160]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004de6:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	4924      	ldr	r1, [pc, #144]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <HAL_RCC_OscConfig+0x620>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	60cb      	str	r3, [r1, #12]
 8004df2:	e03e      	b.n	8004e72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e039      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e00:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <HAL_RCC_OscConfig+0x618>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f003 0203 	and.w	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d12c      	bne.n	8004e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d123      	bne.n	8004e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11b      	bne.n	8004e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d113      	bne.n	8004e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	3b01      	subs	r3, #1
 8004e54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d109      	bne.n	8004e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	3b01      	subs	r3, #1
 8004e68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	019f800c 	.word	0x019f800c
 8004e84:	feeefffc 	.word	0xfeeefffc

08004e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e11e      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b91      	ldr	r3, [pc, #580]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d910      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b8e      	ldr	r3, [pc, #568]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 020f 	bic.w	r2, r3, #15
 8004eb6:	498c      	ldr	r1, [pc, #560]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e106      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d073      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d129      	bne.n	8004f38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee4:	4b81      	ldr	r3, [pc, #516]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0f4      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ef4:	f000 f99e 	bl	8005234 <RCC_GetSysClockFreqFromPLLSource>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4a7c      	ldr	r2, [pc, #496]	@ (80050f0 <HAL_RCC_ClockConfig+0x268>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d93f      	bls.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f02:	4b7a      	ldr	r3, [pc, #488]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d033      	beq.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12f      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f22:	4b72      	ldr	r3, [pc, #456]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f2a:	4a70      	ldr	r2, [pc, #448]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e024      	b.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f40:	4b6a      	ldr	r3, [pc, #424]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0c6      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f50:	4b66      	ldr	r3, [pc, #408]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0be      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f60:	f000 f8ce 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4a61      	ldr	r2, [pc, #388]	@ (80050f0 <HAL_RCC_ClockConfig+0x268>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d909      	bls.n	8004f82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f76:	4a5d      	ldr	r2, [pc, #372]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f7e:	2380      	movs	r3, #128	@ 0x80
 8004f80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b5a      	ldr	r3, [pc, #360]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4957      	ldr	r1, [pc, #348]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f94:	f7fd fb24 	bl	80025e0 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fd fb20 	bl	80025e0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e095      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d023      	beq.n	8005018 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fdc:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a42      	ldr	r2, [pc, #264]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fe6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ffc:	4a3b      	ldr	r2, [pc, #236]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005002:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b39      	ldr	r3, [pc, #228]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4936      	ldr	r1, [pc, #216]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
 8005016:	e008      	b.n	800502a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b80      	cmp	r3, #128	@ 0x80
 800501c:	d105      	bne.n	800502a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800501e:	4b33      	ldr	r3, [pc, #204]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4a32      	ldr	r2, [pc, #200]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005024:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005028:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800502a:	4b2f      	ldr	r3, [pc, #188]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d21d      	bcs.n	8005074 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 020f 	bic.w	r2, r3, #15
 8005040:	4929      	ldr	r1, [pc, #164]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005048:	f7fd faca 	bl	80025e0 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fd fac6 	bl	80025e0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e03b      	b.n	80050de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	@ (80050e8 <HAL_RCC_ClockConfig+0x260>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d1ed      	bne.n	8005050 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005080:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4917      	ldr	r1, [pc, #92]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509e:	4b13      	ldr	r3, [pc, #76]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	490f      	ldr	r1, [pc, #60]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050b2:	f000 f825 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b0c      	ldr	r3, [pc, #48]	@ (80050ec <HAL_RCC_ClockConfig+0x264>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	490c      	ldr	r1, [pc, #48]	@ (80050f4 <HAL_RCC_ClockConfig+0x26c>)
 80050c4:	5ccb      	ldrb	r3, [r1, r3]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <HAL_RCC_ClockConfig+0x270>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <HAL_RCC_ClockConfig+0x274>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd fa36 	bl	8002548 <HAL_InitTick>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40022000 	.word	0x40022000
 80050ec:	40021000 	.word	0x40021000
 80050f0:	04c4b400 	.word	0x04c4b400
 80050f4:	0800d5d4 	.word	0x0800d5d4
 80050f8:	20000018 	.word	0x20000018
 80050fc:	2000001c 	.word	0x2000001c

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005106:	4b2c      	ldr	r3, [pc, #176]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b04      	cmp	r3, #4
 8005110:	d102      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005112:	4b2a      	ldr	r3, [pc, #168]	@ (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e047      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005118:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d102      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005124:	4b26      	ldr	r3, [pc, #152]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e03e      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800512a:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b0c      	cmp	r3, #12
 8005134:	d136      	bne.n	80051a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005136:	4b20      	ldr	r3, [pc, #128]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005140:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3301      	adds	r3, #1
 800514c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d10c      	bne.n	800516e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005154:	4a1a      	ldr	r2, [pc, #104]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	fbb2 f3f3 	udiv	r3, r2, r3
 800515c:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515e:	68d2      	ldr	r2, [r2, #12]
 8005160:	0a12      	lsrs	r2, r2, #8
 8005162:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	617b      	str	r3, [r7, #20]
      break;
 800516c:	e00c      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800516e:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	4a10      	ldr	r2, [pc, #64]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005178:	68d2      	ldr	r2, [r2, #12]
 800517a:	0a12      	lsrs	r2, r2, #8
 800517c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
      break;
 8005186:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005188:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0e5b      	lsrs	r3, r3, #25
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	e001      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051a8:	693b      	ldr	r3, [r7, #16]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	007a1200 	.word	0x007a1200

080051c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b03      	ldr	r3, [pc, #12]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000018 	.word	0x20000018

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051e0:	f7ff fff0 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4904      	ldr	r1, [pc, #16]	@ (8005204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40021000 	.word	0x40021000
 8005204:	0800d5e4 	.word	0x0800d5e4

08005208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800520c:	f7ff ffda 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b06      	ldr	r3, [pc, #24]	@ (800522c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	0adb      	lsrs	r3, r3, #11
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4904      	ldr	r1, [pc, #16]	@ (8005230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	0800d5e4 	.word	0x0800d5e4

08005234 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800523a:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005244:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d10c      	bne.n	8005272 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005258:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005262:	68d2      	ldr	r2, [r2, #12]
 8005264:	0a12      	lsrs	r2, r2, #8
 8005266:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	617b      	str	r3, [r7, #20]
    break;
 8005270:	e00c      	b.n	800528c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005272:	4a12      	ldr	r2, [pc, #72]	@ (80052bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800527c:	68d2      	ldr	r2, [r2, #12]
 800527e:	0a12      	lsrs	r2, r2, #8
 8005280:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
    break;
 800528a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800528c:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	0e5b      	lsrs	r3, r3, #25
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	3301      	adds	r3, #1
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052a6:	687b      	ldr	r3, [r7, #4]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40021000 	.word	0x40021000
 80052b8:	007a1200 	.word	0x007a1200
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052c8:	2300      	movs	r3, #0
 80052ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052cc:	2300      	movs	r3, #0
 80052ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8098 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4b43      	ldr	r3, [pc, #268]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10d      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	4a3f      	ldr	r2, [pc, #252]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fa:	4b3d      	ldr	r3, [pc, #244]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800530a:	4b3a      	ldr	r3, [pc, #232]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a39      	ldr	r2, [pc, #228]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005316:	f7fd f963 	bl	80025e0 <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800531c:	e009      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fd f95f 	bl	80025e0 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d902      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	74fb      	strb	r3, [r7, #19]
        break;
 8005330:	e005      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005332:	4b30      	ldr	r3, [pc, #192]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ef      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d159      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005344:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01e      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	429a      	cmp	r2, r3
 800535e:	d019      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005360:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800536c:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005372:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800537c:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005382:	4a1b      	ldr	r2, [pc, #108]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800538c:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fd f91f 	bl	80025e0 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a4:	e00b      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fd f91b 	bl	80025e0 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d902      	bls.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	74fb      	strb	r3, [r7, #19]
            break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053be:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ec      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d2:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	4903      	ldr	r1, [pc, #12]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053e8:	e008      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	74bb      	strb	r3, [r7, #18]
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053fc:	7c7b      	ldrb	r3, [r7, #17]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4ba6      	ldr	r3, [pc, #664]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	4aa5      	ldr	r2, [pc, #660]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541a:	4ba0      	ldr	r3, [pc, #640]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005420:	f023 0203 	bic.w	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	499c      	ldr	r1, [pc, #624]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543c:	4b97      	ldr	r3, [pc, #604]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 020c 	bic.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4994      	ldr	r1, [pc, #592]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800545e:	4b8f      	ldr	r3, [pc, #572]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	498b      	ldr	r1, [pc, #556]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005480:	4b86      	ldr	r3, [pc, #536]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	4983      	ldr	r1, [pc, #524]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054a2:	4b7e      	ldr	r3, [pc, #504]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	497a      	ldr	r1, [pc, #488]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054c4:	4b75      	ldr	r3, [pc, #468]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	4972      	ldr	r1, [pc, #456]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054e6:	4b6d      	ldr	r3, [pc, #436]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4969      	ldr	r1, [pc, #420]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005508:	4b64      	ldr	r3, [pc, #400]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4961      	ldr	r1, [pc, #388]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800552a:	4b5c      	ldr	r3, [pc, #368]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	4958      	ldr	r1, [pc, #352]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d015      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800554c:	4b53      	ldr	r3, [pc, #332]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555a:	4950      	ldr	r1, [pc, #320]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800556a:	d105      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800556c:	4b4b      	ldr	r3, [pc, #300]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4a4a      	ldr	r2, [pc, #296]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005576:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005580:	2b00      	cmp	r3, #0
 8005582:	d015      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005584:	4b45      	ldr	r3, [pc, #276]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	4942      	ldr	r1, [pc, #264]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055a2:	d105      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	4b3d      	ldr	r3, [pc, #244]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a3c      	ldr	r2, [pc, #240]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055bc:	4b37      	ldr	r3, [pc, #220]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	4934      	ldr	r1, [pc, #208]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055da:	d105      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055dc:	4b2f      	ldr	r3, [pc, #188]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f4:	4b29      	ldr	r3, [pc, #164]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005602:	4926      	ldr	r1, [pc, #152]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005612:	d105      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005614:	4b21      	ldr	r3, [pc, #132]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4a20      	ldr	r2, [pc, #128]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800561e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800562c:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	4918      	ldr	r1, [pc, #96]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b13      	ldr	r3, [pc, #76]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a12      	ldr	r2, [pc, #72]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005664:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005672:	490a      	ldr	r1, [pc, #40]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a04      	ldr	r2, [pc, #16]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005690:	7cbb      	ldrb	r3, [r7, #18]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e049      	b.n	8005746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc fde0 	bl	800228c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f000 fd92 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04a      	b.n	80057fe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a21      	ldr	r2, [pc, #132]	@ (800580c <HAL_TIM_Base_Start_IT+0xbc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005792:	d013      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <HAL_TIM_Base_Start_IT+0xc0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <HAL_TIM_Base_Start_IT+0xc4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005818 <HAL_TIM_Base_Start_IT+0xc8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a19      	ldr	r2, [pc, #100]	@ (800581c <HAL_TIM_Base_Start_IT+0xcc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d115      	bne.n	80057e8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_TIM_Base_Start_IT+0xd0>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d015      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0xaa>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d4:	d011      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	e008      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e000      	b.n	80057fc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	00010007 	.word	0x00010007

08005824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e049      	b.n	80058ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f841 	bl	80058d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fcd0 	bl	8006208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_TIM_PWM_Start+0x24>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e03c      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b04      	cmp	r3, #4
 8005910:	d109      	bne.n	8005926 <HAL_TIM_PWM_Start+0x3e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e02f      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d109      	bne.n	8005940 <HAL_TIM_PWM_Start+0x58>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e022      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d109      	bne.n	800595a <HAL_TIM_PWM_Start+0x72>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e015      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b10      	cmp	r3, #16
 800595e:	d109      	bne.n	8005974 <HAL_TIM_PWM_Start+0x8c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e008      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e097      	b.n	8005abe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xb6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800599c:	e023      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0xc6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ac:	e01b      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0xd6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059bc:	e013      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_PWM_Start+0xe6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059cc:	e00b      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0xf6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059dc:	e003      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 f838 	bl	8006a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a33      	ldr	r2, [pc, #204]	@ (8005ac8 <HAL_TIM_PWM_Start+0x1e0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x13e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a32      	ldr	r2, [pc, #200]	@ (8005acc <HAL_TIM_PWM_Start+0x1e4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x13e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a30      	ldr	r2, [pc, #192]	@ (8005ad0 <HAL_TIM_PWM_Start+0x1e8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x13e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ad4 <HAL_TIM_PWM_Start+0x1ec>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x13e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad8 <HAL_TIM_PWM_Start+0x1f0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_PWM_Start+0x142>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_TIM_PWM_Start+0x144>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a20      	ldr	r2, [pc, #128]	@ (8005ac8 <HAL_TIM_PWM_Start+0x1e0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x194>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a52:	d013      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x194>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a20      	ldr	r2, [pc, #128]	@ (8005adc <HAL_TIM_PWM_Start+0x1f4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x194>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae0 <HAL_TIM_PWM_Start+0x1f8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x194>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <HAL_TIM_PWM_Start+0x1e4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x194>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <HAL_TIM_PWM_Start+0x1e8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d115      	bne.n	8005aa8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	4b18      	ldr	r3, [pc, #96]	@ (8005ae4 <HAL_TIM_PWM_Start+0x1fc>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b06      	cmp	r3, #6
 8005a8c:	d015      	beq.n	8005aba <HAL_TIM_PWM_Start+0x1d2>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a94:	d011      	beq.n	8005aba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	e008      	b.n	8005aba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e000      	b.n	8005abc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	00010007 	.word	0x00010007

08005ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d020      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0202 	mvn.w	r2, #2
 8005b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb4a 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fb3c 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb4d 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01b      	beq.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0204 	mvn.w	r2, #4
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fb24 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fb16 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb27 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d020      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0208 	mvn.w	r2, #8
 8005bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fafe 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 faf0 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb01 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d020      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0210 	mvn.w	r2, #16
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2208      	movs	r2, #8
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fad8 	bl	80061cc <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 faca 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fadb 	bl	80061e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0201 	mvn.w	r2, #1
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 faa8 	bl	80061a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00c      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ffa3 	bl	8006bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 ff9b 	bl	8006bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa95 	bl	80061f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0220 	mvn.w	r2, #32
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 ff63 	bl	8006bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 ff6f 	bl	8006bf0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 ff67 	bl	8006c04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00c      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 ff5f 	bl	8006c18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 ff57 	bl	8006c2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e0ff      	b.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b14      	cmp	r3, #20
 8005db2:	f200 80f0 	bhi.w	8005f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005db6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005f97 	.word	0x08005f97
 8005dc4:	08005f97 	.word	0x08005f97
 8005dc8:	08005f97 	.word	0x08005f97
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005f97 	.word	0x08005f97
 8005dd4:	08005f97 	.word	0x08005f97
 8005dd8:	08005f97 	.word	0x08005f97
 8005ddc:	08005e93 	.word	0x08005e93
 8005de0:	08005f97 	.word	0x08005f97
 8005de4:	08005f97 	.word	0x08005f97
 8005de8:	08005f97 	.word	0x08005f97
 8005dec:	08005ed3 	.word	0x08005ed3
 8005df0:	08005f97 	.word	0x08005f97
 8005df4:	08005f97 	.word	0x08005f97
 8005df8:	08005f97 	.word	0x08005f97
 8005dfc:	08005f15 	.word	0x08005f15
 8005e00:	08005f97 	.word	0x08005f97
 8005e04:	08005f97 	.word	0x08005f97
 8005e08:	08005f97 	.word	0x08005f97
 8005e0c:	08005f55 	.word	0x08005f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fa92 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0208 	orr.w	r2, r2, #8
 8005e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0204 	bic.w	r2, r2, #4
 8005e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6999      	ldr	r1, [r3, #24]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	619a      	str	r2, [r3, #24]
      break;
 8005e4e:	e0a5      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fb02 	bl	8006460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	021a      	lsls	r2, r3, #8
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	619a      	str	r2, [r3, #24]
      break;
 8005e90:	e084      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fb6b 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0208 	orr.w	r2, r2, #8
 8005eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0204 	bic.w	r2, r2, #4
 8005ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69d9      	ldr	r1, [r3, #28]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	61da      	str	r2, [r3, #28]
      break;
 8005ed0:	e064      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fbd3 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69d9      	ldr	r1, [r3, #28]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	021a      	lsls	r2, r3, #8
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	61da      	str	r2, [r3, #28]
      break;
 8005f12:	e043      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fc3c 	bl	8006798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0208 	orr.w	r2, r2, #8
 8005f2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0204 	bic.w	r2, r2, #4
 8005f3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f52:	e023      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fc80 	bl	8006860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f94:	e002      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIM_ConfigClockSource+0x1c>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e0de      	b.n	800618a <HAL_TIM_ConfigClockSource+0x1da>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005fea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a63      	ldr	r2, [pc, #396]	@ (8006194 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	f000 80a9 	beq.w	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 800600c:	4a61      	ldr	r2, [pc, #388]	@ (8006194 <HAL_TIM_ConfigClockSource+0x1e4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	f200 80ae 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006014:	4a60      	ldr	r2, [pc, #384]	@ (8006198 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	f000 80a1 	beq.w	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 800601c:	4a5e      	ldr	r2, [pc, #376]	@ (8006198 <HAL_TIM_ConfigClockSource+0x1e8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	f200 80a6 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006024:	4a5d      	ldr	r2, [pc, #372]	@ (800619c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006026:	4293      	cmp	r3, r2
 8006028:	f000 8099 	beq.w	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 800602c:	4a5b      	ldr	r2, [pc, #364]	@ (800619c <HAL_TIM_ConfigClockSource+0x1ec>)
 800602e:	4293      	cmp	r3, r2
 8006030:	f200 809e 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006034:	4a5a      	ldr	r2, [pc, #360]	@ (80061a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	f000 8091 	beq.w	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 800603c:	4a58      	ldr	r2, [pc, #352]	@ (80061a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	f200 8096 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006044:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006048:	f000 8089 	beq.w	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 800604c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006050:	f200 808e 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006058:	d03e      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0x128>
 800605a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800605e:	f200 8087 	bhi.w	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006066:	f000 8086 	beq.w	8006176 <HAL_TIM_ConfigClockSource+0x1c6>
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606e:	d87f      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006070:	2b70      	cmp	r3, #112	@ 0x70
 8006072:	d01a      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0xfa>
 8006074:	2b70      	cmp	r3, #112	@ 0x70
 8006076:	d87b      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006078:	2b60      	cmp	r3, #96	@ 0x60
 800607a:	d050      	beq.n	800611e <HAL_TIM_ConfigClockSource+0x16e>
 800607c:	2b60      	cmp	r3, #96	@ 0x60
 800607e:	d877      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006080:	2b50      	cmp	r3, #80	@ 0x50
 8006082:	d03c      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x14e>
 8006084:	2b50      	cmp	r3, #80	@ 0x50
 8006086:	d873      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006088:	2b40      	cmp	r3, #64	@ 0x40
 800608a:	d058      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x18e>
 800608c:	2b40      	cmp	r3, #64	@ 0x40
 800608e:	d86f      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006090:	2b30      	cmp	r3, #48	@ 0x30
 8006092:	d064      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d86b      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d060      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d867      	bhi.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d05c      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d05a      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x1ae>
 80060a8:	e062      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060ba:	f000 fcb3 	bl	8006a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	609a      	str	r2, [r3, #8]
      break;
 80060d6:	e04f      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060e8:	f000 fc9c 	bl	8006a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060fa:	609a      	str	r2, [r3, #8]
      break;
 80060fc:	e03c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	461a      	mov	r2, r3
 800610c:	f000 fc0e 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2150      	movs	r1, #80	@ 0x50
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fc67 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800611c:	e02c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800612a:	461a      	mov	r2, r3
 800612c:	f000 fc2d 	bl	800698a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2160      	movs	r1, #96	@ 0x60
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fc57 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800613c:	e01c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614a:	461a      	mov	r2, r3
 800614c:	f000 fbee 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2140      	movs	r1, #64	@ 0x40
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fc47 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800615c:	e00c      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f000 fc3e 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800616e:	e003      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]
      break;
 8006174:	e000      	b.n	8006178 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	00100070 	.word	0x00100070
 8006198:	00100040 	.word	0x00100040
 800619c:	00100030 	.word	0x00100030
 80061a0:	00100020 	.word	0x00100020

080061a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a42      	ldr	r2, [pc, #264]	@ (8006324 <TIM_Base_SetConfig+0x11c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006226:	d00b      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a3f      	ldr	r2, [pc, #252]	@ (8006328 <TIM_Base_SetConfig+0x120>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3e      	ldr	r2, [pc, #248]	@ (800632c <TIM_Base_SetConfig+0x124>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0x38>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3d      	ldr	r2, [pc, #244]	@ (8006330 <TIM_Base_SetConfig+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d108      	bne.n	8006252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a33      	ldr	r2, [pc, #204]	@ (8006324 <TIM_Base_SetConfig+0x11c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01b      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006260:	d017      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a30      	ldr	r2, [pc, #192]	@ (8006328 <TIM_Base_SetConfig+0x120>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2f      	ldr	r2, [pc, #188]	@ (800632c <TIM_Base_SetConfig+0x124>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2e      	ldr	r2, [pc, #184]	@ (8006330 <TIM_Base_SetConfig+0x128>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2d      	ldr	r2, [pc, #180]	@ (8006334 <TIM_Base_SetConfig+0x12c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2c      	ldr	r2, [pc, #176]	@ (8006338 <TIM_Base_SetConfig+0x130>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_Base_SetConfig+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2b      	ldr	r2, [pc, #172]	@ (800633c <TIM_Base_SetConfig+0x134>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d108      	bne.n	80062a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <TIM_Base_SetConfig+0x11c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00f      	beq.n	80062f0 <TIM_Base_SetConfig+0xe8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a17      	ldr	r2, [pc, #92]	@ (8006330 <TIM_Base_SetConfig+0x128>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00b      	beq.n	80062f0 <TIM_Base_SetConfig+0xe8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a16      	ldr	r2, [pc, #88]	@ (8006334 <TIM_Base_SetConfig+0x12c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d007      	beq.n	80062f0 <TIM_Base_SetConfig+0xe8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a15      	ldr	r2, [pc, #84]	@ (8006338 <TIM_Base_SetConfig+0x130>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_Base_SetConfig+0xe8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a14      	ldr	r2, [pc, #80]	@ (800633c <TIM_Base_SetConfig+0x134>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d103      	bne.n	80062f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	611a      	str	r2, [r3, #16]
  }
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40013400 	.word	0x40013400
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f023 0201 	bic.w	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2c      	ldr	r2, [pc, #176]	@ (800644c <TIM_OC1_SetConfig+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006450 <TIM_OC1_SetConfig+0x110>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a29      	ldr	r2, [pc, #164]	@ (8006458 <TIM_OC1_SetConfig+0x118>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a28      	ldr	r2, [pc, #160]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10c      	bne.n	80063da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0308 	bic.w	r3, r3, #8
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	@ (800644c <TIM_OC1_SetConfig+0x10c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00f      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <TIM_OC1_SetConfig+0x110>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00b      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	@ (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <TIM_OC1_SetConfig+0x118>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a17      	ldr	r2, [pc, #92]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d111      	bne.n	8006426 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f023 0210 	bic.w	r2, r3, #16
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a28      	ldr	r2, [pc, #160]	@ (8006560 <TIM_OC2_SetConfig+0x100>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x6c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a27      	ldr	r2, [pc, #156]	@ (8006564 <TIM_OC2_SetConfig+0x104>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10d      	bne.n	80064e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006560 <TIM_OC2_SetConfig+0x100>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006564 <TIM_OC2_SetConfig+0x104>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <TIM_OC2_SetConfig+0x108>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1a      	ldr	r2, [pc, #104]	@ (800656c <TIM_OC2_SetConfig+0x10c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a19      	ldr	r2, [pc, #100]	@ (8006570 <TIM_OC2_SetConfig+0x110>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d113      	bne.n	8006538 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	@ (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_OC3_SetConfig+0x6a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <TIM_OC3_SetConfig+0x100>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d10d      	bne.n	80065fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <TIM_OC3_SetConfig+0x100>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1a      	ldr	r2, [pc, #104]	@ (8006678 <TIM_OC3_SetConfig+0x104>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a19      	ldr	r2, [pc, #100]	@ (800667c <TIM_OC3_SetConfig+0x108>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a18      	ldr	r2, [pc, #96]	@ (8006680 <TIM_OC3_SetConfig+0x10c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a28      	ldr	r2, [pc, #160]	@ (8006784 <TIM_OC4_SetConfig+0x100>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC4_SetConfig+0x6c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a27      	ldr	r2, [pc, #156]	@ (8006788 <TIM_OC4_SetConfig+0x104>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10d      	bne.n	800670c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	031b      	lsls	r3, r3, #12
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800670a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <TIM_OC4_SetConfig+0x100>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00f      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <TIM_OC4_SetConfig+0x104>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00b      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <TIM_OC4_SetConfig+0x108>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a1a      	ldr	r2, [pc, #104]	@ (8006790 <TIM_OC4_SetConfig+0x10c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC4_SetConfig+0xb0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a19      	ldr	r2, [pc, #100]	@ (8006794 <TIM_OC4_SetConfig+0x110>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d113      	bne.n	800675c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800673a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006742:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	019b      	lsls	r3, r3, #6
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	621a      	str	r2, [r3, #32]
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800

08006798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a17      	ldr	r2, [pc, #92]	@ (800684c <TIM_OC5_SetConfig+0xb4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <TIM_OC5_SetConfig+0xb8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <TIM_OC5_SetConfig+0xbc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a14      	ldr	r2, [pc, #80]	@ (8006858 <TIM_OC5_SetConfig+0xc0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_OC5_SetConfig+0x7a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a13      	ldr	r2, [pc, #76]	@ (800685c <TIM_OC5_SetConfig+0xc4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d109      	bne.n	8006826 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40013400 	.word	0x40013400
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400
 800685c:	40014800 	.word	0x40014800

08006860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	051b      	lsls	r3, r3, #20
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a18      	ldr	r2, [pc, #96]	@ (8006918 <TIM_OC6_SetConfig+0xb8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00f      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a17      	ldr	r2, [pc, #92]	@ (800691c <TIM_OC6_SetConfig+0xbc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a16      	ldr	r2, [pc, #88]	@ (8006920 <TIM_OC6_SetConfig+0xc0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a15      	ldr	r2, [pc, #84]	@ (8006924 <TIM_OC6_SetConfig+0xc4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC6_SetConfig+0x7c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a14      	ldr	r2, [pc, #80]	@ (8006928 <TIM_OC6_SetConfig+0xc8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0201 	bic.w	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 030a 	bic.w	r3, r3, #10
 8006968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698a:	b480      	push	{r7}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 0210 	bic.w	r2, r3, #16
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f043 0307 	orr.w	r3, r3, #7
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	021a      	lsls	r2, r3, #8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	609a      	str	r2, [r3, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2201      	movs	r2, #1
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1a      	ldr	r2, [r3, #32]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e065      	b.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2b      	ldr	r2, [pc, #172]	@ (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d018      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b3e:	d013      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a18      	ldr	r2, [pc, #96]	@ (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00e      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a17      	ldr	r2, [pc, #92]	@ (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a12      	ldr	r2, [pc, #72]	@ (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a13      	ldr	r2, [pc, #76]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d10c      	bne.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40014000 	.word	0x40014000

08006bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e042      	b.n	8006cd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fb fbcd 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2224      	movs	r2, #36	@ 0x24
 8006c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 ff3a 	bl	8007b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc6b 	bl	800756c <UART_SetConfig>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e01b      	b.n	8006cd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 ffb9 	bl	8007c48 <UART_CheckIdleState>
 8006cd6:	4603      	mov	r3, r0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	@ 0x28
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	4613      	mov	r3, r2
 8006cee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d17b      	bne.n	8006df2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_UART_Transmit+0x26>
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e074      	b.n	8006df4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2221      	movs	r2, #33	@ 0x21
 8006d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d1a:	f7fb fc61 	bl	80025e0 <HAL_GetTick>
 8006d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	88fa      	ldrh	r2, [r7, #6]
 8006d24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	88fa      	ldrh	r2, [r7, #6]
 8006d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d38:	d108      	bne.n	8006d4c <HAL_UART_Transmit+0x6c>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d104      	bne.n	8006d4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e003      	b.n	8006d54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d54:	e030      	b.n	8006db8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2180      	movs	r1, #128	@ 0x80
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 f81b 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e03d      	b.n	8006df4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10b      	bne.n	8006d96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	3302      	adds	r3, #2
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e007      	b.n	8006da6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3301      	adds	r3, #1
 8006da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1c8      	bne.n	8006d56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2140      	movs	r1, #64	@ 0x40
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 ffe4 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e006      	b.n	8006df4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
  }
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	@ 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d137      	bne.n	8006e84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_UART_Receive_IT+0x24>
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e030      	b.n	8006e86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <HAL_UART_Receive_IT+0x94>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d01f      	beq.n	8006e74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d018      	beq.n	8006e74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	623b      	str	r3, [r7, #32]
 8006e62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	69f9      	ldr	r1, [r7, #28]
 8006e66:	6a3a      	ldr	r2, [r7, #32]
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e6      	bne.n	8006e42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	461a      	mov	r2, r3
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fffc 	bl	8007e78 <UART_Start_Receive_IT>
 8006e80:	4603      	mov	r3, r0
 8006e82:	e000      	b.n	8006e86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3728      	adds	r7, #40	@ 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40008000 	.word	0x40008000

08006e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b0ba      	sub	sp, #232	@ 0xe8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006eba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ebe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d11b      	bne.n	8006f08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d015      	beq.n	8006f08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8300 	beq.w	80074fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
      }
      return;
 8006f06:	e2fa      	b.n	80074fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8123 	beq.w	8007158 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f16:	4b8d      	ldr	r3, [pc, #564]	@ (800714c <HAL_UART_IRQHandler+0x2b8>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f22:	4b8b      	ldr	r3, [pc, #556]	@ (8007150 <HAL_UART_IRQHandler+0x2bc>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8116 	beq.w	8007158 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d011      	beq.n	8006f5c <HAL_UART_IRQHandler+0xc8>
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f52:	f043 0201 	orr.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d011      	beq.n	8006f8c <HAL_UART_IRQHandler+0xf8>
 8006f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f82:	f043 0204 	orr.w	r2, r3, #4
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d011      	beq.n	8006fbc <HAL_UART_IRQHandler+0x128>
 8006f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2204      	movs	r2, #4
 8006faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb2:	f043 0202 	orr.w	r2, r3, #2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800714c <HAL_UART_IRQHandler+0x2b8>)
 8006fda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fee:	f043 0208 	orr.w	r2, r3, #8
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007000:	2b00      	cmp	r3, #0
 8007002:	d012      	beq.n	800702a <HAL_UART_IRQHandler+0x196>
 8007004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007008:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00c      	beq.n	800702a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007020:	f043 0220 	orr.w	r2, r3, #32
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8266 	beq.w	8007502 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d013      	beq.n	800706a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007070:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707e:	2b40      	cmp	r3, #64	@ 0x40
 8007080:	d005      	beq.n	800708e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007086:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800708a:	2b00      	cmp	r3, #0
 800708c:	d054      	beq.n	8007138 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 f814 	bl	80080bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709e:	2b40      	cmp	r3, #64	@ 0x40
 80070a0:	d146      	bne.n	8007130 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1d9      	bne.n	80070a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d017      	beq.n	8007128 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fe:	4a15      	ldr	r2, [pc, #84]	@ (8007154 <HAL_UART_IRQHandler+0x2c0>)
 8007100:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007108:	4618      	mov	r0, r3
 800710a:	f7fc ff6b 	bl	8003fe4 <HAL_DMA_Abort_IT>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d019      	beq.n	8007148 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007122:	4610      	mov	r0, r2
 8007124:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007126:	e00f      	b.n	8007148 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fa09 	bl	8007540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712e:	e00b      	b.n	8007148 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa05 	bl	8007540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007136:	e007      	b.n	8007148 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa01 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007146:	e1dc      	b.n	8007502 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007148:	bf00      	nop
    return;
 800714a:	e1da      	b.n	8007502 <HAL_UART_IRQHandler+0x66e>
 800714c:	10000001 	.word	0x10000001
 8007150:	04000120 	.word	0x04000120
 8007154:	08008189 	.word	0x08008189

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800715c:	2b01      	cmp	r3, #1
 800715e:	f040 8170 	bne.w	8007442 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8169 	beq.w	8007442 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8162 	beq.w	8007442 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2210      	movs	r2, #16
 8007184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007190:	2b40      	cmp	r3, #64	@ 0x40
 8007192:	f040 80d8 	bne.w	8007346 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80af 	beq.w	800730c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071b8:	429a      	cmp	r2, r3
 80071ba:	f080 80a7 	bcs.w	800730c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 8087 	bne.w	80072ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800720a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007212:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800721e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1da      	bne.n	80071dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800724a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800724e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007252:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800725c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e1      	bne.n	8007226 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3308      	adds	r3, #8
 8007268:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3308      	adds	r3, #8
 8007282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007286:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007288:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800728c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e3      	bne.n	8007262 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b8:	f023 0310 	bic.w	r3, r3, #16
 80072bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e4      	bne.n	80072a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fc fe24 	bl	8003f32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	b29b      	uxth	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f925 	bl	8007554 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800730a:	e0fc      	b.n	8007506 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007316:	429a      	cmp	r2, r3
 8007318:	f040 80f5 	bne.w	8007506 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b20      	cmp	r3, #32
 800732c:	f040 80eb 	bne.w	8007506 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f908 	bl	8007554 <HAL_UARTEx_RxEventCallback>
      return;
 8007344:	e0df      	b.n	8007506 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007352:	b29b      	uxth	r3, r3
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80d1 	beq.w	800750a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80cc 	beq.w	800750a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007394:	647b      	str	r3, [r7, #68]	@ 0x44
 8007396:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800739a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e4      	bne.n	8007372 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	623b      	str	r3, [r7, #32]
   return(result);
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80073d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e1      	bne.n	80073a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	60fb      	str	r3, [r7, #12]
   return(result);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	617b      	str	r3, [r7, #20]
   return(result);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e4      	bne.n	80073f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f88a 	bl	8007554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007440:	e063      	b.n	800750a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <HAL_UART_IRQHandler+0x5d8>
 800744e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007462:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 fbed 	bl	8008c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800746a:	e051      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007474:	2b00      	cmp	r3, #0
 8007476:	d014      	beq.n	80074a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800747c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007494:	2b00      	cmp	r3, #0
 8007496:	d03a      	beq.n	800750e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
    }
    return;
 80074a0:	e035      	b.n	800750e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_UART_IRQHandler+0x62e>
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fe76 	bl	80081ac <UART_EndTransmit_IT>
    return;
 80074c0:	e026      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <HAL_UART_IRQHandler+0x64e>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fbc6 	bl	8008c6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074e0:	e016      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80074e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d010      	beq.n	8007510 <HAL_UART_IRQHandler+0x67c>
 80074ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da0c      	bge.n	8007510 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 fbae 	bl	8008c58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074fc:	e008      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
      return;
 80074fe:	bf00      	nop
 8007500:	e006      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
    return;
 8007502:	bf00      	nop
 8007504:	e004      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
      return;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
      return;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_UART_IRQHandler+0x67c>
    return;
 800750e:	bf00      	nop
  }
}
 8007510:	37e8      	adds	r7, #232	@ 0xe8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop

08007518 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800756c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007570:	b08c      	sub	sp, #48	@ 0x30
 8007572:	af00      	add	r7, sp, #0
 8007574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	431a      	orrs	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	431a      	orrs	r2, r3
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	4313      	orrs	r3, r2
 8007592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4bab      	ldr	r3, [pc, #684]	@ (8007848 <UART_SetConfig+0x2dc>)
 800759c:	4013      	ands	r3, r2
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	6812      	ldr	r2, [r2, #0]
 80075a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4aa0      	ldr	r2, [pc, #640]	@ (800784c <UART_SetConfig+0x2e0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d004      	beq.n	80075d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d4:	4313      	orrs	r3, r2
 80075d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80075e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	f023 010f 	bic.w	r1, r3, #15
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a91      	ldr	r2, [pc, #580]	@ (8007850 <UART_SetConfig+0x2e4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d125      	bne.n	800765c <UART_SetConfig+0xf0>
 8007610:	4b90      	ldr	r3, [pc, #576]	@ (8007854 <UART_SetConfig+0x2e8>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d81a      	bhi.n	8007654 <UART_SetConfig+0xe8>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <UART_SetConfig+0xb8>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007635 	.word	0x08007635
 8007628:	08007645 	.word	0x08007645
 800762c:	0800763d 	.word	0x0800763d
 8007630:	0800764d 	.word	0x0800764d
 8007634:	2301      	movs	r3, #1
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763a:	e0d6      	b.n	80077ea <UART_SetConfig+0x27e>
 800763c:	2302      	movs	r3, #2
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007642:	e0d2      	b.n	80077ea <UART_SetConfig+0x27e>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e0ce      	b.n	80077ea <UART_SetConfig+0x27e>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e0ca      	b.n	80077ea <UART_SetConfig+0x27e>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e0c6      	b.n	80077ea <UART_SetConfig+0x27e>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a7d      	ldr	r2, [pc, #500]	@ (8007858 <UART_SetConfig+0x2ec>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d138      	bne.n	80076d8 <UART_SetConfig+0x16c>
 8007666:	4b7b      	ldr	r3, [pc, #492]	@ (8007854 <UART_SetConfig+0x2e8>)
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b0c      	cmp	r3, #12
 8007672:	d82d      	bhi.n	80076d0 <UART_SetConfig+0x164>
 8007674:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <UART_SetConfig+0x110>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	080076b1 	.word	0x080076b1
 8007680:	080076d1 	.word	0x080076d1
 8007684:	080076d1 	.word	0x080076d1
 8007688:	080076d1 	.word	0x080076d1
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076d1 	.word	0x080076d1
 8007698:	080076d1 	.word	0x080076d1
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b6:	e098      	b.n	80077ea <UART_SetConfig+0x27e>
 80076b8:	2302      	movs	r3, #2
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076be:	e094      	b.n	80077ea <UART_SetConfig+0x27e>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e090      	b.n	80077ea <UART_SetConfig+0x27e>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e08c      	b.n	80077ea <UART_SetConfig+0x27e>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e088      	b.n	80077ea <UART_SetConfig+0x27e>
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a5f      	ldr	r2, [pc, #380]	@ (800785c <UART_SetConfig+0x2f0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d125      	bne.n	800772e <UART_SetConfig+0x1c2>
 80076e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007854 <UART_SetConfig+0x2e8>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076ec:	2b30      	cmp	r3, #48	@ 0x30
 80076ee:	d016      	beq.n	800771e <UART_SetConfig+0x1b2>
 80076f0:	2b30      	cmp	r3, #48	@ 0x30
 80076f2:	d818      	bhi.n	8007726 <UART_SetConfig+0x1ba>
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d00a      	beq.n	800770e <UART_SetConfig+0x1a2>
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d814      	bhi.n	8007726 <UART_SetConfig+0x1ba>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <UART_SetConfig+0x19a>
 8007700:	2b10      	cmp	r3, #16
 8007702:	d008      	beq.n	8007716 <UART_SetConfig+0x1aa>
 8007704:	e00f      	b.n	8007726 <UART_SetConfig+0x1ba>
 8007706:	2300      	movs	r3, #0
 8007708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770c:	e06d      	b.n	80077ea <UART_SetConfig+0x27e>
 800770e:	2302      	movs	r3, #2
 8007710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007714:	e069      	b.n	80077ea <UART_SetConfig+0x27e>
 8007716:	2304      	movs	r3, #4
 8007718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771c:	e065      	b.n	80077ea <UART_SetConfig+0x27e>
 800771e:	2308      	movs	r3, #8
 8007720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007724:	e061      	b.n	80077ea <UART_SetConfig+0x27e>
 8007726:	2310      	movs	r3, #16
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772c:	e05d      	b.n	80077ea <UART_SetConfig+0x27e>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a4b      	ldr	r2, [pc, #300]	@ (8007860 <UART_SetConfig+0x2f4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d125      	bne.n	8007784 <UART_SetConfig+0x218>
 8007738:	4b46      	ldr	r3, [pc, #280]	@ (8007854 <UART_SetConfig+0x2e8>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007742:	2bc0      	cmp	r3, #192	@ 0xc0
 8007744:	d016      	beq.n	8007774 <UART_SetConfig+0x208>
 8007746:	2bc0      	cmp	r3, #192	@ 0xc0
 8007748:	d818      	bhi.n	800777c <UART_SetConfig+0x210>
 800774a:	2b80      	cmp	r3, #128	@ 0x80
 800774c:	d00a      	beq.n	8007764 <UART_SetConfig+0x1f8>
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d814      	bhi.n	800777c <UART_SetConfig+0x210>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <UART_SetConfig+0x1f0>
 8007756:	2b40      	cmp	r3, #64	@ 0x40
 8007758:	d008      	beq.n	800776c <UART_SetConfig+0x200>
 800775a:	e00f      	b.n	800777c <UART_SetConfig+0x210>
 800775c:	2300      	movs	r3, #0
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007762:	e042      	b.n	80077ea <UART_SetConfig+0x27e>
 8007764:	2302      	movs	r3, #2
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776a:	e03e      	b.n	80077ea <UART_SetConfig+0x27e>
 800776c:	2304      	movs	r3, #4
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007772:	e03a      	b.n	80077ea <UART_SetConfig+0x27e>
 8007774:	2308      	movs	r3, #8
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e036      	b.n	80077ea <UART_SetConfig+0x27e>
 800777c:	2310      	movs	r3, #16
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007782:	e032      	b.n	80077ea <UART_SetConfig+0x27e>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a30      	ldr	r2, [pc, #192]	@ (800784c <UART_SetConfig+0x2e0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d12a      	bne.n	80077e4 <UART_SetConfig+0x278>
 800778e:	4b31      	ldr	r3, [pc, #196]	@ (8007854 <UART_SetConfig+0x2e8>)
 8007790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007794:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800779c:	d01a      	beq.n	80077d4 <UART_SetConfig+0x268>
 800779e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077a2:	d81b      	bhi.n	80077dc <UART_SetConfig+0x270>
 80077a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077a8:	d00c      	beq.n	80077c4 <UART_SetConfig+0x258>
 80077aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ae:	d815      	bhi.n	80077dc <UART_SetConfig+0x270>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <UART_SetConfig+0x250>
 80077b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b8:	d008      	beq.n	80077cc <UART_SetConfig+0x260>
 80077ba:	e00f      	b.n	80077dc <UART_SetConfig+0x270>
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e012      	b.n	80077ea <UART_SetConfig+0x27e>
 80077c4:	2302      	movs	r3, #2
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	e00e      	b.n	80077ea <UART_SetConfig+0x27e>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e00a      	b.n	80077ea <UART_SetConfig+0x27e>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077da:	e006      	b.n	80077ea <UART_SetConfig+0x27e>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e002      	b.n	80077ea <UART_SetConfig+0x27e>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a17      	ldr	r2, [pc, #92]	@ (800784c <UART_SetConfig+0x2e0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	f040 80a8 	bne.w	8007946 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d834      	bhi.n	8007868 <UART_SetConfig+0x2fc>
 80077fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007804 <UART_SetConfig+0x298>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007829 	.word	0x08007829
 8007808:	08007869 	.word	0x08007869
 800780c:	08007831 	.word	0x08007831
 8007810:	08007869 	.word	0x08007869
 8007814:	08007837 	.word	0x08007837
 8007818:	08007869 	.word	0x08007869
 800781c:	08007869 	.word	0x08007869
 8007820:	08007869 	.word	0x08007869
 8007824:	0800783f 	.word	0x0800783f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007828:	f7fd fcd8 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 800782c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800782e:	e021      	b.n	8007874 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007830:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <UART_SetConfig+0x2f8>)
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007834:	e01e      	b.n	8007874 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007836:	f7fd fc63 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 800783a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800783c:	e01a      	b.n	8007874 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007844:	e016      	b.n	8007874 <UART_SetConfig+0x308>
 8007846:	bf00      	nop
 8007848:	cfff69f3 	.word	0xcfff69f3
 800784c:	40008000 	.word	0x40008000
 8007850:	40013800 	.word	0x40013800
 8007854:	40021000 	.word	0x40021000
 8007858:	40004400 	.word	0x40004400
 800785c:	40004800 	.word	0x40004800
 8007860:	40004c00 	.word	0x40004c00
 8007864:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007872:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 812a 	beq.w	8007ad0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007880:	4a9e      	ldr	r2, [pc, #632]	@ (8007afc <UART_SetConfig+0x590>)
 8007882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007886:	461a      	mov	r2, r3
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	fbb3 f3f2 	udiv	r3, r3, r2
 800788e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	d305      	bcc.n	80078ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d903      	bls.n	80078b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078b2:	e10d      	b.n	8007ad0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	2200      	movs	r2, #0
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	60fa      	str	r2, [r7, #12]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	4a8e      	ldr	r2, [pc, #568]	@ (8007afc <UART_SetConfig+0x590>)
 80078c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2200      	movs	r2, #0
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078d6:	f7f9 f9ff 	bl	8000cd8 <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4610      	mov	r0, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	020b      	lsls	r3, r1, #8
 80078ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078f0:	0202      	lsls	r2, r0, #8
 80078f2:	6979      	ldr	r1, [r7, #20]
 80078f4:	6849      	ldr	r1, [r1, #4]
 80078f6:	0849      	lsrs	r1, r1, #1
 80078f8:	2000      	movs	r0, #0
 80078fa:	460c      	mov	r4, r1
 80078fc:	4605      	mov	r5, r0
 80078fe:	eb12 0804 	adds.w	r8, r2, r4
 8007902:	eb43 0905 	adc.w	r9, r3, r5
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	469a      	mov	sl, r3
 800790e:	4693      	mov	fp, r2
 8007910:	4652      	mov	r2, sl
 8007912:	465b      	mov	r3, fp
 8007914:	4640      	mov	r0, r8
 8007916:	4649      	mov	r1, r9
 8007918:	f7f9 f9de 	bl	8000cd8 <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4613      	mov	r3, r2
 8007922:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800792a:	d308      	bcc.n	800793e <UART_SetConfig+0x3d2>
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007932:	d204      	bcs.n	800793e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	60da      	str	r2, [r3, #12]
 800793c:	e0c8      	b.n	8007ad0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007944:	e0c4      	b.n	8007ad0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800794e:	d167      	bne.n	8007a20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007950:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007954:	2b08      	cmp	r3, #8
 8007956:	d828      	bhi.n	80079aa <UART_SetConfig+0x43e>
 8007958:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <UART_SetConfig+0x3f4>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007985 	.word	0x08007985
 8007964:	0800798d 	.word	0x0800798d
 8007968:	08007995 	.word	0x08007995
 800796c:	080079ab 	.word	0x080079ab
 8007970:	0800799b 	.word	0x0800799b
 8007974:	080079ab 	.word	0x080079ab
 8007978:	080079ab 	.word	0x080079ab
 800797c:	080079ab 	.word	0x080079ab
 8007980:	080079a3 	.word	0x080079a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007984:	f7fd fc2a 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8007988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800798a:	e014      	b.n	80079b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800798c:	f7fd fc3c 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8007990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007992:	e010      	b.n	80079b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007994:	4b5a      	ldr	r3, [pc, #360]	@ (8007b00 <UART_SetConfig+0x594>)
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007998:	e00d      	b.n	80079b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800799a:	f7fd fbb1 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 800799e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079a0:	e009      	b.n	80079b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079a8:	e005      	b.n	80079b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8089 	beq.w	8007ad0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	4a4e      	ldr	r2, [pc, #312]	@ (8007afc <UART_SetConfig+0x590>)
 80079c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d0:	005a      	lsls	r2, r3, #1
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	085b      	lsrs	r3, r3, #1
 80079d8:	441a      	add	r2, r3
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	2b0f      	cmp	r3, #15
 80079e8:	d916      	bls.n	8007a18 <UART_SetConfig+0x4ac>
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f0:	d212      	bcs.n	8007a18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f023 030f 	bic.w	r3, r3, #15
 80079fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	8bfb      	ldrh	r3, [r7, #30]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	8bfa      	ldrh	r2, [r7, #30]
 8007a14:	60da      	str	r2, [r3, #12]
 8007a16:	e05b      	b.n	8007ad0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a1e:	e057      	b.n	8007ad0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d828      	bhi.n	8007a7a <UART_SetConfig+0x50e>
 8007a28:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <UART_SetConfig+0x4c4>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a5d 	.word	0x08007a5d
 8007a38:	08007a65 	.word	0x08007a65
 8007a3c:	08007a7b 	.word	0x08007a7b
 8007a40:	08007a6b 	.word	0x08007a6b
 8007a44:	08007a7b 	.word	0x08007a7b
 8007a48:	08007a7b 	.word	0x08007a7b
 8007a4c:	08007a7b 	.word	0x08007a7b
 8007a50:	08007a73 	.word	0x08007a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a54:	f7fd fbc2 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8007a58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a5a:	e014      	b.n	8007a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a5c:	f7fd fbd4 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8007a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a62:	e010      	b.n	8007a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a64:	4b26      	ldr	r3, [pc, #152]	@ (8007b00 <UART_SetConfig+0x594>)
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a68:	e00d      	b.n	8007a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6a:	f7fd fb49 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8007a6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a70:	e009      	b.n	8007a86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a78:	e005      	b.n	8007a86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a84:	bf00      	nop
    }

    if (pclk != 0U)
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d021      	beq.n	8007ad0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a90:	4a1a      	ldr	r2, [pc, #104]	@ (8007afc <UART_SetConfig+0x590>)
 8007a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a96:	461a      	mov	r2, r3
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	085b      	lsrs	r3, r3, #1
 8007aa4:	441a      	add	r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	d909      	bls.n	8007aca <UART_SetConfig+0x55e>
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007abc:	d205      	bcs.n	8007aca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	e002      	b.n	8007ad0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007aec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3730      	adds	r7, #48	@ 0x30
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afa:	bf00      	nop
 8007afc:	0800d5ec 	.word	0x0800d5ec
 8007b00:	00f42400 	.word	0x00f42400

08007b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01a      	beq.n	8007c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c02:	d10a      	bne.n	8007c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b098      	sub	sp, #96	@ 0x60
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c58:	f7fa fcc2 	bl	80025e0 <HAL_GetTick>
 8007c5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d12f      	bne.n	8007ccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f88e 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ca6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e063      	b.n	8007d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d149      	bne.n	8007d6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f857 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d03c      	beq.n	8007d6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	623b      	str	r3, [r7, #32]
   return(result);
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e6      	bne.n	8007cf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d46:	61fa      	str	r2, [r7, #28]
 8007d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	69b9      	ldr	r1, [r7, #24]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	617b      	str	r3, [r7, #20]
   return(result);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e012      	b.n	8007d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3758      	adds	r7, #88	@ 0x58
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	e04f      	b.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d04b      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7fa fc13 	bl	80025e0 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e04e      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d037      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b80      	cmp	r3, #128	@ 0x80
 8007de2:	d034      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d031      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d110      	bne.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f95b 	bl	80080bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e029      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e28:	d111      	bne.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f941 	bl	80080bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e00f      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4013      	ands	r3, r2
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bf0c      	ite	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	2300      	movne	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d0a0      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b0a3      	sub	sp, #140	@ 0x8c
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	88fa      	ldrh	r2, [r7, #6]
 8007e90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eaa:	d10e      	bne.n	8007eca <UART_Start_Receive_IT+0x52>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <UART_Start_Receive_IT+0x48>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007eba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ebe:	e02d      	b.n	8007f1c <UART_Start_Receive_IT+0xa4>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	22ff      	movs	r2, #255	@ 0xff
 8007ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ec8:	e028      	b.n	8007f1c <UART_Start_Receive_IT+0xa4>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10d      	bne.n	8007eee <UART_Start_Receive_IT+0x76>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d104      	bne.n	8007ee4 <UART_Start_Receive_IT+0x6c>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	22ff      	movs	r2, #255	@ 0xff
 8007ede:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ee2:	e01b      	b.n	8007f1c <UART_Start_Receive_IT+0xa4>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	227f      	movs	r2, #127	@ 0x7f
 8007ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007eec:	e016      	b.n	8007f1c <UART_Start_Receive_IT+0xa4>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef6:	d10d      	bne.n	8007f14 <UART_Start_Receive_IT+0x9c>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <UART_Start_Receive_IT+0x92>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	227f      	movs	r2, #127	@ 0x7f
 8007f04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f08:	e008      	b.n	8007f1c <UART_Start_Receive_IT+0xa4>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	223f      	movs	r2, #63	@ 0x3f
 8007f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f12:	e003      	b.n	8007f1c <UART_Start_Receive_IT+0xa4>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2222      	movs	r2, #34	@ 0x22
 8007f28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007f3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f3e:	f043 0301 	orr.w	r3, r3, #1
 8007f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007f50:	673a      	str	r2, [r7, #112]	@ 0x70
 8007f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007f56:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007f5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e3      	bne.n	8007f2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f6c:	d14f      	bne.n	800800e <UART_Start_Receive_IT+0x196>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d349      	bcc.n	800800e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f82:	d107      	bne.n	8007f94 <UART_Start_Receive_IT+0x11c>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a47      	ldr	r2, [pc, #284]	@ (80080ac <UART_Start_Receive_IT+0x234>)
 8007f90:	675a      	str	r2, [r3, #116]	@ 0x74
 8007f92:	e002      	b.n	8007f9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a46      	ldr	r2, [pc, #280]	@ (80080b0 <UART_Start_Receive_IT+0x238>)
 8007f98:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01a      	beq.n	8007fd8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fc6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007fca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e4      	bne.n	8007fa2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ff8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007ffa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e5      	bne.n	8007fd8 <UART_Start_Receive_IT+0x160>
 800800c:	e046      	b.n	800809c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008016:	d107      	bne.n	8008028 <UART_Start_Receive_IT+0x1b0>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a24      	ldr	r2, [pc, #144]	@ (80080b4 <UART_Start_Receive_IT+0x23c>)
 8008024:	675a      	str	r2, [r3, #116]	@ 0x74
 8008026:	e002      	b.n	800802e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a23      	ldr	r2, [pc, #140]	@ (80080b8 <UART_Start_Receive_IT+0x240>)
 800802c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d019      	beq.n	800806a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800804a:	677b      	str	r3, [r7, #116]	@ 0x74
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
 8008056:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800805a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e6      	bne.n	8008036 <UART_Start_Receive_IT+0x1be>
 8008068:	e018      	b.n	800809c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	613b      	str	r3, [r7, #16]
   return(result);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f043 0320 	orr.w	r3, r3, #32
 800807e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008088:	623b      	str	r3, [r7, #32]
 800808a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	69f9      	ldr	r1, [r7, #28]
 800808e:	6a3a      	ldr	r2, [r7, #32]
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	61bb      	str	r3, [r7, #24]
   return(result);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e6      	bne.n	800806a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	378c      	adds	r7, #140	@ 0x8c
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	080088d9 	.word	0x080088d9
 80080b0:	08008575 	.word	0x08008575
 80080b4:	080083bd 	.word	0x080083bd
 80080b8:	08008205 	.word	0x08008205

080080bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b095      	sub	sp, #84	@ 0x54
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e6      	bne.n	80080c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	61fb      	str	r3, [r7, #28]
   return(result);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800811a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800811c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e3      	bne.n	80080f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d118      	bne.n	8008168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	60bb      	str	r3, [r7, #8]
   return(result);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	647b      	str	r3, [r7, #68]	@ 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	613b      	str	r3, [r7, #16]
   return(result);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800817c:	bf00      	nop
 800817e:	3754      	adds	r7, #84	@ 0x54
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff f9ce 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6979      	ldr	r1, [r7, #20]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	613b      	str	r3, [r7, #16]
   return(result);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e6      	bne.n	80081b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff f98f 	bl	8007518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081fa:	bf00      	nop
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b09c      	sub	sp, #112	@ 0x70
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008212:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800821c:	2b22      	cmp	r3, #34	@ 0x22
 800821e:	f040 80be 	bne.w	800839e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008228:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800822c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008230:	b2d9      	uxtb	r1, r3
 8008232:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008236:	b2da      	uxtb	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823c:	400a      	ands	r2, r1
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	f040 80a1 	bne.w	80083ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800827a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800827c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008280:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800828a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800828c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3308      	adds	r3, #8
 80082bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082be:	647a      	str	r2, [r7, #68]	@ 0x44
 80082c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e5      	bne.n	800829e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a33      	ldr	r2, [pc, #204]	@ (80083b8 <UART_RxISR_8BIT+0x1b4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d01f      	beq.n	8008330 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d018      	beq.n	8008330 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	623b      	str	r3, [r7, #32]
   return(result);
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008312:	663b      	str	r3, [r7, #96]	@ 0x60
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800831c:	633b      	str	r3, [r7, #48]	@ 0x30
 800831e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e6      	bne.n	80082fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008334:	2b01      	cmp	r3, #1
 8008336:	d12e      	bne.n	8008396 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	60fb      	str	r3, [r7, #12]
   return(result);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0310 	bic.w	r3, r3, #16
 8008352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	617b      	str	r3, [r7, #20]
   return(result);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e6      	bne.n	800833e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b10      	cmp	r3, #16
 800837c:	d103      	bne.n	8008386 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2210      	movs	r2, #16
 8008384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff f8e0 	bl	8007554 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008394:	e00b      	b.n	80083ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff f8c8 	bl	800752c <HAL_UART_RxCpltCallback>
}
 800839c:	e007      	b.n	80083ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f042 0208 	orr.w	r2, r2, #8
 80083ac:	619a      	str	r2, [r3, #24]
}
 80083ae:	bf00      	nop
 80083b0:	3770      	adds	r7, #112	@ 0x70
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40008000 	.word	0x40008000

080083bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b09c      	sub	sp, #112	@ 0x70
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80083ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083d4:	2b22      	cmp	r3, #34	@ 0x22
 80083d6:	f040 80be 	bne.w	8008556 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80083ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80083f2:	4013      	ands	r3, r2
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fe:	1c9a      	adds	r2, r3, #2
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 80a1 	bne.w	8008566 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008438:	667b      	str	r3, [r7, #100]	@ 0x64
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008442:	657b      	str	r3, [r7, #84]	@ 0x54
 8008444:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	f023 0301 	bic.w	r3, r3, #1
 800846c:	663b      	str	r3, [r7, #96]	@ 0x60
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008476:	643a      	str	r2, [r7, #64]	@ 0x40
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800847c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e5      	bne.n	8008456 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a33      	ldr	r2, [pc, #204]	@ (8008570 <UART_RxISR_16BIT+0x1b4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d01f      	beq.n	80084e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084d6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d12e      	bne.n	800854e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	60bb      	str	r3, [r7, #8]
   return(result);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f023 0310 	bic.w	r3, r3, #16
 800850a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6979      	ldr	r1, [r7, #20]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	613b      	str	r3, [r7, #16]
   return(result);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e6      	bne.n	80084f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b10      	cmp	r3, #16
 8008534:	d103      	bne.n	800853e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2210      	movs	r2, #16
 800853c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff f804 	bl	8007554 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800854c:	e00b      	b.n	8008566 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fe ffec 	bl	800752c <HAL_UART_RxCpltCallback>
}
 8008554:	e007      	b.n	8008566 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0208 	orr.w	r2, r2, #8
 8008564:	619a      	str	r2, [r3, #24]
}
 8008566:	bf00      	nop
 8008568:	3770      	adds	r7, #112	@ 0x70
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40008000 	.word	0x40008000

08008574 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b0ac      	sub	sp, #176	@ 0xb0
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008582:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085aa:	2b22      	cmp	r3, #34	@ 0x22
 80085ac:	f040 8183 	bne.w	80088b6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085b6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085ba:	e126      	b.n	800880a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80085ca:	b2d9      	uxtb	r1, r3
 80085cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d6:	400a      	ands	r2, r1
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	2b00      	cmp	r3, #0
 800860c:	d053      	beq.n	80086b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800860e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d011      	beq.n	800863e <UART_RxISR_8BIT_FIFOEN+0xca>
 800861a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800861e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2201      	movs	r2, #1
 800862c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008634:	f043 0201 	orr.w	r2, r3, #1
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800863e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d011      	beq.n	800866e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800864a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2202      	movs	r2, #2
 800865c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008664:	f043 0204 	orr.w	r2, r3, #4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800866e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d011      	beq.n	800869e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800867a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2204      	movs	r2, #4
 800868c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008694:	f043 0202 	orr.w	r2, r3, #2
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d006      	beq.n	80086b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fe ff49 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 80a3 	bne.w	800880a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80086d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086e8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80086ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80086f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e4      	bne.n	80086c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800870a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800870c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008722:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008724:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008728:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008730:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e1      	bne.n	80086fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2220      	movs	r2, #32
 800873a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a60      	ldr	r2, [pc, #384]	@ (80088d0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d021      	beq.n	8008798 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d01a      	beq.n	8008798 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008784:	657b      	str	r3, [r7, #84]	@ 0x54
 8008786:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800878a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e4      	bne.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d130      	bne.n	8008802 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e4      	bne.n	80087a6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	2b10      	cmp	r3, #16
 80087e8:	d103      	bne.n	80087f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2210      	movs	r2, #16
 80087f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fe feaa 	bl	8007554 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008800:	e00e      	b.n	8008820 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fe fe92 	bl	800752c <HAL_UART_RxCpltCallback>
        break;
 8008808:	e00a      	b.n	8008820 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800880a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	f47f aece 	bne.w	80085bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008826:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800882a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800882e:	2b00      	cmp	r3, #0
 8008830:	d049      	beq.n	80088c6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008838:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800883c:	429a      	cmp	r2, r3
 800883e:	d242      	bcs.n	80088c6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800886a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e3      	bne.n	8008840 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800887c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	60bb      	str	r3, [r7, #8]
   return(result);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f043 0320 	orr.w	r3, r3, #32
 8008892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088a0:	61bb      	str	r3, [r7, #24]
 80088a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6979      	ldr	r1, [r7, #20]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	613b      	str	r3, [r7, #16]
   return(result);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e4      	bne.n	800887e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088b4:	e007      	b.n	80088c6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699a      	ldr	r2, [r3, #24]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0208 	orr.w	r2, r2, #8
 80088c4:	619a      	str	r2, [r3, #24]
}
 80088c6:	bf00      	nop
 80088c8:	37b0      	adds	r7, #176	@ 0xb0
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40008000 	.word	0x40008000
 80088d4:	08008205 	.word	0x08008205

080088d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b0ae      	sub	sp, #184	@ 0xb8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890e:	2b22      	cmp	r3, #34	@ 0x22
 8008910:	f040 8187 	bne.w	8008c22 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800891a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800891e:	e12a      	b.n	8008b76 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008926:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800892e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008932:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008936:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800893a:	4013      	ands	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008942:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008948:	1c9a      	adds	r2, r3, #2
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800896a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	2b00      	cmp	r3, #0
 8008974:	d053      	beq.n	8008a1e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d011      	beq.n	80089a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800899c:	f043 0201 	orr.w	r2, r3, #1
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d011      	beq.n	80089d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80089b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2202      	movs	r2, #2
 80089c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089cc:	f043 0204 	orr.w	r2, r3, #4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d011      	beq.n	8008a06 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00b      	beq.n	8008a06 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2204      	movs	r2, #4
 80089f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089fc:	f043 0202 	orr.w	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7fe fd95 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f040 80a5 	bne.w	8008b76 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a52:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e2      	bne.n	8008a2c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008a8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e1      	bne.n	8008a66 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a60      	ldr	r2, [pc, #384]	@ (8008c3c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d021      	beq.n	8008b04 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d01a      	beq.n	8008b04 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008af2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008af6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e4      	bne.n	8008ace <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d130      	bne.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b22:	f023 0310 	bic.w	r3, r3, #16
 8008b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e4      	bne.n	8008b12 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f003 0310 	and.w	r3, r3, #16
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d103      	bne.n	8008b5e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2210      	movs	r2, #16
 8008b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7fe fcf4 	bl	8007554 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008b6c:	e00e      	b.n	8008b8c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fe fcdc 	bl	800752c <HAL_UART_RxCpltCallback>
        break;
 8008b74:	e00a      	b.n	8008b8c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b76:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d006      	beq.n	8008b8c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f47f aeca 	bne.w	8008920 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d049      	beq.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ba4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d242      	bcs.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3308      	adds	r3, #8
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008bd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e3      	bne.n	8008bac <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a16      	ldr	r2, [pc, #88]	@ (8008c40 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008be8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f043 0320 	orr.w	r3, r3, #32
 8008bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	69b9      	ldr	r1, [r7, #24]
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	617b      	str	r3, [r7, #20]
   return(result);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e4      	bne.n	8008bea <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c20:	e007      	b.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	699a      	ldr	r2, [r3, #24]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f042 0208 	orr.w	r2, r2, #8
 8008c30:	619a      	str	r2, [r3, #24]
}
 8008c32:	bf00      	nop
 8008c34:	37b8      	adds	r7, #184	@ 0xb8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40008000 	.word	0x40008000
 8008c40:	080083bd 	.word	0x080083bd

08008c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e027      	b.n	8008ce6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2224      	movs	r2, #36	@ 0x24
 8008ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0201 	bic.w	r2, r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e02d      	b.n	8008d66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2224      	movs	r2, #36	@ 0x24
 8008d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f850 	bl	8008dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2220      	movs	r2, #32
 8008d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e02d      	b.n	8008de2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2224      	movs	r2, #36	@ 0x24
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0201 	bic.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f812 	bl	8008dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d108      	bne.n	8008e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e0c:	e031      	b.n	8008e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e0e:	2308      	movs	r3, #8
 8008e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e12:	2308      	movs	r3, #8
 8008e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	0e5b      	lsrs	r3, r3, #25
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	0f5b      	lsrs	r3, r3, #29
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	7b3a      	ldrb	r2, [r7, #12]
 8008e3a:	4911      	ldr	r1, [pc, #68]	@ (8008e80 <UARTEx_SetNbDataToProcess+0x94>)
 8008e3c:	5c8a      	ldrb	r2, [r1, r2]
 8008e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e42:	7b3a      	ldrb	r2, [r7, #12]
 8008e44:	490f      	ldr	r1, [pc, #60]	@ (8008e84 <UARTEx_SetNbDataToProcess+0x98>)
 8008e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	7b7a      	ldrb	r2, [r7, #13]
 8008e58:	4909      	ldr	r1, [pc, #36]	@ (8008e80 <UARTEx_SetNbDataToProcess+0x94>)
 8008e5a:	5c8a      	ldrb	r2, [r1, r2]
 8008e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e60:	7b7a      	ldrb	r2, [r7, #13]
 8008e62:	4908      	ldr	r1, [pc, #32]	@ (8008e84 <UARTEx_SetNbDataToProcess+0x98>)
 8008e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	0800d604 	.word	0x0800d604
 8008e84:	0800d60c 	.word	0x0800d60c

08008e88 <atoi>:
 8008e88:	220a      	movs	r2, #10
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f000 b87c 	b.w	8008f88 <strtol>

08008e90 <_strtol_l.constprop.0>:
 8008e90:	2b24      	cmp	r3, #36	@ 0x24
 8008e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e96:	4686      	mov	lr, r0
 8008e98:	4690      	mov	r8, r2
 8008e9a:	d801      	bhi.n	8008ea0 <_strtol_l.constprop.0+0x10>
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <_strtol_l.constprop.0+0x1e>
 8008ea0:	f001 f86e 	bl	8009f80 <__errno>
 8008ea4:	2316      	movs	r3, #22
 8008ea6:	6003      	str	r3, [r0, #0]
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eae:	4834      	ldr	r0, [pc, #208]	@ (8008f80 <_strtol_l.constprop.0+0xf0>)
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eb8:	5d06      	ldrb	r6, [r0, r4]
 8008eba:	f016 0608 	ands.w	r6, r6, #8
 8008ebe:	d1f8      	bne.n	8008eb2 <_strtol_l.constprop.0+0x22>
 8008ec0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ec2:	d12d      	bne.n	8008f20 <_strtol_l.constprop.0+0x90>
 8008ec4:	782c      	ldrb	r4, [r5, #0]
 8008ec6:	2601      	movs	r6, #1
 8008ec8:	1c95      	adds	r5, r2, #2
 8008eca:	f033 0210 	bics.w	r2, r3, #16
 8008ece:	d109      	bne.n	8008ee4 <_strtol_l.constprop.0+0x54>
 8008ed0:	2c30      	cmp	r4, #48	@ 0x30
 8008ed2:	d12a      	bne.n	8008f2a <_strtol_l.constprop.0+0x9a>
 8008ed4:	782a      	ldrb	r2, [r5, #0]
 8008ed6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eda:	2a58      	cmp	r2, #88	@ 0x58
 8008edc:	d125      	bne.n	8008f2a <_strtol_l.constprop.0+0x9a>
 8008ede:	786c      	ldrb	r4, [r5, #1]
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	3502      	adds	r5, #2
 8008ee4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ee8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008eec:	2200      	movs	r2, #0
 8008eee:	fbbc f9f3 	udiv	r9, ip, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ef8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008efc:	2f09      	cmp	r7, #9
 8008efe:	d81b      	bhi.n	8008f38 <_strtol_l.constprop.0+0xa8>
 8008f00:	463c      	mov	r4, r7
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	dd27      	ble.n	8008f56 <_strtol_l.constprop.0+0xc6>
 8008f06:	1c57      	adds	r7, r2, #1
 8008f08:	d007      	beq.n	8008f1a <_strtol_l.constprop.0+0x8a>
 8008f0a:	4581      	cmp	r9, r0
 8008f0c:	d320      	bcc.n	8008f50 <_strtol_l.constprop.0+0xc0>
 8008f0e:	d101      	bne.n	8008f14 <_strtol_l.constprop.0+0x84>
 8008f10:	45a2      	cmp	sl, r4
 8008f12:	db1d      	blt.n	8008f50 <_strtol_l.constprop.0+0xc0>
 8008f14:	fb00 4003 	mla	r0, r0, r3, r4
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f1e:	e7eb      	b.n	8008ef8 <_strtol_l.constprop.0+0x68>
 8008f20:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f22:	bf04      	itt	eq
 8008f24:	782c      	ldrbeq	r4, [r5, #0]
 8008f26:	1c95      	addeq	r5, r2, #2
 8008f28:	e7cf      	b.n	8008eca <_strtol_l.constprop.0+0x3a>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1da      	bne.n	8008ee4 <_strtol_l.constprop.0+0x54>
 8008f2e:	2c30      	cmp	r4, #48	@ 0x30
 8008f30:	bf0c      	ite	eq
 8008f32:	2308      	moveq	r3, #8
 8008f34:	230a      	movne	r3, #10
 8008f36:	e7d5      	b.n	8008ee4 <_strtol_l.constprop.0+0x54>
 8008f38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f3c:	2f19      	cmp	r7, #25
 8008f3e:	d801      	bhi.n	8008f44 <_strtol_l.constprop.0+0xb4>
 8008f40:	3c37      	subs	r4, #55	@ 0x37
 8008f42:	e7de      	b.n	8008f02 <_strtol_l.constprop.0+0x72>
 8008f44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f48:	2f19      	cmp	r7, #25
 8008f4a:	d804      	bhi.n	8008f56 <_strtol_l.constprop.0+0xc6>
 8008f4c:	3c57      	subs	r4, #87	@ 0x57
 8008f4e:	e7d8      	b.n	8008f02 <_strtol_l.constprop.0+0x72>
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	e7e1      	b.n	8008f1a <_strtol_l.constprop.0+0x8a>
 8008f56:	1c53      	adds	r3, r2, #1
 8008f58:	d108      	bne.n	8008f6c <_strtol_l.constprop.0+0xdc>
 8008f5a:	2322      	movs	r3, #34	@ 0x22
 8008f5c:	f8ce 3000 	str.w	r3, [lr]
 8008f60:	4660      	mov	r0, ip
 8008f62:	f1b8 0f00 	cmp.w	r8, #0
 8008f66:	d0a0      	beq.n	8008eaa <_strtol_l.constprop.0+0x1a>
 8008f68:	1e69      	subs	r1, r5, #1
 8008f6a:	e006      	b.n	8008f7a <_strtol_l.constprop.0+0xea>
 8008f6c:	b106      	cbz	r6, 8008f70 <_strtol_l.constprop.0+0xe0>
 8008f6e:	4240      	negs	r0, r0
 8008f70:	f1b8 0f00 	cmp.w	r8, #0
 8008f74:	d099      	beq.n	8008eaa <_strtol_l.constprop.0+0x1a>
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d1f6      	bne.n	8008f68 <_strtol_l.constprop.0+0xd8>
 8008f7a:	f8c8 1000 	str.w	r1, [r8]
 8008f7e:	e794      	b.n	8008eaa <_strtol_l.constprop.0+0x1a>
 8008f80:	0800d615 	.word	0x0800d615

08008f84 <_strtol_r>:
 8008f84:	f7ff bf84 	b.w	8008e90 <_strtol_l.constprop.0>

08008f88 <strtol>:
 8008f88:	4613      	mov	r3, r2
 8008f8a:	460a      	mov	r2, r1
 8008f8c:	4601      	mov	r1, r0
 8008f8e:	4802      	ldr	r0, [pc, #8]	@ (8008f98 <strtol+0x10>)
 8008f90:	6800      	ldr	r0, [r0, #0]
 8008f92:	f7ff bf7d 	b.w	8008e90 <_strtol_l.constprop.0>
 8008f96:	bf00      	nop
 8008f98:	20000030 	.word	0x20000030

08008f9c <__cvt>:
 8008f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	ec57 6b10 	vmov	r6, r7, d0
 8008fa4:	2f00      	cmp	r7, #0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	4619      	mov	r1, r3
 8008faa:	463b      	mov	r3, r7
 8008fac:	bfbb      	ittet	lt
 8008fae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008fb2:	461f      	movlt	r7, r3
 8008fb4:	2300      	movge	r3, #0
 8008fb6:	232d      	movlt	r3, #45	@ 0x2d
 8008fb8:	700b      	strb	r3, [r1, #0]
 8008fba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	f023 0820 	bic.w	r8, r3, #32
 8008fc6:	bfbc      	itt	lt
 8008fc8:	4632      	movlt	r2, r6
 8008fca:	4616      	movlt	r6, r2
 8008fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fd0:	d005      	beq.n	8008fde <__cvt+0x42>
 8008fd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008fd6:	d100      	bne.n	8008fda <__cvt+0x3e>
 8008fd8:	3401      	adds	r4, #1
 8008fda:	2102      	movs	r1, #2
 8008fdc:	e000      	b.n	8008fe0 <__cvt+0x44>
 8008fde:	2103      	movs	r1, #3
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	ab02      	add	r3, sp, #8
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	ec47 6b10 	vmov	d0, r6, r7
 8008fec:	4653      	mov	r3, sl
 8008fee:	4622      	mov	r2, r4
 8008ff0:	f001 f882 	bl	800a0f8 <_dtoa_r>
 8008ff4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	d119      	bne.n	8009030 <__cvt+0x94>
 8008ffc:	f019 0f01 	tst.w	r9, #1
 8009000:	d00e      	beq.n	8009020 <__cvt+0x84>
 8009002:	eb00 0904 	add.w	r9, r0, r4
 8009006:	2200      	movs	r2, #0
 8009008:	2300      	movs	r3, #0
 800900a:	4630      	mov	r0, r6
 800900c:	4639      	mov	r1, r7
 800900e:	f7f7 fd83 	bl	8000b18 <__aeabi_dcmpeq>
 8009012:	b108      	cbz	r0, 8009018 <__cvt+0x7c>
 8009014:	f8cd 900c 	str.w	r9, [sp, #12]
 8009018:	2230      	movs	r2, #48	@ 0x30
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	454b      	cmp	r3, r9
 800901e:	d31e      	bcc.n	800905e <__cvt+0xc2>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009024:	1b5b      	subs	r3, r3, r5
 8009026:	4628      	mov	r0, r5
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	b004      	add	sp, #16
 800902c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009034:	eb00 0904 	add.w	r9, r0, r4
 8009038:	d1e5      	bne.n	8009006 <__cvt+0x6a>
 800903a:	7803      	ldrb	r3, [r0, #0]
 800903c:	2b30      	cmp	r3, #48	@ 0x30
 800903e:	d10a      	bne.n	8009056 <__cvt+0xba>
 8009040:	2200      	movs	r2, #0
 8009042:	2300      	movs	r3, #0
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 fd66 	bl	8000b18 <__aeabi_dcmpeq>
 800904c:	b918      	cbnz	r0, 8009056 <__cvt+0xba>
 800904e:	f1c4 0401 	rsb	r4, r4, #1
 8009052:	f8ca 4000 	str.w	r4, [sl]
 8009056:	f8da 3000 	ldr.w	r3, [sl]
 800905a:	4499      	add	r9, r3
 800905c:	e7d3      	b.n	8009006 <__cvt+0x6a>
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	9103      	str	r1, [sp, #12]
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e7d9      	b.n	800901a <__cvt+0x7e>

08009066 <__exponent>:
 8009066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009068:	2900      	cmp	r1, #0
 800906a:	bfba      	itte	lt
 800906c:	4249      	neglt	r1, r1
 800906e:	232d      	movlt	r3, #45	@ 0x2d
 8009070:	232b      	movge	r3, #43	@ 0x2b
 8009072:	2909      	cmp	r1, #9
 8009074:	7002      	strb	r2, [r0, #0]
 8009076:	7043      	strb	r3, [r0, #1]
 8009078:	dd29      	ble.n	80090ce <__exponent+0x68>
 800907a:	f10d 0307 	add.w	r3, sp, #7
 800907e:	461d      	mov	r5, r3
 8009080:	270a      	movs	r7, #10
 8009082:	461a      	mov	r2, r3
 8009084:	fbb1 f6f7 	udiv	r6, r1, r7
 8009088:	fb07 1416 	mls	r4, r7, r6, r1
 800908c:	3430      	adds	r4, #48	@ 0x30
 800908e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009092:	460c      	mov	r4, r1
 8009094:	2c63      	cmp	r4, #99	@ 0x63
 8009096:	f103 33ff 	add.w	r3, r3, #4294967295
 800909a:	4631      	mov	r1, r6
 800909c:	dcf1      	bgt.n	8009082 <__exponent+0x1c>
 800909e:	3130      	adds	r1, #48	@ 0x30
 80090a0:	1e94      	subs	r4, r2, #2
 80090a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090a6:	1c41      	adds	r1, r0, #1
 80090a8:	4623      	mov	r3, r4
 80090aa:	42ab      	cmp	r3, r5
 80090ac:	d30a      	bcc.n	80090c4 <__exponent+0x5e>
 80090ae:	f10d 0309 	add.w	r3, sp, #9
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	42ac      	cmp	r4, r5
 80090b6:	bf88      	it	hi
 80090b8:	2300      	movhi	r3, #0
 80090ba:	3302      	adds	r3, #2
 80090bc:	4403      	add	r3, r0
 80090be:	1a18      	subs	r0, r3, r0
 80090c0:	b003      	add	sp, #12
 80090c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090cc:	e7ed      	b.n	80090aa <__exponent+0x44>
 80090ce:	2330      	movs	r3, #48	@ 0x30
 80090d0:	3130      	adds	r1, #48	@ 0x30
 80090d2:	7083      	strb	r3, [r0, #2]
 80090d4:	70c1      	strb	r1, [r0, #3]
 80090d6:	1d03      	adds	r3, r0, #4
 80090d8:	e7f1      	b.n	80090be <__exponent+0x58>
	...

080090dc <_printf_float>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	b08d      	sub	sp, #52	@ 0x34
 80090e2:	460c      	mov	r4, r1
 80090e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090e8:	4616      	mov	r6, r2
 80090ea:	461f      	mov	r7, r3
 80090ec:	4605      	mov	r5, r0
 80090ee:	f000 fefd 	bl	8009eec <_localeconv_r>
 80090f2:	6803      	ldr	r3, [r0, #0]
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 f8e2 	bl	80002c0 <strlen>
 80090fc:	2300      	movs	r3, #0
 80090fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009100:	f8d8 3000 	ldr.w	r3, [r8]
 8009104:	9005      	str	r0, [sp, #20]
 8009106:	3307      	adds	r3, #7
 8009108:	f023 0307 	bic.w	r3, r3, #7
 800910c:	f103 0208 	add.w	r2, r3, #8
 8009110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009114:	f8d4 b000 	ldr.w	fp, [r4]
 8009118:	f8c8 2000 	str.w	r2, [r8]
 800911c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009120:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009124:	9307      	str	r3, [sp, #28]
 8009126:	f8cd 8018 	str.w	r8, [sp, #24]
 800912a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800912e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009132:	4b9c      	ldr	r3, [pc, #624]	@ (80093a4 <_printf_float+0x2c8>)
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	f7f7 fd20 	bl	8000b7c <__aeabi_dcmpun>
 800913c:	bb70      	cbnz	r0, 800919c <_printf_float+0xc0>
 800913e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009142:	4b98      	ldr	r3, [pc, #608]	@ (80093a4 <_printf_float+0x2c8>)
 8009144:	f04f 32ff 	mov.w	r2, #4294967295
 8009148:	f7f7 fcfa 	bl	8000b40 <__aeabi_dcmple>
 800914c:	bb30      	cbnz	r0, 800919c <_printf_float+0xc0>
 800914e:	2200      	movs	r2, #0
 8009150:	2300      	movs	r3, #0
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	f7f7 fce9 	bl	8000b2c <__aeabi_dcmplt>
 800915a:	b110      	cbz	r0, 8009162 <_printf_float+0x86>
 800915c:	232d      	movs	r3, #45	@ 0x2d
 800915e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009162:	4a91      	ldr	r2, [pc, #580]	@ (80093a8 <_printf_float+0x2cc>)
 8009164:	4b91      	ldr	r3, [pc, #580]	@ (80093ac <_printf_float+0x2d0>)
 8009166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800916a:	bf94      	ite	ls
 800916c:	4690      	movls	r8, r2
 800916e:	4698      	movhi	r8, r3
 8009170:	2303      	movs	r3, #3
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	f02b 0304 	bic.w	r3, fp, #4
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	f04f 0900 	mov.w	r9, #0
 800917e:	9700      	str	r7, [sp, #0]
 8009180:	4633      	mov	r3, r6
 8009182:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009184:	4621      	mov	r1, r4
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f9d2 	bl	8009530 <_printf_common>
 800918c:	3001      	adds	r0, #1
 800918e:	f040 808d 	bne.w	80092ac <_printf_float+0x1d0>
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	b00d      	add	sp, #52	@ 0x34
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	4640      	mov	r0, r8
 80091a2:	4649      	mov	r1, r9
 80091a4:	f7f7 fcea 	bl	8000b7c <__aeabi_dcmpun>
 80091a8:	b140      	cbz	r0, 80091bc <_printf_float+0xe0>
 80091aa:	464b      	mov	r3, r9
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfbc      	itt	lt
 80091b0:	232d      	movlt	r3, #45	@ 0x2d
 80091b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091b6:	4a7e      	ldr	r2, [pc, #504]	@ (80093b0 <_printf_float+0x2d4>)
 80091b8:	4b7e      	ldr	r3, [pc, #504]	@ (80093b4 <_printf_float+0x2d8>)
 80091ba:	e7d4      	b.n	8009166 <_printf_float+0x8a>
 80091bc:	6863      	ldr	r3, [r4, #4]
 80091be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091c2:	9206      	str	r2, [sp, #24]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	d13b      	bne.n	8009240 <_printf_float+0x164>
 80091c8:	2306      	movs	r3, #6
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80091d0:	2300      	movs	r3, #0
 80091d2:	6022      	str	r2, [r4, #0]
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80091d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091dc:	ab09      	add	r3, sp, #36	@ 0x24
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	6861      	ldr	r1, [r4, #4]
 80091e2:	ec49 8b10 	vmov	d0, r8, r9
 80091e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7ff fed6 	bl	8008f9c <__cvt>
 80091f0:	9b06      	ldr	r3, [sp, #24]
 80091f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091f4:	2b47      	cmp	r3, #71	@ 0x47
 80091f6:	4680      	mov	r8, r0
 80091f8:	d129      	bne.n	800924e <_printf_float+0x172>
 80091fa:	1cc8      	adds	r0, r1, #3
 80091fc:	db02      	blt.n	8009204 <_printf_float+0x128>
 80091fe:	6863      	ldr	r3, [r4, #4]
 8009200:	4299      	cmp	r1, r3
 8009202:	dd41      	ble.n	8009288 <_printf_float+0x1ac>
 8009204:	f1aa 0a02 	sub.w	sl, sl, #2
 8009208:	fa5f fa8a 	uxtb.w	sl, sl
 800920c:	3901      	subs	r1, #1
 800920e:	4652      	mov	r2, sl
 8009210:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009214:	9109      	str	r1, [sp, #36]	@ 0x24
 8009216:	f7ff ff26 	bl	8009066 <__exponent>
 800921a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800921c:	1813      	adds	r3, r2, r0
 800921e:	2a01      	cmp	r2, #1
 8009220:	4681      	mov	r9, r0
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	dc02      	bgt.n	800922c <_printf_float+0x150>
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	07d2      	lsls	r2, r2, #31
 800922a:	d501      	bpl.n	8009230 <_printf_float+0x154>
 800922c:	3301      	adds	r3, #1
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0a2      	beq.n	800917e <_printf_float+0xa2>
 8009238:	232d      	movs	r3, #45	@ 0x2d
 800923a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800923e:	e79e      	b.n	800917e <_printf_float+0xa2>
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	2a47      	cmp	r2, #71	@ 0x47
 8009244:	d1c2      	bne.n	80091cc <_printf_float+0xf0>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1c0      	bne.n	80091cc <_printf_float+0xf0>
 800924a:	2301      	movs	r3, #1
 800924c:	e7bd      	b.n	80091ca <_printf_float+0xee>
 800924e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009252:	d9db      	bls.n	800920c <_printf_float+0x130>
 8009254:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009258:	d118      	bne.n	800928c <_printf_float+0x1b0>
 800925a:	2900      	cmp	r1, #0
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	dd0b      	ble.n	8009278 <_printf_float+0x19c>
 8009260:	6121      	str	r1, [r4, #16]
 8009262:	b913      	cbnz	r3, 800926a <_printf_float+0x18e>
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	07d0      	lsls	r0, r2, #31
 8009268:	d502      	bpl.n	8009270 <_printf_float+0x194>
 800926a:	3301      	adds	r3, #1
 800926c:	440b      	add	r3, r1
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	e7db      	b.n	8009230 <_printf_float+0x154>
 8009278:	b913      	cbnz	r3, 8009280 <_printf_float+0x1a4>
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	07d2      	lsls	r2, r2, #31
 800927e:	d501      	bpl.n	8009284 <_printf_float+0x1a8>
 8009280:	3302      	adds	r3, #2
 8009282:	e7f4      	b.n	800926e <_printf_float+0x192>
 8009284:	2301      	movs	r3, #1
 8009286:	e7f2      	b.n	800926e <_printf_float+0x192>
 8009288:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800928c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800928e:	4299      	cmp	r1, r3
 8009290:	db05      	blt.n	800929e <_printf_float+0x1c2>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	6121      	str	r1, [r4, #16]
 8009296:	07d8      	lsls	r0, r3, #31
 8009298:	d5ea      	bpl.n	8009270 <_printf_float+0x194>
 800929a:	1c4b      	adds	r3, r1, #1
 800929c:	e7e7      	b.n	800926e <_printf_float+0x192>
 800929e:	2900      	cmp	r1, #0
 80092a0:	bfd4      	ite	le
 80092a2:	f1c1 0202 	rsble	r2, r1, #2
 80092a6:	2201      	movgt	r2, #1
 80092a8:	4413      	add	r3, r2
 80092aa:	e7e0      	b.n	800926e <_printf_float+0x192>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	055a      	lsls	r2, r3, #21
 80092b0:	d407      	bmi.n	80092c2 <_printf_float+0x1e6>
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	4642      	mov	r2, r8
 80092b6:	4631      	mov	r1, r6
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b8      	blx	r7
 80092bc:	3001      	adds	r0, #1
 80092be:	d12b      	bne.n	8009318 <_printf_float+0x23c>
 80092c0:	e767      	b.n	8009192 <_printf_float+0xb6>
 80092c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092c6:	f240 80dd 	bls.w	8009484 <_printf_float+0x3a8>
 80092ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092ce:	2200      	movs	r2, #0
 80092d0:	2300      	movs	r3, #0
 80092d2:	f7f7 fc21 	bl	8000b18 <__aeabi_dcmpeq>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d033      	beq.n	8009342 <_printf_float+0x266>
 80092da:	4a37      	ldr	r2, [pc, #220]	@ (80093b8 <_printf_float+0x2dc>)
 80092dc:	2301      	movs	r3, #1
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f af54 	beq.w	8009192 <_printf_float+0xb6>
 80092ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092ee:	4543      	cmp	r3, r8
 80092f0:	db02      	blt.n	80092f8 <_printf_float+0x21c>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	07d8      	lsls	r0, r3, #31
 80092f6:	d50f      	bpl.n	8009318 <_printf_float+0x23c>
 80092f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af45 	beq.w	8009192 <_printf_float+0xb6>
 8009308:	f04f 0900 	mov.w	r9, #0
 800930c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009310:	f104 0a1a 	add.w	sl, r4, #26
 8009314:	45c8      	cmp	r8, r9
 8009316:	dc09      	bgt.n	800932c <_printf_float+0x250>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	079b      	lsls	r3, r3, #30
 800931c:	f100 8103 	bmi.w	8009526 <_printf_float+0x44a>
 8009320:	68e0      	ldr	r0, [r4, #12]
 8009322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009324:	4298      	cmp	r0, r3
 8009326:	bfb8      	it	lt
 8009328:	4618      	movlt	r0, r3
 800932a:	e734      	b.n	8009196 <_printf_float+0xba>
 800932c:	2301      	movs	r3, #1
 800932e:	4652      	mov	r2, sl
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af2b 	beq.w	8009192 <_printf_float+0xb6>
 800933c:	f109 0901 	add.w	r9, r9, #1
 8009340:	e7e8      	b.n	8009314 <_printf_float+0x238>
 8009342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	dc39      	bgt.n	80093bc <_printf_float+0x2e0>
 8009348:	4a1b      	ldr	r2, [pc, #108]	@ (80093b8 <_printf_float+0x2dc>)
 800934a:	2301      	movs	r3, #1
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af1d 	beq.w	8009192 <_printf_float+0xb6>
 8009358:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800935c:	ea59 0303 	orrs.w	r3, r9, r3
 8009360:	d102      	bne.n	8009368 <_printf_float+0x28c>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	07d9      	lsls	r1, r3, #31
 8009366:	d5d7      	bpl.n	8009318 <_printf_float+0x23c>
 8009368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af0d 	beq.w	8009192 <_printf_float+0xb6>
 8009378:	f04f 0a00 	mov.w	sl, #0
 800937c:	f104 0b1a 	add.w	fp, r4, #26
 8009380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009382:	425b      	negs	r3, r3
 8009384:	4553      	cmp	r3, sl
 8009386:	dc01      	bgt.n	800938c <_printf_float+0x2b0>
 8009388:	464b      	mov	r3, r9
 800938a:	e793      	b.n	80092b4 <_printf_float+0x1d8>
 800938c:	2301      	movs	r3, #1
 800938e:	465a      	mov	r2, fp
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f aefb 	beq.w	8009192 <_printf_float+0xb6>
 800939c:	f10a 0a01 	add.w	sl, sl, #1
 80093a0:	e7ee      	b.n	8009380 <_printf_float+0x2a4>
 80093a2:	bf00      	nop
 80093a4:	7fefffff 	.word	0x7fefffff
 80093a8:	0800d715 	.word	0x0800d715
 80093ac:	0800d719 	.word	0x0800d719
 80093b0:	0800d71d 	.word	0x0800d71d
 80093b4:	0800d721 	.word	0x0800d721
 80093b8:	0800d725 	.word	0x0800d725
 80093bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093c2:	4553      	cmp	r3, sl
 80093c4:	bfa8      	it	ge
 80093c6:	4653      	movge	r3, sl
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	4699      	mov	r9, r3
 80093cc:	dc36      	bgt.n	800943c <_printf_float+0x360>
 80093ce:	f04f 0b00 	mov.w	fp, #0
 80093d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093d6:	f104 021a 	add.w	r2, r4, #26
 80093da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093dc:	9306      	str	r3, [sp, #24]
 80093de:	eba3 0309 	sub.w	r3, r3, r9
 80093e2:	455b      	cmp	r3, fp
 80093e4:	dc31      	bgt.n	800944a <_printf_float+0x36e>
 80093e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e8:	459a      	cmp	sl, r3
 80093ea:	dc3a      	bgt.n	8009462 <_printf_float+0x386>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d437      	bmi.n	8009462 <_printf_float+0x386>
 80093f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f4:	ebaa 0903 	sub.w	r9, sl, r3
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	ebaa 0303 	sub.w	r3, sl, r3
 80093fe:	4599      	cmp	r9, r3
 8009400:	bfa8      	it	ge
 8009402:	4699      	movge	r9, r3
 8009404:	f1b9 0f00 	cmp.w	r9, #0
 8009408:	dc33      	bgt.n	8009472 <_printf_float+0x396>
 800940a:	f04f 0800 	mov.w	r8, #0
 800940e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009412:	f104 0b1a 	add.w	fp, r4, #26
 8009416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009418:	ebaa 0303 	sub.w	r3, sl, r3
 800941c:	eba3 0309 	sub.w	r3, r3, r9
 8009420:	4543      	cmp	r3, r8
 8009422:	f77f af79 	ble.w	8009318 <_printf_float+0x23c>
 8009426:	2301      	movs	r3, #1
 8009428:	465a      	mov	r2, fp
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f aeae 	beq.w	8009192 <_printf_float+0xb6>
 8009436:	f108 0801 	add.w	r8, r8, #1
 800943a:	e7ec      	b.n	8009416 <_printf_float+0x33a>
 800943c:	4642      	mov	r2, r8
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	d1c2      	bne.n	80093ce <_printf_float+0x2f2>
 8009448:	e6a3      	b.n	8009192 <_printf_float+0xb6>
 800944a:	2301      	movs	r3, #1
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	9206      	str	r2, [sp, #24]
 8009452:	47b8      	blx	r7
 8009454:	3001      	adds	r0, #1
 8009456:	f43f ae9c 	beq.w	8009192 <_printf_float+0xb6>
 800945a:	9a06      	ldr	r2, [sp, #24]
 800945c:	f10b 0b01 	add.w	fp, fp, #1
 8009460:	e7bb      	b.n	80093da <_printf_float+0x2fe>
 8009462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	d1c0      	bne.n	80093f2 <_printf_float+0x316>
 8009470:	e68f      	b.n	8009192 <_printf_float+0xb6>
 8009472:	9a06      	ldr	r2, [sp, #24]
 8009474:	464b      	mov	r3, r9
 8009476:	4442      	add	r2, r8
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	d1c3      	bne.n	800940a <_printf_float+0x32e>
 8009482:	e686      	b.n	8009192 <_printf_float+0xb6>
 8009484:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009488:	f1ba 0f01 	cmp.w	sl, #1
 800948c:	dc01      	bgt.n	8009492 <_printf_float+0x3b6>
 800948e:	07db      	lsls	r3, r3, #31
 8009490:	d536      	bpl.n	8009500 <_printf_float+0x424>
 8009492:	2301      	movs	r3, #1
 8009494:	4642      	mov	r2, r8
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f ae78 	beq.w	8009192 <_printf_float+0xb6>
 80094a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a6:	4631      	mov	r1, r6
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b8      	blx	r7
 80094ac:	3001      	adds	r0, #1
 80094ae:	f43f ae70 	beq.w	8009192 <_printf_float+0xb6>
 80094b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094b6:	2200      	movs	r2, #0
 80094b8:	2300      	movs	r3, #0
 80094ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094be:	f7f7 fb2b 	bl	8000b18 <__aeabi_dcmpeq>
 80094c2:	b9c0      	cbnz	r0, 80094f6 <_printf_float+0x41a>
 80094c4:	4653      	mov	r3, sl
 80094c6:	f108 0201 	add.w	r2, r8, #1
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	d10c      	bne.n	80094ee <_printf_float+0x412>
 80094d4:	e65d      	b.n	8009192 <_printf_float+0xb6>
 80094d6:	2301      	movs	r3, #1
 80094d8:	465a      	mov	r2, fp
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae56 	beq.w	8009192 <_printf_float+0xb6>
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	45d0      	cmp	r8, sl
 80094ec:	dbf3      	blt.n	80094d6 <_printf_float+0x3fa>
 80094ee:	464b      	mov	r3, r9
 80094f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094f4:	e6df      	b.n	80092b6 <_printf_float+0x1da>
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	f104 0b1a 	add.w	fp, r4, #26
 80094fe:	e7f4      	b.n	80094ea <_printf_float+0x40e>
 8009500:	2301      	movs	r3, #1
 8009502:	4642      	mov	r2, r8
 8009504:	e7e1      	b.n	80094ca <_printf_float+0x3ee>
 8009506:	2301      	movs	r3, #1
 8009508:	464a      	mov	r2, r9
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f ae3e 	beq.w	8009192 <_printf_float+0xb6>
 8009516:	f108 0801 	add.w	r8, r8, #1
 800951a:	68e3      	ldr	r3, [r4, #12]
 800951c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800951e:	1a5b      	subs	r3, r3, r1
 8009520:	4543      	cmp	r3, r8
 8009522:	dcf0      	bgt.n	8009506 <_printf_float+0x42a>
 8009524:	e6fc      	b.n	8009320 <_printf_float+0x244>
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	f104 0919 	add.w	r9, r4, #25
 800952e:	e7f4      	b.n	800951a <_printf_float+0x43e>

08009530 <_printf_common>:
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	4616      	mov	r6, r2
 8009536:	4698      	mov	r8, r3
 8009538:	688a      	ldr	r2, [r1, #8]
 800953a:	690b      	ldr	r3, [r1, #16]
 800953c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009540:	4293      	cmp	r3, r2
 8009542:	bfb8      	it	lt
 8009544:	4613      	movlt	r3, r2
 8009546:	6033      	str	r3, [r6, #0]
 8009548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800954c:	4607      	mov	r7, r0
 800954e:	460c      	mov	r4, r1
 8009550:	b10a      	cbz	r2, 8009556 <_printf_common+0x26>
 8009552:	3301      	adds	r3, #1
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	0699      	lsls	r1, r3, #26
 800955a:	bf42      	ittt	mi
 800955c:	6833      	ldrmi	r3, [r6, #0]
 800955e:	3302      	addmi	r3, #2
 8009560:	6033      	strmi	r3, [r6, #0]
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	f015 0506 	ands.w	r5, r5, #6
 8009568:	d106      	bne.n	8009578 <_printf_common+0x48>
 800956a:	f104 0a19 	add.w	sl, r4, #25
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	6832      	ldr	r2, [r6, #0]
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	42ab      	cmp	r3, r5
 8009576:	dc26      	bgt.n	80095c6 <_printf_common+0x96>
 8009578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800957c:	6822      	ldr	r2, [r4, #0]
 800957e:	3b00      	subs	r3, #0
 8009580:	bf18      	it	ne
 8009582:	2301      	movne	r3, #1
 8009584:	0692      	lsls	r2, r2, #26
 8009586:	d42b      	bmi.n	80095e0 <_printf_common+0xb0>
 8009588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800958c:	4641      	mov	r1, r8
 800958e:	4638      	mov	r0, r7
 8009590:	47c8      	blx	r9
 8009592:	3001      	adds	r0, #1
 8009594:	d01e      	beq.n	80095d4 <_printf_common+0xa4>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	f003 0306 	and.w	r3, r3, #6
 800959e:	2b04      	cmp	r3, #4
 80095a0:	bf02      	ittt	eq
 80095a2:	68e5      	ldreq	r5, [r4, #12]
 80095a4:	6833      	ldreq	r3, [r6, #0]
 80095a6:	1aed      	subeq	r5, r5, r3
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	bf0c      	ite	eq
 80095ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b0:	2500      	movne	r5, #0
 80095b2:	4293      	cmp	r3, r2
 80095b4:	bfc4      	itt	gt
 80095b6:	1a9b      	subgt	r3, r3, r2
 80095b8:	18ed      	addgt	r5, r5, r3
 80095ba:	2600      	movs	r6, #0
 80095bc:	341a      	adds	r4, #26
 80095be:	42b5      	cmp	r5, r6
 80095c0:	d11a      	bne.n	80095f8 <_printf_common+0xc8>
 80095c2:	2000      	movs	r0, #0
 80095c4:	e008      	b.n	80095d8 <_printf_common+0xa8>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4652      	mov	r2, sl
 80095ca:	4641      	mov	r1, r8
 80095cc:	4638      	mov	r0, r7
 80095ce:	47c8      	blx	r9
 80095d0:	3001      	adds	r0, #1
 80095d2:	d103      	bne.n	80095dc <_printf_common+0xac>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	3501      	adds	r5, #1
 80095de:	e7c6      	b.n	800956e <_printf_common+0x3e>
 80095e0:	18e1      	adds	r1, r4, r3
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	2030      	movs	r0, #48	@ 0x30
 80095e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ea:	4422      	add	r2, r4
 80095ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095f4:	3302      	adds	r3, #2
 80095f6:	e7c7      	b.n	8009588 <_printf_common+0x58>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4622      	mov	r2, r4
 80095fc:	4641      	mov	r1, r8
 80095fe:	4638      	mov	r0, r7
 8009600:	47c8      	blx	r9
 8009602:	3001      	adds	r0, #1
 8009604:	d0e6      	beq.n	80095d4 <_printf_common+0xa4>
 8009606:	3601      	adds	r6, #1
 8009608:	e7d9      	b.n	80095be <_printf_common+0x8e>
	...

0800960c <_printf_i>:
 800960c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	7e0f      	ldrb	r7, [r1, #24]
 8009612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009614:	2f78      	cmp	r7, #120	@ 0x78
 8009616:	4691      	mov	r9, r2
 8009618:	4680      	mov	r8, r0
 800961a:	460c      	mov	r4, r1
 800961c:	469a      	mov	sl, r3
 800961e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009622:	d807      	bhi.n	8009634 <_printf_i+0x28>
 8009624:	2f62      	cmp	r7, #98	@ 0x62
 8009626:	d80a      	bhi.n	800963e <_printf_i+0x32>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f000 80d2 	beq.w	80097d2 <_printf_i+0x1c6>
 800962e:	2f58      	cmp	r7, #88	@ 0x58
 8009630:	f000 80b9 	beq.w	80097a6 <_printf_i+0x19a>
 8009634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800963c:	e03a      	b.n	80096b4 <_printf_i+0xa8>
 800963e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009642:	2b15      	cmp	r3, #21
 8009644:	d8f6      	bhi.n	8009634 <_printf_i+0x28>
 8009646:	a101      	add	r1, pc, #4	@ (adr r1, 800964c <_printf_i+0x40>)
 8009648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800964c:	080096a5 	.word	0x080096a5
 8009650:	080096b9 	.word	0x080096b9
 8009654:	08009635 	.word	0x08009635
 8009658:	08009635 	.word	0x08009635
 800965c:	08009635 	.word	0x08009635
 8009660:	08009635 	.word	0x08009635
 8009664:	080096b9 	.word	0x080096b9
 8009668:	08009635 	.word	0x08009635
 800966c:	08009635 	.word	0x08009635
 8009670:	08009635 	.word	0x08009635
 8009674:	08009635 	.word	0x08009635
 8009678:	080097b9 	.word	0x080097b9
 800967c:	080096e3 	.word	0x080096e3
 8009680:	08009773 	.word	0x08009773
 8009684:	08009635 	.word	0x08009635
 8009688:	08009635 	.word	0x08009635
 800968c:	080097db 	.word	0x080097db
 8009690:	08009635 	.word	0x08009635
 8009694:	080096e3 	.word	0x080096e3
 8009698:	08009635 	.word	0x08009635
 800969c:	08009635 	.word	0x08009635
 80096a0:	0800977b 	.word	0x0800977b
 80096a4:	6833      	ldr	r3, [r6, #0]
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6032      	str	r2, [r6, #0]
 80096ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096b4:	2301      	movs	r3, #1
 80096b6:	e09d      	b.n	80097f4 <_printf_i+0x1e8>
 80096b8:	6833      	ldr	r3, [r6, #0]
 80096ba:	6820      	ldr	r0, [r4, #0]
 80096bc:	1d19      	adds	r1, r3, #4
 80096be:	6031      	str	r1, [r6, #0]
 80096c0:	0606      	lsls	r6, r0, #24
 80096c2:	d501      	bpl.n	80096c8 <_printf_i+0xbc>
 80096c4:	681d      	ldr	r5, [r3, #0]
 80096c6:	e003      	b.n	80096d0 <_printf_i+0xc4>
 80096c8:	0645      	lsls	r5, r0, #25
 80096ca:	d5fb      	bpl.n	80096c4 <_printf_i+0xb8>
 80096cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	da03      	bge.n	80096dc <_printf_i+0xd0>
 80096d4:	232d      	movs	r3, #45	@ 0x2d
 80096d6:	426d      	negs	r5, r5
 80096d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096dc:	4859      	ldr	r0, [pc, #356]	@ (8009844 <_printf_i+0x238>)
 80096de:	230a      	movs	r3, #10
 80096e0:	e011      	b.n	8009706 <_printf_i+0xfa>
 80096e2:	6821      	ldr	r1, [r4, #0]
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	0608      	lsls	r0, r1, #24
 80096e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096ec:	d402      	bmi.n	80096f4 <_printf_i+0xe8>
 80096ee:	0649      	lsls	r1, r1, #25
 80096f0:	bf48      	it	mi
 80096f2:	b2ad      	uxthmi	r5, r5
 80096f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096f6:	4853      	ldr	r0, [pc, #332]	@ (8009844 <_printf_i+0x238>)
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	bf14      	ite	ne
 80096fc:	230a      	movne	r3, #10
 80096fe:	2308      	moveq	r3, #8
 8009700:	2100      	movs	r1, #0
 8009702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009706:	6866      	ldr	r6, [r4, #4]
 8009708:	60a6      	str	r6, [r4, #8]
 800970a:	2e00      	cmp	r6, #0
 800970c:	bfa2      	ittt	ge
 800970e:	6821      	ldrge	r1, [r4, #0]
 8009710:	f021 0104 	bicge.w	r1, r1, #4
 8009714:	6021      	strge	r1, [r4, #0]
 8009716:	b90d      	cbnz	r5, 800971c <_printf_i+0x110>
 8009718:	2e00      	cmp	r6, #0
 800971a:	d04b      	beq.n	80097b4 <_printf_i+0x1a8>
 800971c:	4616      	mov	r6, r2
 800971e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009722:	fb03 5711 	mls	r7, r3, r1, r5
 8009726:	5dc7      	ldrb	r7, [r0, r7]
 8009728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800972c:	462f      	mov	r7, r5
 800972e:	42bb      	cmp	r3, r7
 8009730:	460d      	mov	r5, r1
 8009732:	d9f4      	bls.n	800971e <_printf_i+0x112>
 8009734:	2b08      	cmp	r3, #8
 8009736:	d10b      	bne.n	8009750 <_printf_i+0x144>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	07df      	lsls	r7, r3, #31
 800973c:	d508      	bpl.n	8009750 <_printf_i+0x144>
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	4299      	cmp	r1, r3
 8009744:	bfde      	ittt	le
 8009746:	2330      	movle	r3, #48	@ 0x30
 8009748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800974c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009750:	1b92      	subs	r2, r2, r6
 8009752:	6122      	str	r2, [r4, #16]
 8009754:	f8cd a000 	str.w	sl, [sp]
 8009758:	464b      	mov	r3, r9
 800975a:	aa03      	add	r2, sp, #12
 800975c:	4621      	mov	r1, r4
 800975e:	4640      	mov	r0, r8
 8009760:	f7ff fee6 	bl	8009530 <_printf_common>
 8009764:	3001      	adds	r0, #1
 8009766:	d14a      	bne.n	80097fe <_printf_i+0x1f2>
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	b004      	add	sp, #16
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f043 0320 	orr.w	r3, r3, #32
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	4833      	ldr	r0, [pc, #204]	@ (8009848 <_printf_i+0x23c>)
 800977c:	2778      	movs	r7, #120	@ 0x78
 800977e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	6831      	ldr	r1, [r6, #0]
 8009786:	061f      	lsls	r7, r3, #24
 8009788:	f851 5b04 	ldr.w	r5, [r1], #4
 800978c:	d402      	bmi.n	8009794 <_printf_i+0x188>
 800978e:	065f      	lsls	r7, r3, #25
 8009790:	bf48      	it	mi
 8009792:	b2ad      	uxthmi	r5, r5
 8009794:	6031      	str	r1, [r6, #0]
 8009796:	07d9      	lsls	r1, r3, #31
 8009798:	bf44      	itt	mi
 800979a:	f043 0320 	orrmi.w	r3, r3, #32
 800979e:	6023      	strmi	r3, [r4, #0]
 80097a0:	b11d      	cbz	r5, 80097aa <_printf_i+0x19e>
 80097a2:	2310      	movs	r3, #16
 80097a4:	e7ac      	b.n	8009700 <_printf_i+0xf4>
 80097a6:	4827      	ldr	r0, [pc, #156]	@ (8009844 <_printf_i+0x238>)
 80097a8:	e7e9      	b.n	800977e <_printf_i+0x172>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f023 0320 	bic.w	r3, r3, #32
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	e7f6      	b.n	80097a2 <_printf_i+0x196>
 80097b4:	4616      	mov	r6, r2
 80097b6:	e7bd      	b.n	8009734 <_printf_i+0x128>
 80097b8:	6833      	ldr	r3, [r6, #0]
 80097ba:	6825      	ldr	r5, [r4, #0]
 80097bc:	6961      	ldr	r1, [r4, #20]
 80097be:	1d18      	adds	r0, r3, #4
 80097c0:	6030      	str	r0, [r6, #0]
 80097c2:	062e      	lsls	r6, r5, #24
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	d501      	bpl.n	80097cc <_printf_i+0x1c0>
 80097c8:	6019      	str	r1, [r3, #0]
 80097ca:	e002      	b.n	80097d2 <_printf_i+0x1c6>
 80097cc:	0668      	lsls	r0, r5, #25
 80097ce:	d5fb      	bpl.n	80097c8 <_printf_i+0x1bc>
 80097d0:	8019      	strh	r1, [r3, #0]
 80097d2:	2300      	movs	r3, #0
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	4616      	mov	r6, r2
 80097d8:	e7bc      	b.n	8009754 <_printf_i+0x148>
 80097da:	6833      	ldr	r3, [r6, #0]
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	6032      	str	r2, [r6, #0]
 80097e0:	681e      	ldr	r6, [r3, #0]
 80097e2:	6862      	ldr	r2, [r4, #4]
 80097e4:	2100      	movs	r1, #0
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7f6 fd1a 	bl	8000220 <memchr>
 80097ec:	b108      	cbz	r0, 80097f2 <_printf_i+0x1e6>
 80097ee:	1b80      	subs	r0, r0, r6
 80097f0:	6060      	str	r0, [r4, #4]
 80097f2:	6863      	ldr	r3, [r4, #4]
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	2300      	movs	r3, #0
 80097f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097fc:	e7aa      	b.n	8009754 <_printf_i+0x148>
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d0ad      	beq.n	8009768 <_printf_i+0x15c>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	079b      	lsls	r3, r3, #30
 8009810:	d413      	bmi.n	800983a <_printf_i+0x22e>
 8009812:	68e0      	ldr	r0, [r4, #12]
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	4298      	cmp	r0, r3
 8009818:	bfb8      	it	lt
 800981a:	4618      	movlt	r0, r3
 800981c:	e7a6      	b.n	800976c <_printf_i+0x160>
 800981e:	2301      	movs	r3, #1
 8009820:	4632      	mov	r2, r6
 8009822:	4649      	mov	r1, r9
 8009824:	4640      	mov	r0, r8
 8009826:	47d0      	blx	sl
 8009828:	3001      	adds	r0, #1
 800982a:	d09d      	beq.n	8009768 <_printf_i+0x15c>
 800982c:	3501      	adds	r5, #1
 800982e:	68e3      	ldr	r3, [r4, #12]
 8009830:	9903      	ldr	r1, [sp, #12]
 8009832:	1a5b      	subs	r3, r3, r1
 8009834:	42ab      	cmp	r3, r5
 8009836:	dcf2      	bgt.n	800981e <_printf_i+0x212>
 8009838:	e7eb      	b.n	8009812 <_printf_i+0x206>
 800983a:	2500      	movs	r5, #0
 800983c:	f104 0619 	add.w	r6, r4, #25
 8009840:	e7f5      	b.n	800982e <_printf_i+0x222>
 8009842:	bf00      	nop
 8009844:	0800d727 	.word	0x0800d727
 8009848:	0800d738 	.word	0x0800d738

0800984c <_scanf_float>:
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	b087      	sub	sp, #28
 8009852:	4617      	mov	r7, r2
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	688b      	ldr	r3, [r1, #8]
 8009858:	1e5a      	subs	r2, r3, #1
 800985a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800985e:	bf81      	itttt	hi
 8009860:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009864:	eb03 0b05 	addhi.w	fp, r3, r5
 8009868:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800986c:	608b      	strhi	r3, [r1, #8]
 800986e:	680b      	ldr	r3, [r1, #0]
 8009870:	460a      	mov	r2, r1
 8009872:	f04f 0500 	mov.w	r5, #0
 8009876:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800987a:	f842 3b1c 	str.w	r3, [r2], #28
 800987e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009882:	4680      	mov	r8, r0
 8009884:	460c      	mov	r4, r1
 8009886:	bf98      	it	ls
 8009888:	f04f 0b00 	movls.w	fp, #0
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	4616      	mov	r6, r2
 8009890:	46aa      	mov	sl, r5
 8009892:	46a9      	mov	r9, r5
 8009894:	9502      	str	r5, [sp, #8]
 8009896:	68a2      	ldr	r2, [r4, #8]
 8009898:	b152      	cbz	r2, 80098b0 <_scanf_float+0x64>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b4e      	cmp	r3, #78	@ 0x4e
 80098a0:	d864      	bhi.n	800996c <_scanf_float+0x120>
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d83c      	bhi.n	8009920 <_scanf_float+0xd4>
 80098a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80098aa:	b2c8      	uxtb	r0, r1
 80098ac:	280e      	cmp	r0, #14
 80098ae:	d93a      	bls.n	8009926 <_scanf_float+0xda>
 80098b0:	f1b9 0f00 	cmp.w	r9, #0
 80098b4:	d003      	beq.n	80098be <_scanf_float+0x72>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098c2:	f1ba 0f01 	cmp.w	sl, #1
 80098c6:	f200 8117 	bhi.w	8009af8 <_scanf_float+0x2ac>
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	429e      	cmp	r6, r3
 80098ce:	f200 8108 	bhi.w	8009ae2 <_scanf_float+0x296>
 80098d2:	2001      	movs	r0, #1
 80098d4:	b007      	add	sp, #28
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80098de:	2a0d      	cmp	r2, #13
 80098e0:	d8e6      	bhi.n	80098b0 <_scanf_float+0x64>
 80098e2:	a101      	add	r1, pc, #4	@ (adr r1, 80098e8 <_scanf_float+0x9c>)
 80098e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098e8:	08009a2f 	.word	0x08009a2f
 80098ec:	080098b1 	.word	0x080098b1
 80098f0:	080098b1 	.word	0x080098b1
 80098f4:	080098b1 	.word	0x080098b1
 80098f8:	08009a8f 	.word	0x08009a8f
 80098fc:	08009a67 	.word	0x08009a67
 8009900:	080098b1 	.word	0x080098b1
 8009904:	080098b1 	.word	0x080098b1
 8009908:	08009a3d 	.word	0x08009a3d
 800990c:	080098b1 	.word	0x080098b1
 8009910:	080098b1 	.word	0x080098b1
 8009914:	080098b1 	.word	0x080098b1
 8009918:	080098b1 	.word	0x080098b1
 800991c:	080099f5 	.word	0x080099f5
 8009920:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009924:	e7db      	b.n	80098de <_scanf_float+0x92>
 8009926:	290e      	cmp	r1, #14
 8009928:	d8c2      	bhi.n	80098b0 <_scanf_float+0x64>
 800992a:	a001      	add	r0, pc, #4	@ (adr r0, 8009930 <_scanf_float+0xe4>)
 800992c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009930:	080099e5 	.word	0x080099e5
 8009934:	080098b1 	.word	0x080098b1
 8009938:	080099e5 	.word	0x080099e5
 800993c:	08009a7b 	.word	0x08009a7b
 8009940:	080098b1 	.word	0x080098b1
 8009944:	0800998d 	.word	0x0800998d
 8009948:	080099cb 	.word	0x080099cb
 800994c:	080099cb 	.word	0x080099cb
 8009950:	080099cb 	.word	0x080099cb
 8009954:	080099cb 	.word	0x080099cb
 8009958:	080099cb 	.word	0x080099cb
 800995c:	080099cb 	.word	0x080099cb
 8009960:	080099cb 	.word	0x080099cb
 8009964:	080099cb 	.word	0x080099cb
 8009968:	080099cb 	.word	0x080099cb
 800996c:	2b6e      	cmp	r3, #110	@ 0x6e
 800996e:	d809      	bhi.n	8009984 <_scanf_float+0x138>
 8009970:	2b60      	cmp	r3, #96	@ 0x60
 8009972:	d8b2      	bhi.n	80098da <_scanf_float+0x8e>
 8009974:	2b54      	cmp	r3, #84	@ 0x54
 8009976:	d07b      	beq.n	8009a70 <_scanf_float+0x224>
 8009978:	2b59      	cmp	r3, #89	@ 0x59
 800997a:	d199      	bne.n	80098b0 <_scanf_float+0x64>
 800997c:	2d07      	cmp	r5, #7
 800997e:	d197      	bne.n	80098b0 <_scanf_float+0x64>
 8009980:	2508      	movs	r5, #8
 8009982:	e02c      	b.n	80099de <_scanf_float+0x192>
 8009984:	2b74      	cmp	r3, #116	@ 0x74
 8009986:	d073      	beq.n	8009a70 <_scanf_float+0x224>
 8009988:	2b79      	cmp	r3, #121	@ 0x79
 800998a:	e7f6      	b.n	800997a <_scanf_float+0x12e>
 800998c:	6821      	ldr	r1, [r4, #0]
 800998e:	05c8      	lsls	r0, r1, #23
 8009990:	d51b      	bpl.n	80099ca <_scanf_float+0x17e>
 8009992:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009996:	6021      	str	r1, [r4, #0]
 8009998:	f109 0901 	add.w	r9, r9, #1
 800999c:	f1bb 0f00 	cmp.w	fp, #0
 80099a0:	d003      	beq.n	80099aa <_scanf_float+0x15e>
 80099a2:	3201      	adds	r2, #1
 80099a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099a8:	60a2      	str	r2, [r4, #8]
 80099aa:	68a3      	ldr	r3, [r4, #8]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	60a3      	str	r3, [r4, #8]
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	3301      	adds	r3, #1
 80099b4:	6123      	str	r3, [r4, #16]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	f340 8087 	ble.w	8009ad0 <_scanf_float+0x284>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	3301      	adds	r3, #1
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	e765      	b.n	8009896 <_scanf_float+0x4a>
 80099ca:	eb1a 0105 	adds.w	r1, sl, r5
 80099ce:	f47f af6f 	bne.w	80098b0 <_scanf_float+0x64>
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80099d8:	6022      	str	r2, [r4, #0]
 80099da:	460d      	mov	r5, r1
 80099dc:	468a      	mov	sl, r1
 80099de:	f806 3b01 	strb.w	r3, [r6], #1
 80099e2:	e7e2      	b.n	80099aa <_scanf_float+0x15e>
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	0610      	lsls	r0, r2, #24
 80099e8:	f57f af62 	bpl.w	80098b0 <_scanf_float+0x64>
 80099ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099f0:	6022      	str	r2, [r4, #0]
 80099f2:	e7f4      	b.n	80099de <_scanf_float+0x192>
 80099f4:	f1ba 0f00 	cmp.w	sl, #0
 80099f8:	d10e      	bne.n	8009a18 <_scanf_float+0x1cc>
 80099fa:	f1b9 0f00 	cmp.w	r9, #0
 80099fe:	d10e      	bne.n	8009a1e <_scanf_float+0x1d2>
 8009a00:	6822      	ldr	r2, [r4, #0]
 8009a02:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a06:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a0a:	d108      	bne.n	8009a1e <_scanf_float+0x1d2>
 8009a0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a10:	6022      	str	r2, [r4, #0]
 8009a12:	f04f 0a01 	mov.w	sl, #1
 8009a16:	e7e2      	b.n	80099de <_scanf_float+0x192>
 8009a18:	f1ba 0f02 	cmp.w	sl, #2
 8009a1c:	d055      	beq.n	8009aca <_scanf_float+0x27e>
 8009a1e:	2d01      	cmp	r5, #1
 8009a20:	d002      	beq.n	8009a28 <_scanf_float+0x1dc>
 8009a22:	2d04      	cmp	r5, #4
 8009a24:	f47f af44 	bne.w	80098b0 <_scanf_float+0x64>
 8009a28:	3501      	adds	r5, #1
 8009a2a:	b2ed      	uxtb	r5, r5
 8009a2c:	e7d7      	b.n	80099de <_scanf_float+0x192>
 8009a2e:	f1ba 0f01 	cmp.w	sl, #1
 8009a32:	f47f af3d 	bne.w	80098b0 <_scanf_float+0x64>
 8009a36:	f04f 0a02 	mov.w	sl, #2
 8009a3a:	e7d0      	b.n	80099de <_scanf_float+0x192>
 8009a3c:	b97d      	cbnz	r5, 8009a5e <_scanf_float+0x212>
 8009a3e:	f1b9 0f00 	cmp.w	r9, #0
 8009a42:	f47f af38 	bne.w	80098b6 <_scanf_float+0x6a>
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a50:	f040 8108 	bne.w	8009c64 <_scanf_float+0x418>
 8009a54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a58:	6022      	str	r2, [r4, #0]
 8009a5a:	2501      	movs	r5, #1
 8009a5c:	e7bf      	b.n	80099de <_scanf_float+0x192>
 8009a5e:	2d03      	cmp	r5, #3
 8009a60:	d0e2      	beq.n	8009a28 <_scanf_float+0x1dc>
 8009a62:	2d05      	cmp	r5, #5
 8009a64:	e7de      	b.n	8009a24 <_scanf_float+0x1d8>
 8009a66:	2d02      	cmp	r5, #2
 8009a68:	f47f af22 	bne.w	80098b0 <_scanf_float+0x64>
 8009a6c:	2503      	movs	r5, #3
 8009a6e:	e7b6      	b.n	80099de <_scanf_float+0x192>
 8009a70:	2d06      	cmp	r5, #6
 8009a72:	f47f af1d 	bne.w	80098b0 <_scanf_float+0x64>
 8009a76:	2507      	movs	r5, #7
 8009a78:	e7b1      	b.n	80099de <_scanf_float+0x192>
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	0591      	lsls	r1, r2, #22
 8009a7e:	f57f af17 	bpl.w	80098b0 <_scanf_float+0x64>
 8009a82:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a86:	6022      	str	r2, [r4, #0]
 8009a88:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a8c:	e7a7      	b.n	80099de <_scanf_float+0x192>
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009a94:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009a98:	d006      	beq.n	8009aa8 <_scanf_float+0x25c>
 8009a9a:	0550      	lsls	r0, r2, #21
 8009a9c:	f57f af08 	bpl.w	80098b0 <_scanf_float+0x64>
 8009aa0:	f1b9 0f00 	cmp.w	r9, #0
 8009aa4:	f000 80de 	beq.w	8009c64 <_scanf_float+0x418>
 8009aa8:	0591      	lsls	r1, r2, #22
 8009aaa:	bf58      	it	pl
 8009aac:	9902      	ldrpl	r1, [sp, #8]
 8009aae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ab2:	bf58      	it	pl
 8009ab4:	eba9 0101 	subpl.w	r1, r9, r1
 8009ab8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009abc:	bf58      	it	pl
 8009abe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ac2:	6022      	str	r2, [r4, #0]
 8009ac4:	f04f 0900 	mov.w	r9, #0
 8009ac8:	e789      	b.n	80099de <_scanf_float+0x192>
 8009aca:	f04f 0a03 	mov.w	sl, #3
 8009ace:	e786      	b.n	80099de <_scanf_float+0x192>
 8009ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	4798      	blx	r3
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f43f aedb 	beq.w	8009896 <_scanf_float+0x4a>
 8009ae0:	e6e6      	b.n	80098b0 <_scanf_float+0x64>
 8009ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aea:	463a      	mov	r2, r7
 8009aec:	4640      	mov	r0, r8
 8009aee:	4798      	blx	r3
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	6123      	str	r3, [r4, #16]
 8009af6:	e6e8      	b.n	80098ca <_scanf_float+0x7e>
 8009af8:	1e6b      	subs	r3, r5, #1
 8009afa:	2b06      	cmp	r3, #6
 8009afc:	d824      	bhi.n	8009b48 <_scanf_float+0x2fc>
 8009afe:	2d02      	cmp	r5, #2
 8009b00:	d836      	bhi.n	8009b70 <_scanf_float+0x324>
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	429e      	cmp	r6, r3
 8009b06:	f67f aee4 	bls.w	80098d2 <_scanf_float+0x86>
 8009b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b12:	463a      	mov	r2, r7
 8009b14:	4640      	mov	r0, r8
 8009b16:	4798      	blx	r3
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	6123      	str	r3, [r4, #16]
 8009b1e:	e7f0      	b.n	8009b02 <_scanf_float+0x2b6>
 8009b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b28:	463a      	mov	r2, r7
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4798      	blx	r3
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	6123      	str	r3, [r4, #16]
 8009b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b38:	fa5f fa8a 	uxtb.w	sl, sl
 8009b3c:	f1ba 0f02 	cmp.w	sl, #2
 8009b40:	d1ee      	bne.n	8009b20 <_scanf_float+0x2d4>
 8009b42:	3d03      	subs	r5, #3
 8009b44:	b2ed      	uxtb	r5, r5
 8009b46:	1b76      	subs	r6, r6, r5
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	05da      	lsls	r2, r3, #23
 8009b4c:	d530      	bpl.n	8009bb0 <_scanf_float+0x364>
 8009b4e:	055b      	lsls	r3, r3, #21
 8009b50:	d511      	bpl.n	8009b76 <_scanf_float+0x32a>
 8009b52:	9b01      	ldr	r3, [sp, #4]
 8009b54:	429e      	cmp	r6, r3
 8009b56:	f67f aebc 	bls.w	80098d2 <_scanf_float+0x86>
 8009b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b62:	463a      	mov	r2, r7
 8009b64:	4640      	mov	r0, r8
 8009b66:	4798      	blx	r3
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	e7f0      	b.n	8009b52 <_scanf_float+0x306>
 8009b70:	46aa      	mov	sl, r5
 8009b72:	46b3      	mov	fp, r6
 8009b74:	e7de      	b.n	8009b34 <_scanf_float+0x2e8>
 8009b76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	2965      	cmp	r1, #101	@ 0x65
 8009b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b82:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	d00c      	beq.n	8009ba4 <_scanf_float+0x358>
 8009b8a:	2945      	cmp	r1, #69	@ 0x45
 8009b8c:	d00a      	beq.n	8009ba4 <_scanf_float+0x358>
 8009b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b92:	463a      	mov	r2, r7
 8009b94:	4640      	mov	r0, r8
 8009b96:	4798      	blx	r3
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	1eb5      	subs	r5, r6, #2
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ba8:	463a      	mov	r2, r7
 8009baa:	4640      	mov	r0, r8
 8009bac:	4798      	blx	r3
 8009bae:	462e      	mov	r6, r5
 8009bb0:	6822      	ldr	r2, [r4, #0]
 8009bb2:	f012 0210 	ands.w	r2, r2, #16
 8009bb6:	d001      	beq.n	8009bbc <_scanf_float+0x370>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e68b      	b.n	80098d4 <_scanf_float+0x88>
 8009bbc:	7032      	strb	r2, [r6, #0]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc8:	d11c      	bne.n	8009c04 <_scanf_float+0x3b8>
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	454b      	cmp	r3, r9
 8009bce:	eba3 0209 	sub.w	r2, r3, r9
 8009bd2:	d123      	bne.n	8009c1c <_scanf_float+0x3d0>
 8009bd4:	9901      	ldr	r1, [sp, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4640      	mov	r0, r8
 8009bda:	f002 fc05 	bl	800c3e8 <_strtod_r>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	6821      	ldr	r1, [r4, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f011 0f02 	tst.w	r1, #2
 8009be8:	ec57 6b10 	vmov	r6, r7, d0
 8009bec:	f103 0204 	add.w	r2, r3, #4
 8009bf0:	d01f      	beq.n	8009c32 <_scanf_float+0x3e6>
 8009bf2:	9903      	ldr	r1, [sp, #12]
 8009bf4:	600a      	str	r2, [r1, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	e9c3 6700 	strd	r6, r7, [r3]
 8009bfc:	68e3      	ldr	r3, [r4, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60e3      	str	r3, [r4, #12]
 8009c02:	e7d9      	b.n	8009bb8 <_scanf_float+0x36c>
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0e4      	beq.n	8009bd4 <_scanf_float+0x388>
 8009c0a:	9905      	ldr	r1, [sp, #20]
 8009c0c:	230a      	movs	r3, #10
 8009c0e:	3101      	adds	r1, #1
 8009c10:	4640      	mov	r0, r8
 8009c12:	f7ff f9b7 	bl	8008f84 <_strtol_r>
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	9e05      	ldr	r6, [sp, #20]
 8009c1a:	1ac2      	subs	r2, r0, r3
 8009c1c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c20:	429e      	cmp	r6, r3
 8009c22:	bf28      	it	cs
 8009c24:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c28:	4910      	ldr	r1, [pc, #64]	@ (8009c6c <_scanf_float+0x420>)
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f000 f8e4 	bl	8009df8 <siprintf>
 8009c30:	e7d0      	b.n	8009bd4 <_scanf_float+0x388>
 8009c32:	f011 0f04 	tst.w	r1, #4
 8009c36:	9903      	ldr	r1, [sp, #12]
 8009c38:	600a      	str	r2, [r1, #0]
 8009c3a:	d1dc      	bne.n	8009bf6 <_scanf_float+0x3aa>
 8009c3c:	681d      	ldr	r5, [r3, #0]
 8009c3e:	4632      	mov	r2, r6
 8009c40:	463b      	mov	r3, r7
 8009c42:	4630      	mov	r0, r6
 8009c44:	4639      	mov	r1, r7
 8009c46:	f7f6 ff99 	bl	8000b7c <__aeabi_dcmpun>
 8009c4a:	b128      	cbz	r0, 8009c58 <_scanf_float+0x40c>
 8009c4c:	4808      	ldr	r0, [pc, #32]	@ (8009c70 <_scanf_float+0x424>)
 8009c4e:	f000 f9c5 	bl	8009fdc <nanf>
 8009c52:	ed85 0a00 	vstr	s0, [r5]
 8009c56:	e7d1      	b.n	8009bfc <_scanf_float+0x3b0>
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 ffec 	bl	8000c38 <__aeabi_d2f>
 8009c60:	6028      	str	r0, [r5, #0]
 8009c62:	e7cb      	b.n	8009bfc <_scanf_float+0x3b0>
 8009c64:	f04f 0900 	mov.w	r9, #0
 8009c68:	e629      	b.n	80098be <_scanf_float+0x72>
 8009c6a:	bf00      	nop
 8009c6c:	0800d749 	.word	0x0800d749
 8009c70:	0800d9dc 	.word	0x0800d9dc

08009c74 <std>:
 8009c74:	2300      	movs	r3, #0
 8009c76:	b510      	push	{r4, lr}
 8009c78:	4604      	mov	r4, r0
 8009c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c82:	6083      	str	r3, [r0, #8]
 8009c84:	8181      	strh	r1, [r0, #12]
 8009c86:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c88:	81c2      	strh	r2, [r0, #14]
 8009c8a:	6183      	str	r3, [r0, #24]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	2208      	movs	r2, #8
 8009c90:	305c      	adds	r0, #92	@ 0x5c
 8009c92:	f000 f914 	bl	8009ebe <memset>
 8009c96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ccc <std+0x58>)
 8009c98:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <std+0x5c>)
 8009c9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd4 <std+0x60>)
 8009ca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd8 <std+0x64>)
 8009ca4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <std+0x68>)
 8009ca8:	6224      	str	r4, [r4, #32]
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d006      	beq.n	8009cbc <std+0x48>
 8009cae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cb2:	4294      	cmp	r4, r2
 8009cb4:	d002      	beq.n	8009cbc <std+0x48>
 8009cb6:	33d0      	adds	r3, #208	@ 0xd0
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	d105      	bne.n	8009cc8 <std+0x54>
 8009cbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc4:	f000 b986 	b.w	8009fd4 <__retarget_lock_init_recursive>
 8009cc8:	bd10      	pop	{r4, pc}
 8009cca:	bf00      	nop
 8009ccc:	08009e39 	.word	0x08009e39
 8009cd0:	08009e5b 	.word	0x08009e5b
 8009cd4:	08009e93 	.word	0x08009e93
 8009cd8:	08009eb7 	.word	0x08009eb7
 8009cdc:	20000838 	.word	0x20000838

08009ce0 <stdio_exit_handler>:
 8009ce0:	4a02      	ldr	r2, [pc, #8]	@ (8009cec <stdio_exit_handler+0xc>)
 8009ce2:	4903      	ldr	r1, [pc, #12]	@ (8009cf0 <stdio_exit_handler+0x10>)
 8009ce4:	4803      	ldr	r0, [pc, #12]	@ (8009cf4 <stdio_exit_handler+0x14>)
 8009ce6:	f000 b869 	b.w	8009dbc <_fwalk_sglue>
 8009cea:	bf00      	nop
 8009cec:	20000024 	.word	0x20000024
 8009cf0:	0800c7ad 	.word	0x0800c7ad
 8009cf4:	20000034 	.word	0x20000034

08009cf8 <cleanup_stdio>:
 8009cf8:	6841      	ldr	r1, [r0, #4]
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8009d2c <cleanup_stdio+0x34>)
 8009cfc:	4299      	cmp	r1, r3
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	4604      	mov	r4, r0
 8009d02:	d001      	beq.n	8009d08 <cleanup_stdio+0x10>
 8009d04:	f002 fd52 	bl	800c7ac <_fflush_r>
 8009d08:	68a1      	ldr	r1, [r4, #8]
 8009d0a:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <cleanup_stdio+0x38>)
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	d002      	beq.n	8009d16 <cleanup_stdio+0x1e>
 8009d10:	4620      	mov	r0, r4
 8009d12:	f002 fd4b 	bl	800c7ac <_fflush_r>
 8009d16:	68e1      	ldr	r1, [r4, #12]
 8009d18:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <cleanup_stdio+0x3c>)
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	d004      	beq.n	8009d28 <cleanup_stdio+0x30>
 8009d1e:	4620      	mov	r0, r4
 8009d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d24:	f002 bd42 	b.w	800c7ac <_fflush_r>
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000838 	.word	0x20000838
 8009d30:	200008a0 	.word	0x200008a0
 8009d34:	20000908 	.word	0x20000908

08009d38 <global_stdio_init.part.0>:
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d68 <global_stdio_init.part.0+0x30>)
 8009d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8009d6c <global_stdio_init.part.0+0x34>)
 8009d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8009d70 <global_stdio_init.part.0+0x38>)
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	4620      	mov	r0, r4
 8009d44:	2200      	movs	r2, #0
 8009d46:	2104      	movs	r1, #4
 8009d48:	f7ff ff94 	bl	8009c74 <std>
 8009d4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d50:	2201      	movs	r2, #1
 8009d52:	2109      	movs	r1, #9
 8009d54:	f7ff ff8e 	bl	8009c74 <std>
 8009d58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d62:	2112      	movs	r1, #18
 8009d64:	f7ff bf86 	b.w	8009c74 <std>
 8009d68:	20000970 	.word	0x20000970
 8009d6c:	20000838 	.word	0x20000838
 8009d70:	08009ce1 	.word	0x08009ce1

08009d74 <__sfp_lock_acquire>:
 8009d74:	4801      	ldr	r0, [pc, #4]	@ (8009d7c <__sfp_lock_acquire+0x8>)
 8009d76:	f000 b92e 	b.w	8009fd6 <__retarget_lock_acquire_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	20000979 	.word	0x20000979

08009d80 <__sfp_lock_release>:
 8009d80:	4801      	ldr	r0, [pc, #4]	@ (8009d88 <__sfp_lock_release+0x8>)
 8009d82:	f000 b929 	b.w	8009fd8 <__retarget_lock_release_recursive>
 8009d86:	bf00      	nop
 8009d88:	20000979 	.word	0x20000979

08009d8c <__sinit>:
 8009d8c:	b510      	push	{r4, lr}
 8009d8e:	4604      	mov	r4, r0
 8009d90:	f7ff fff0 	bl	8009d74 <__sfp_lock_acquire>
 8009d94:	6a23      	ldr	r3, [r4, #32]
 8009d96:	b11b      	cbz	r3, 8009da0 <__sinit+0x14>
 8009d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d9c:	f7ff bff0 	b.w	8009d80 <__sfp_lock_release>
 8009da0:	4b04      	ldr	r3, [pc, #16]	@ (8009db4 <__sinit+0x28>)
 8009da2:	6223      	str	r3, [r4, #32]
 8009da4:	4b04      	ldr	r3, [pc, #16]	@ (8009db8 <__sinit+0x2c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1f5      	bne.n	8009d98 <__sinit+0xc>
 8009dac:	f7ff ffc4 	bl	8009d38 <global_stdio_init.part.0>
 8009db0:	e7f2      	b.n	8009d98 <__sinit+0xc>
 8009db2:	bf00      	nop
 8009db4:	08009cf9 	.word	0x08009cf9
 8009db8:	20000970 	.word	0x20000970

08009dbc <_fwalk_sglue>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	4688      	mov	r8, r1
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	2600      	movs	r6, #0
 8009dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8009dd0:	d505      	bpl.n	8009dde <_fwalk_sglue+0x22>
 8009dd2:	6824      	ldr	r4, [r4, #0]
 8009dd4:	2c00      	cmp	r4, #0
 8009dd6:	d1f7      	bne.n	8009dc8 <_fwalk_sglue+0xc>
 8009dd8:	4630      	mov	r0, r6
 8009dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d907      	bls.n	8009df4 <_fwalk_sglue+0x38>
 8009de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009de8:	3301      	adds	r3, #1
 8009dea:	d003      	beq.n	8009df4 <_fwalk_sglue+0x38>
 8009dec:	4629      	mov	r1, r5
 8009dee:	4638      	mov	r0, r7
 8009df0:	47c0      	blx	r8
 8009df2:	4306      	orrs	r6, r0
 8009df4:	3568      	adds	r5, #104	@ 0x68
 8009df6:	e7e9      	b.n	8009dcc <_fwalk_sglue+0x10>

08009df8 <siprintf>:
 8009df8:	b40e      	push	{r1, r2, r3}
 8009dfa:	b500      	push	{lr}
 8009dfc:	b09c      	sub	sp, #112	@ 0x70
 8009dfe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e00:	9002      	str	r0, [sp, #8]
 8009e02:	9006      	str	r0, [sp, #24]
 8009e04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e08:	4809      	ldr	r0, [pc, #36]	@ (8009e30 <siprintf+0x38>)
 8009e0a:	9107      	str	r1, [sp, #28]
 8009e0c:	9104      	str	r1, [sp, #16]
 8009e0e:	4909      	ldr	r1, [pc, #36]	@ (8009e34 <siprintf+0x3c>)
 8009e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e14:	9105      	str	r1, [sp, #20]
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	a902      	add	r1, sp, #8
 8009e1c:	f002 fb46 	bl	800c4ac <_svfiprintf_r>
 8009e20:	9b02      	ldr	r3, [sp, #8]
 8009e22:	2200      	movs	r2, #0
 8009e24:	701a      	strb	r2, [r3, #0]
 8009e26:	b01c      	add	sp, #112	@ 0x70
 8009e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e2c:	b003      	add	sp, #12
 8009e2e:	4770      	bx	lr
 8009e30:	20000030 	.word	0x20000030
 8009e34:	ffff0208 	.word	0xffff0208

08009e38 <__sread>:
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	f000 f87a 	bl	8009f38 <_read_r>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	bfab      	itete	ge
 8009e48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e4c:	181b      	addge	r3, r3, r0
 8009e4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e52:	bfac      	ite	ge
 8009e54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e56:	81a3      	strhlt	r3, [r4, #12]
 8009e58:	bd10      	pop	{r4, pc}

08009e5a <__swrite>:
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	461f      	mov	r7, r3
 8009e60:	898b      	ldrh	r3, [r1, #12]
 8009e62:	05db      	lsls	r3, r3, #23
 8009e64:	4605      	mov	r5, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	4616      	mov	r6, r2
 8009e6a:	d505      	bpl.n	8009e78 <__swrite+0x1e>
 8009e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e70:	2302      	movs	r3, #2
 8009e72:	2200      	movs	r2, #0
 8009e74:	f000 f84e 	bl	8009f14 <_lseek_r>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	4632      	mov	r2, r6
 8009e86:	463b      	mov	r3, r7
 8009e88:	4628      	mov	r0, r5
 8009e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8e:	f000 b865 	b.w	8009f5c <_write_r>

08009e92 <__sseek>:
 8009e92:	b510      	push	{r4, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	f000 f83b 	bl	8009f14 <_lseek_r>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	bf15      	itete	ne
 8009ea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009eaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009eae:	81a3      	strheq	r3, [r4, #12]
 8009eb0:	bf18      	it	ne
 8009eb2:	81a3      	strhne	r3, [r4, #12]
 8009eb4:	bd10      	pop	{r4, pc}

08009eb6 <__sclose>:
 8009eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eba:	f000 b81b 	b.w	8009ef4 <_close_r>

08009ebe <memset>:
 8009ebe:	4402      	add	r2, r0
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d100      	bne.n	8009ec8 <memset+0xa>
 8009ec6:	4770      	bx	lr
 8009ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8009ecc:	e7f9      	b.n	8009ec2 <memset+0x4>

08009ece <strcat>:
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	7814      	ldrb	r4, [r2, #0]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	3201      	adds	r2, #1
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	d1fa      	bne.n	8009ed2 <strcat+0x4>
 8009edc:	3b01      	subs	r3, #1
 8009ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d1f9      	bne.n	8009ede <strcat+0x10>
 8009eea:	bd10      	pop	{r4, pc}

08009eec <_localeconv_r>:
 8009eec:	4800      	ldr	r0, [pc, #0]	@ (8009ef0 <_localeconv_r+0x4>)
 8009eee:	4770      	bx	lr
 8009ef0:	20000170 	.word	0x20000170

08009ef4 <_close_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d06      	ldr	r5, [pc, #24]	@ (8009f10 <_close_r+0x1c>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f7 ffc0 	bl	8001e84 <_close>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_close_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_close_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	20000974 	.word	0x20000974

08009f14 <_lseek_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	@ (8009f34 <_lseek_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f7 ffd5 	bl	8001ed2 <_lseek>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_lseek_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_lseek_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	20000974 	.word	0x20000974

08009f38 <_read_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d07      	ldr	r5, [pc, #28]	@ (8009f58 <_read_r+0x20>)
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	4608      	mov	r0, r1
 8009f40:	4611      	mov	r1, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	602a      	str	r2, [r5, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f7f7 ff63 	bl	8001e12 <_read>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_read_r+0x1e>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_read_r+0x1e>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	20000974 	.word	0x20000974

08009f5c <_write_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	@ (8009f7c <_write_r+0x20>)
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f7f7 ff6e 	bl	8001e4c <_write>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_write_r+0x1e>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_write_r+0x1e>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20000974 	.word	0x20000974

08009f80 <__errno>:
 8009f80:	4b01      	ldr	r3, [pc, #4]	@ (8009f88 <__errno+0x8>)
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20000030 	.word	0x20000030

08009f8c <__libc_init_array>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8009fc4 <__libc_init_array+0x38>)
 8009f90:	4c0d      	ldr	r4, [pc, #52]	@ (8009fc8 <__libc_init_array+0x3c>)
 8009f92:	1b64      	subs	r4, r4, r5
 8009f94:	10a4      	asrs	r4, r4, #2
 8009f96:	2600      	movs	r6, #0
 8009f98:	42a6      	cmp	r6, r4
 8009f9a:	d109      	bne.n	8009fb0 <__libc_init_array+0x24>
 8009f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8009fcc <__libc_init_array+0x40>)
 8009f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8009fd0 <__libc_init_array+0x44>)
 8009fa0:	f003 faf4 	bl	800d58c <_init>
 8009fa4:	1b64      	subs	r4, r4, r5
 8009fa6:	10a4      	asrs	r4, r4, #2
 8009fa8:	2600      	movs	r6, #0
 8009faa:	42a6      	cmp	r6, r4
 8009fac:	d105      	bne.n	8009fba <__libc_init_array+0x2e>
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb4:	4798      	blx	r3
 8009fb6:	3601      	adds	r6, #1
 8009fb8:	e7ee      	b.n	8009f98 <__libc_init_array+0xc>
 8009fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fbe:	4798      	blx	r3
 8009fc0:	3601      	adds	r6, #1
 8009fc2:	e7f2      	b.n	8009faa <__libc_init_array+0x1e>
 8009fc4:	0800da48 	.word	0x0800da48
 8009fc8:	0800da48 	.word	0x0800da48
 8009fcc:	0800da48 	.word	0x0800da48
 8009fd0:	0800da4c 	.word	0x0800da4c

08009fd4 <__retarget_lock_init_recursive>:
 8009fd4:	4770      	bx	lr

08009fd6 <__retarget_lock_acquire_recursive>:
 8009fd6:	4770      	bx	lr

08009fd8 <__retarget_lock_release_recursive>:
 8009fd8:	4770      	bx	lr
	...

08009fdc <nanf>:
 8009fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009fe4 <nanf+0x8>
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	7fc00000 	.word	0x7fc00000

08009fe8 <quorem>:
 8009fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	6903      	ldr	r3, [r0, #16]
 8009fee:	690c      	ldr	r4, [r1, #16]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	4607      	mov	r7, r0
 8009ff4:	db7e      	blt.n	800a0f4 <quorem+0x10c>
 8009ff6:	3c01      	subs	r4, #1
 8009ff8:	f101 0814 	add.w	r8, r1, #20
 8009ffc:	00a3      	lsls	r3, r4, #2
 8009ffe:	f100 0514 	add.w	r5, r0, #20
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a00e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a012:	3301      	adds	r3, #1
 800a014:	429a      	cmp	r2, r3
 800a016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a01a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a01e:	d32e      	bcc.n	800a07e <quorem+0x96>
 800a020:	f04f 0a00 	mov.w	sl, #0
 800a024:	46c4      	mov	ip, r8
 800a026:	46ae      	mov	lr, r5
 800a028:	46d3      	mov	fp, sl
 800a02a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a02e:	b298      	uxth	r0, r3
 800a030:	fb06 a000 	mla	r0, r6, r0, sl
 800a034:	0c02      	lsrs	r2, r0, #16
 800a036:	0c1b      	lsrs	r3, r3, #16
 800a038:	fb06 2303 	mla	r3, r6, r3, r2
 800a03c:	f8de 2000 	ldr.w	r2, [lr]
 800a040:	b280      	uxth	r0, r0
 800a042:	b292      	uxth	r2, r2
 800a044:	1a12      	subs	r2, r2, r0
 800a046:	445a      	add	r2, fp
 800a048:	f8de 0000 	ldr.w	r0, [lr]
 800a04c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a050:	b29b      	uxth	r3, r3
 800a052:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a056:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a05a:	b292      	uxth	r2, r2
 800a05c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a060:	45e1      	cmp	r9, ip
 800a062:	f84e 2b04 	str.w	r2, [lr], #4
 800a066:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a06a:	d2de      	bcs.n	800a02a <quorem+0x42>
 800a06c:	9b00      	ldr	r3, [sp, #0]
 800a06e:	58eb      	ldr	r3, [r5, r3]
 800a070:	b92b      	cbnz	r3, 800a07e <quorem+0x96>
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	3b04      	subs	r3, #4
 800a076:	429d      	cmp	r5, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	d32f      	bcc.n	800a0dc <quorem+0xf4>
 800a07c:	613c      	str	r4, [r7, #16]
 800a07e:	4638      	mov	r0, r7
 800a080:	f001 f9c2 	bl	800b408 <__mcmp>
 800a084:	2800      	cmp	r0, #0
 800a086:	db25      	blt.n	800a0d4 <quorem+0xec>
 800a088:	4629      	mov	r1, r5
 800a08a:	2000      	movs	r0, #0
 800a08c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a090:	f8d1 c000 	ldr.w	ip, [r1]
 800a094:	fa1f fe82 	uxth.w	lr, r2
 800a098:	fa1f f38c 	uxth.w	r3, ip
 800a09c:	eba3 030e 	sub.w	r3, r3, lr
 800a0a0:	4403      	add	r3, r0
 800a0a2:	0c12      	lsrs	r2, r2, #16
 800a0a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b2:	45c1      	cmp	r9, r8
 800a0b4:	f841 3b04 	str.w	r3, [r1], #4
 800a0b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0bc:	d2e6      	bcs.n	800a08c <quorem+0xa4>
 800a0be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0c6:	b922      	cbnz	r2, 800a0d2 <quorem+0xea>
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	d30b      	bcc.n	800a0e8 <quorem+0x100>
 800a0d0:	613c      	str	r4, [r7, #16]
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	3b04      	subs	r3, #4
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	d1cb      	bne.n	800a07c <quorem+0x94>
 800a0e4:	3c01      	subs	r4, #1
 800a0e6:	e7c6      	b.n	800a076 <quorem+0x8e>
 800a0e8:	6812      	ldr	r2, [r2, #0]
 800a0ea:	3b04      	subs	r3, #4
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	d1ef      	bne.n	800a0d0 <quorem+0xe8>
 800a0f0:	3c01      	subs	r4, #1
 800a0f2:	e7ea      	b.n	800a0ca <quorem+0xe2>
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	e7ee      	b.n	800a0d6 <quorem+0xee>

0800a0f8 <_dtoa_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	69c7      	ldr	r7, [r0, #28]
 800a0fe:	b099      	sub	sp, #100	@ 0x64
 800a100:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a104:	ec55 4b10 	vmov	r4, r5, d0
 800a108:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a10a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a10c:	4683      	mov	fp, r0
 800a10e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a110:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a112:	b97f      	cbnz	r7, 800a134 <_dtoa_r+0x3c>
 800a114:	2010      	movs	r0, #16
 800a116:	f000 fdfd 	bl	800ad14 <malloc>
 800a11a:	4602      	mov	r2, r0
 800a11c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a120:	b920      	cbnz	r0, 800a12c <_dtoa_r+0x34>
 800a122:	4ba7      	ldr	r3, [pc, #668]	@ (800a3c0 <_dtoa_r+0x2c8>)
 800a124:	21ef      	movs	r1, #239	@ 0xef
 800a126:	48a7      	ldr	r0, [pc, #668]	@ (800a3c4 <_dtoa_r+0x2cc>)
 800a128:	f002 fbba 	bl	800c8a0 <__assert_func>
 800a12c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a130:	6007      	str	r7, [r0, #0]
 800a132:	60c7      	str	r7, [r0, #12]
 800a134:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a138:	6819      	ldr	r1, [r3, #0]
 800a13a:	b159      	cbz	r1, 800a154 <_dtoa_r+0x5c>
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	604a      	str	r2, [r1, #4]
 800a140:	2301      	movs	r3, #1
 800a142:	4093      	lsls	r3, r2
 800a144:	608b      	str	r3, [r1, #8]
 800a146:	4658      	mov	r0, fp
 800a148:	f000 feda 	bl	800af00 <_Bfree>
 800a14c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	1e2b      	subs	r3, r5, #0
 800a156:	bfb9      	ittee	lt
 800a158:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a15c:	9303      	strlt	r3, [sp, #12]
 800a15e:	2300      	movge	r3, #0
 800a160:	6033      	strge	r3, [r6, #0]
 800a162:	9f03      	ldr	r7, [sp, #12]
 800a164:	4b98      	ldr	r3, [pc, #608]	@ (800a3c8 <_dtoa_r+0x2d0>)
 800a166:	bfbc      	itt	lt
 800a168:	2201      	movlt	r2, #1
 800a16a:	6032      	strlt	r2, [r6, #0]
 800a16c:	43bb      	bics	r3, r7
 800a16e:	d112      	bne.n	800a196 <_dtoa_r+0x9e>
 800a170:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a172:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a17c:	4323      	orrs	r3, r4
 800a17e:	f000 854d 	beq.w	800ac1c <_dtoa_r+0xb24>
 800a182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a184:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3dc <_dtoa_r+0x2e4>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 854f 	beq.w	800ac2c <_dtoa_r+0xb34>
 800a18e:	f10a 0303 	add.w	r3, sl, #3
 800a192:	f000 bd49 	b.w	800ac28 <_dtoa_r+0xb30>
 800a196:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a19a:	2200      	movs	r2, #0
 800a19c:	ec51 0b17 	vmov	r0, r1, d7
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a1a6:	f7f6 fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	b158      	cbz	r0, 800a1c6 <_dtoa_r+0xce>
 800a1ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1b6:	b113      	cbz	r3, 800a1be <_dtoa_r+0xc6>
 800a1b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1ba:	4b84      	ldr	r3, [pc, #528]	@ (800a3cc <_dtoa_r+0x2d4>)
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a3e0 <_dtoa_r+0x2e8>
 800a1c2:	f000 bd33 	b.w	800ac2c <_dtoa_r+0xb34>
 800a1c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1ca:	aa16      	add	r2, sp, #88	@ 0x58
 800a1cc:	a917      	add	r1, sp, #92	@ 0x5c
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	f001 fa3a 	bl	800b648 <__d2b>
 800a1d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1d8:	4681      	mov	r9, r0
 800a1da:	2e00      	cmp	r6, #0
 800a1dc:	d077      	beq.n	800a2ce <_dtoa_r+0x1d6>
 800a1de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a1e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a1f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a1f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	4b74      	ldr	r3, [pc, #464]	@ (800a3d0 <_dtoa_r+0x2d8>)
 800a1fe:	f7f6 f86b 	bl	80002d8 <__aeabi_dsub>
 800a202:	a369      	add	r3, pc, #420	@ (adr r3, 800a3a8 <_dtoa_r+0x2b0>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 fa1e 	bl	8000648 <__aeabi_dmul>
 800a20c:	a368      	add	r3, pc, #416	@ (adr r3, 800a3b0 <_dtoa_r+0x2b8>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f6 f863 	bl	80002dc <__adddf3>
 800a216:	4604      	mov	r4, r0
 800a218:	4630      	mov	r0, r6
 800a21a:	460d      	mov	r5, r1
 800a21c:	f7f6 f9aa 	bl	8000574 <__aeabi_i2d>
 800a220:	a365      	add	r3, pc, #404	@ (adr r3, 800a3b8 <_dtoa_r+0x2c0>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f6 fa0f 	bl	8000648 <__aeabi_dmul>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	f7f6 f853 	bl	80002dc <__adddf3>
 800a236:	4604      	mov	r4, r0
 800a238:	460d      	mov	r5, r1
 800a23a:	f7f6 fcb5 	bl	8000ba8 <__aeabi_d2iz>
 800a23e:	2200      	movs	r2, #0
 800a240:	4607      	mov	r7, r0
 800a242:	2300      	movs	r3, #0
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 fc70 	bl	8000b2c <__aeabi_dcmplt>
 800a24c:	b140      	cbz	r0, 800a260 <_dtoa_r+0x168>
 800a24e:	4638      	mov	r0, r7
 800a250:	f7f6 f990 	bl	8000574 <__aeabi_i2d>
 800a254:	4622      	mov	r2, r4
 800a256:	462b      	mov	r3, r5
 800a258:	f7f6 fc5e 	bl	8000b18 <__aeabi_dcmpeq>
 800a25c:	b900      	cbnz	r0, 800a260 <_dtoa_r+0x168>
 800a25e:	3f01      	subs	r7, #1
 800a260:	2f16      	cmp	r7, #22
 800a262:	d851      	bhi.n	800a308 <_dtoa_r+0x210>
 800a264:	4b5b      	ldr	r3, [pc, #364]	@ (800a3d4 <_dtoa_r+0x2dc>)
 800a266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a272:	f7f6 fc5b 	bl	8000b2c <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	d048      	beq.n	800a30c <_dtoa_r+0x214>
 800a27a:	3f01      	subs	r7, #1
 800a27c:	2300      	movs	r3, #0
 800a27e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a280:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a282:	1b9b      	subs	r3, r3, r6
 800a284:	1e5a      	subs	r2, r3, #1
 800a286:	bf44      	itt	mi
 800a288:	f1c3 0801 	rsbmi	r8, r3, #1
 800a28c:	2300      	movmi	r3, #0
 800a28e:	9208      	str	r2, [sp, #32]
 800a290:	bf54      	ite	pl
 800a292:	f04f 0800 	movpl.w	r8, #0
 800a296:	9308      	strmi	r3, [sp, #32]
 800a298:	2f00      	cmp	r7, #0
 800a29a:	db39      	blt.n	800a310 <_dtoa_r+0x218>
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a2a0:	443b      	add	r3, r7
 800a2a2:	9308      	str	r3, [sp, #32]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2aa:	2b09      	cmp	r3, #9
 800a2ac:	d864      	bhi.n	800a378 <_dtoa_r+0x280>
 800a2ae:	2b05      	cmp	r3, #5
 800a2b0:	bfc4      	itt	gt
 800a2b2:	3b04      	subgt	r3, #4
 800a2b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b8:	f1a3 0302 	sub.w	r3, r3, #2
 800a2bc:	bfcc      	ite	gt
 800a2be:	2400      	movgt	r4, #0
 800a2c0:	2401      	movle	r4, #1
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d863      	bhi.n	800a38e <_dtoa_r+0x296>
 800a2c6:	e8df f003 	tbb	[pc, r3]
 800a2ca:	372a      	.short	0x372a
 800a2cc:	5535      	.short	0x5535
 800a2ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a2d2:	441e      	add	r6, r3
 800a2d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	bfc1      	itttt	gt
 800a2dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a2e0:	409f      	lslgt	r7, r3
 800a2e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a2e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a2ea:	bfd6      	itet	le
 800a2ec:	f1c3 0320 	rsble	r3, r3, #32
 800a2f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a2f4:	fa04 f003 	lslle.w	r0, r4, r3
 800a2f8:	f7f6 f92c 	bl	8000554 <__aeabi_ui2d>
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a302:	3e01      	subs	r6, #1
 800a304:	9214      	str	r2, [sp, #80]	@ 0x50
 800a306:	e777      	b.n	800a1f8 <_dtoa_r+0x100>
 800a308:	2301      	movs	r3, #1
 800a30a:	e7b8      	b.n	800a27e <_dtoa_r+0x186>
 800a30c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a30e:	e7b7      	b.n	800a280 <_dtoa_r+0x188>
 800a310:	427b      	negs	r3, r7
 800a312:	930a      	str	r3, [sp, #40]	@ 0x28
 800a314:	2300      	movs	r3, #0
 800a316:	eba8 0807 	sub.w	r8, r8, r7
 800a31a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a31c:	e7c4      	b.n	800a2a8 <_dtoa_r+0x1b0>
 800a31e:	2300      	movs	r3, #0
 800a320:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a324:	2b00      	cmp	r3, #0
 800a326:	dc35      	bgt.n	800a394 <_dtoa_r+0x29c>
 800a328:	2301      	movs	r3, #1
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	9307      	str	r3, [sp, #28]
 800a32e:	461a      	mov	r2, r3
 800a330:	920e      	str	r2, [sp, #56]	@ 0x38
 800a332:	e00b      	b.n	800a34c <_dtoa_r+0x254>
 800a334:	2301      	movs	r3, #1
 800a336:	e7f3      	b.n	800a320 <_dtoa_r+0x228>
 800a338:	2300      	movs	r3, #0
 800a33a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a33e:	18fb      	adds	r3, r7, r3
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	2b01      	cmp	r3, #1
 800a346:	9307      	str	r3, [sp, #28]
 800a348:	bfb8      	it	lt
 800a34a:	2301      	movlt	r3, #1
 800a34c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a350:	2100      	movs	r1, #0
 800a352:	2204      	movs	r2, #4
 800a354:	f102 0514 	add.w	r5, r2, #20
 800a358:	429d      	cmp	r5, r3
 800a35a:	d91f      	bls.n	800a39c <_dtoa_r+0x2a4>
 800a35c:	6041      	str	r1, [r0, #4]
 800a35e:	4658      	mov	r0, fp
 800a360:	f000 fd8e 	bl	800ae80 <_Balloc>
 800a364:	4682      	mov	sl, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	d13c      	bne.n	800a3e4 <_dtoa_r+0x2ec>
 800a36a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3d8 <_dtoa_r+0x2e0>)
 800a36c:	4602      	mov	r2, r0
 800a36e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a372:	e6d8      	b.n	800a126 <_dtoa_r+0x2e>
 800a374:	2301      	movs	r3, #1
 800a376:	e7e0      	b.n	800a33a <_dtoa_r+0x242>
 800a378:	2401      	movs	r4, #1
 800a37a:	2300      	movs	r3, #0
 800a37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	2200      	movs	r2, #0
 800a38a:	2312      	movs	r3, #18
 800a38c:	e7d0      	b.n	800a330 <_dtoa_r+0x238>
 800a38e:	2301      	movs	r3, #1
 800a390:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a392:	e7f5      	b.n	800a380 <_dtoa_r+0x288>
 800a394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	9307      	str	r3, [sp, #28]
 800a39a:	e7d7      	b.n	800a34c <_dtoa_r+0x254>
 800a39c:	3101      	adds	r1, #1
 800a39e:	0052      	lsls	r2, r2, #1
 800a3a0:	e7d8      	b.n	800a354 <_dtoa_r+0x25c>
 800a3a2:	bf00      	nop
 800a3a4:	f3af 8000 	nop.w
 800a3a8:	636f4361 	.word	0x636f4361
 800a3ac:	3fd287a7 	.word	0x3fd287a7
 800a3b0:	8b60c8b3 	.word	0x8b60c8b3
 800a3b4:	3fc68a28 	.word	0x3fc68a28
 800a3b8:	509f79fb 	.word	0x509f79fb
 800a3bc:	3fd34413 	.word	0x3fd34413
 800a3c0:	0800d75b 	.word	0x0800d75b
 800a3c4:	0800d772 	.word	0x0800d772
 800a3c8:	7ff00000 	.word	0x7ff00000
 800a3cc:	0800d726 	.word	0x0800d726
 800a3d0:	3ff80000 	.word	0x3ff80000
 800a3d4:	0800d868 	.word	0x0800d868
 800a3d8:	0800d7ca 	.word	0x0800d7ca
 800a3dc:	0800d757 	.word	0x0800d757
 800a3e0:	0800d725 	.word	0x0800d725
 800a3e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3e8:	6018      	str	r0, [r3, #0]
 800a3ea:	9b07      	ldr	r3, [sp, #28]
 800a3ec:	2b0e      	cmp	r3, #14
 800a3ee:	f200 80a4 	bhi.w	800a53a <_dtoa_r+0x442>
 800a3f2:	2c00      	cmp	r4, #0
 800a3f4:	f000 80a1 	beq.w	800a53a <_dtoa_r+0x442>
 800a3f8:	2f00      	cmp	r7, #0
 800a3fa:	dd33      	ble.n	800a464 <_dtoa_r+0x36c>
 800a3fc:	4bad      	ldr	r3, [pc, #692]	@ (800a6b4 <_dtoa_r+0x5bc>)
 800a3fe:	f007 020f 	and.w	r2, r7, #15
 800a402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a406:	ed93 7b00 	vldr	d7, [r3]
 800a40a:	05f8      	lsls	r0, r7, #23
 800a40c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a410:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a414:	d516      	bpl.n	800a444 <_dtoa_r+0x34c>
 800a416:	4ba8      	ldr	r3, [pc, #672]	@ (800a6b8 <_dtoa_r+0x5c0>)
 800a418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a41c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a420:	f7f6 fa3c 	bl	800089c <__aeabi_ddiv>
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	f004 040f 	and.w	r4, r4, #15
 800a42c:	2603      	movs	r6, #3
 800a42e:	4da2      	ldr	r5, [pc, #648]	@ (800a6b8 <_dtoa_r+0x5c0>)
 800a430:	b954      	cbnz	r4, 800a448 <_dtoa_r+0x350>
 800a432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a43a:	f7f6 fa2f 	bl	800089c <__aeabi_ddiv>
 800a43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a442:	e028      	b.n	800a496 <_dtoa_r+0x39e>
 800a444:	2602      	movs	r6, #2
 800a446:	e7f2      	b.n	800a42e <_dtoa_r+0x336>
 800a448:	07e1      	lsls	r1, r4, #31
 800a44a:	d508      	bpl.n	800a45e <_dtoa_r+0x366>
 800a44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a450:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a454:	f7f6 f8f8 	bl	8000648 <__aeabi_dmul>
 800a458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a45c:	3601      	adds	r6, #1
 800a45e:	1064      	asrs	r4, r4, #1
 800a460:	3508      	adds	r5, #8
 800a462:	e7e5      	b.n	800a430 <_dtoa_r+0x338>
 800a464:	f000 80d2 	beq.w	800a60c <_dtoa_r+0x514>
 800a468:	427c      	negs	r4, r7
 800a46a:	4b92      	ldr	r3, [pc, #584]	@ (800a6b4 <_dtoa_r+0x5bc>)
 800a46c:	4d92      	ldr	r5, [pc, #584]	@ (800a6b8 <_dtoa_r+0x5c0>)
 800a46e:	f004 020f 	and.w	r2, r4, #15
 800a472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a47e:	f7f6 f8e3 	bl	8000648 <__aeabi_dmul>
 800a482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a486:	1124      	asrs	r4, r4, #4
 800a488:	2300      	movs	r3, #0
 800a48a:	2602      	movs	r6, #2
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	f040 80b2 	bne.w	800a5f6 <_dtoa_r+0x4fe>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1d3      	bne.n	800a43e <_dtoa_r+0x346>
 800a496:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a498:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80b7 	beq.w	800a610 <_dtoa_r+0x518>
 800a4a2:	4b86      	ldr	r3, [pc, #536]	@ (800a6bc <_dtoa_r+0x5c4>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 fb3f 	bl	8000b2c <__aeabi_dcmplt>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f000 80ae 	beq.w	800a610 <_dtoa_r+0x518>
 800a4b4:	9b07      	ldr	r3, [sp, #28]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 80aa 	beq.w	800a610 <_dtoa_r+0x518>
 800a4bc:	9b00      	ldr	r3, [sp, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dd37      	ble.n	800a532 <_dtoa_r+0x43a>
 800a4c2:	1e7b      	subs	r3, r7, #1
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4b7d      	ldr	r3, [pc, #500]	@ (800a6c0 <_dtoa_r+0x5c8>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f7f6 f8bb 	bl	8000648 <__aeabi_dmul>
 800a4d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4d6:	9c00      	ldr	r4, [sp, #0]
 800a4d8:	3601      	adds	r6, #1
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7f6 f84a 	bl	8000574 <__aeabi_i2d>
 800a4e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4e4:	f7f6 f8b0 	bl	8000648 <__aeabi_dmul>
 800a4e8:	4b76      	ldr	r3, [pc, #472]	@ (800a6c4 <_dtoa_r+0x5cc>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f7f5 fef6 	bl	80002dc <__adddf3>
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	f040 808d 	bne.w	800a616 <_dtoa_r+0x51e>
 800a4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a500:	4b71      	ldr	r3, [pc, #452]	@ (800a6c8 <_dtoa_r+0x5d0>)
 800a502:	2200      	movs	r2, #0
 800a504:	f7f5 fee8 	bl	80002d8 <__aeabi_dsub>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a510:	462a      	mov	r2, r5
 800a512:	4633      	mov	r3, r6
 800a514:	f7f6 fb28 	bl	8000b68 <__aeabi_dcmpgt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	f040 828b 	bne.w	800aa34 <_dtoa_r+0x93c>
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	462a      	mov	r2, r5
 800a524:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a528:	f7f6 fb00 	bl	8000b2c <__aeabi_dcmplt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	f040 8128 	bne.w	800a782 <_dtoa_r+0x68a>
 800a532:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a536:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a53a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f2c0 815a 	blt.w	800a7f6 <_dtoa_r+0x6fe>
 800a542:	2f0e      	cmp	r7, #14
 800a544:	f300 8157 	bgt.w	800a7f6 <_dtoa_r+0x6fe>
 800a548:	4b5a      	ldr	r3, [pc, #360]	@ (800a6b4 <_dtoa_r+0x5bc>)
 800a54a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a54e:	ed93 7b00 	vldr	d7, [r3]
 800a552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a554:	2b00      	cmp	r3, #0
 800a556:	ed8d 7b00 	vstr	d7, [sp]
 800a55a:	da03      	bge.n	800a564 <_dtoa_r+0x46c>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f340 8101 	ble.w	800a766 <_dtoa_r+0x66e>
 800a564:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a568:	4656      	mov	r6, sl
 800a56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a56e:	4620      	mov	r0, r4
 800a570:	4629      	mov	r1, r5
 800a572:	f7f6 f993 	bl	800089c <__aeabi_ddiv>
 800a576:	f7f6 fb17 	bl	8000ba8 <__aeabi_d2iz>
 800a57a:	4680      	mov	r8, r0
 800a57c:	f7f5 fffa 	bl	8000574 <__aeabi_i2d>
 800a580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a584:	f7f6 f860 	bl	8000648 <__aeabi_dmul>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a594:	f7f5 fea0 	bl	80002d8 <__aeabi_dsub>
 800a598:	f806 4b01 	strb.w	r4, [r6], #1
 800a59c:	9d07      	ldr	r5, [sp, #28]
 800a59e:	eba6 040a 	sub.w	r4, r6, sl
 800a5a2:	42a5      	cmp	r5, r4
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	f040 8117 	bne.w	800a7da <_dtoa_r+0x6e2>
 800a5ac:	f7f5 fe96 	bl	80002dc <__adddf3>
 800a5b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	460d      	mov	r5, r1
 800a5b8:	f7f6 fad6 	bl	8000b68 <__aeabi_dcmpgt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f040 80f9 	bne.w	800a7b4 <_dtoa_r+0x6bc>
 800a5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	f7f6 faa5 	bl	8000b18 <__aeabi_dcmpeq>
 800a5ce:	b118      	cbz	r0, 800a5d8 <_dtoa_r+0x4e0>
 800a5d0:	f018 0f01 	tst.w	r8, #1
 800a5d4:	f040 80ee 	bne.w	800a7b4 <_dtoa_r+0x6bc>
 800a5d8:	4649      	mov	r1, r9
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f000 fc90 	bl	800af00 <_Bfree>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	7033      	strb	r3, [r6, #0]
 800a5e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5e6:	3701      	adds	r7, #1
 800a5e8:	601f      	str	r7, [r3, #0]
 800a5ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 831d 	beq.w	800ac2c <_dtoa_r+0xb34>
 800a5f2:	601e      	str	r6, [r3, #0]
 800a5f4:	e31a      	b.n	800ac2c <_dtoa_r+0xb34>
 800a5f6:	07e2      	lsls	r2, r4, #31
 800a5f8:	d505      	bpl.n	800a606 <_dtoa_r+0x50e>
 800a5fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5fe:	f7f6 f823 	bl	8000648 <__aeabi_dmul>
 800a602:	3601      	adds	r6, #1
 800a604:	2301      	movs	r3, #1
 800a606:	1064      	asrs	r4, r4, #1
 800a608:	3508      	adds	r5, #8
 800a60a:	e73f      	b.n	800a48c <_dtoa_r+0x394>
 800a60c:	2602      	movs	r6, #2
 800a60e:	e742      	b.n	800a496 <_dtoa_r+0x39e>
 800a610:	9c07      	ldr	r4, [sp, #28]
 800a612:	9704      	str	r7, [sp, #16]
 800a614:	e761      	b.n	800a4da <_dtoa_r+0x3e2>
 800a616:	4b27      	ldr	r3, [pc, #156]	@ (800a6b4 <_dtoa_r+0x5bc>)
 800a618:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a61a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a61e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a622:	4454      	add	r4, sl
 800a624:	2900      	cmp	r1, #0
 800a626:	d053      	beq.n	800a6d0 <_dtoa_r+0x5d8>
 800a628:	4928      	ldr	r1, [pc, #160]	@ (800a6cc <_dtoa_r+0x5d4>)
 800a62a:	2000      	movs	r0, #0
 800a62c:	f7f6 f936 	bl	800089c <__aeabi_ddiv>
 800a630:	4633      	mov	r3, r6
 800a632:	462a      	mov	r2, r5
 800a634:	f7f5 fe50 	bl	80002d8 <__aeabi_dsub>
 800a638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a63c:	4656      	mov	r6, sl
 800a63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a642:	f7f6 fab1 	bl	8000ba8 <__aeabi_d2iz>
 800a646:	4605      	mov	r5, r0
 800a648:	f7f5 ff94 	bl	8000574 <__aeabi_i2d>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a654:	f7f5 fe40 	bl	80002d8 <__aeabi_dsub>
 800a658:	3530      	adds	r5, #48	@ 0x30
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a662:	f806 5b01 	strb.w	r5, [r6], #1
 800a666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a66a:	f7f6 fa5f 	bl	8000b2c <__aeabi_dcmplt>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d171      	bne.n	800a756 <_dtoa_r+0x65e>
 800a672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a676:	4911      	ldr	r1, [pc, #68]	@ (800a6bc <_dtoa_r+0x5c4>)
 800a678:	2000      	movs	r0, #0
 800a67a:	f7f5 fe2d 	bl	80002d8 <__aeabi_dsub>
 800a67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a682:	f7f6 fa53 	bl	8000b2c <__aeabi_dcmplt>
 800a686:	2800      	cmp	r0, #0
 800a688:	f040 8095 	bne.w	800a7b6 <_dtoa_r+0x6be>
 800a68c:	42a6      	cmp	r6, r4
 800a68e:	f43f af50 	beq.w	800a532 <_dtoa_r+0x43a>
 800a692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a696:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c0 <_dtoa_r+0x5c8>)
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ffd5 	bl	8000648 <__aeabi_dmul>
 800a69e:	4b08      	ldr	r3, [pc, #32]	@ (800a6c0 <_dtoa_r+0x5c8>)
 800a6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6aa:	f7f5 ffcd 	bl	8000648 <__aeabi_dmul>
 800a6ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b2:	e7c4      	b.n	800a63e <_dtoa_r+0x546>
 800a6b4:	0800d868 	.word	0x0800d868
 800a6b8:	0800d840 	.word	0x0800d840
 800a6bc:	3ff00000 	.word	0x3ff00000
 800a6c0:	40240000 	.word	0x40240000
 800a6c4:	401c0000 	.word	0x401c0000
 800a6c8:	40140000 	.word	0x40140000
 800a6cc:	3fe00000 	.word	0x3fe00000
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f7f5 ffb8 	bl	8000648 <__aeabi_dmul>
 800a6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a6de:	4656      	mov	r6, sl
 800a6e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e4:	f7f6 fa60 	bl	8000ba8 <__aeabi_d2iz>
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	f7f5 ff43 	bl	8000574 <__aeabi_i2d>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f6:	f7f5 fdef 	bl	80002d8 <__aeabi_dsub>
 800a6fa:	3530      	adds	r5, #48	@ 0x30
 800a6fc:	f806 5b01 	strb.w	r5, [r6], #1
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	42a6      	cmp	r6, r4
 800a706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a70a:	f04f 0200 	mov.w	r2, #0
 800a70e:	d124      	bne.n	800a75a <_dtoa_r+0x662>
 800a710:	4bac      	ldr	r3, [pc, #688]	@ (800a9c4 <_dtoa_r+0x8cc>)
 800a712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a716:	f7f5 fde1 	bl	80002dc <__adddf3>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a722:	f7f6 fa21 	bl	8000b68 <__aeabi_dcmpgt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d145      	bne.n	800a7b6 <_dtoa_r+0x6be>
 800a72a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a72e:	49a5      	ldr	r1, [pc, #660]	@ (800a9c4 <_dtoa_r+0x8cc>)
 800a730:	2000      	movs	r0, #0
 800a732:	f7f5 fdd1 	bl	80002d8 <__aeabi_dsub>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a73e:	f7f6 f9f5 	bl	8000b2c <__aeabi_dcmplt>
 800a742:	2800      	cmp	r0, #0
 800a744:	f43f aef5 	beq.w	800a532 <_dtoa_r+0x43a>
 800a748:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a74a:	1e73      	subs	r3, r6, #1
 800a74c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a74e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a752:	2b30      	cmp	r3, #48	@ 0x30
 800a754:	d0f8      	beq.n	800a748 <_dtoa_r+0x650>
 800a756:	9f04      	ldr	r7, [sp, #16]
 800a758:	e73e      	b.n	800a5d8 <_dtoa_r+0x4e0>
 800a75a:	4b9b      	ldr	r3, [pc, #620]	@ (800a9c8 <_dtoa_r+0x8d0>)
 800a75c:	f7f5 ff74 	bl	8000648 <__aeabi_dmul>
 800a760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a764:	e7bc      	b.n	800a6e0 <_dtoa_r+0x5e8>
 800a766:	d10c      	bne.n	800a782 <_dtoa_r+0x68a>
 800a768:	4b98      	ldr	r3, [pc, #608]	@ (800a9cc <_dtoa_r+0x8d4>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a770:	f7f5 ff6a 	bl	8000648 <__aeabi_dmul>
 800a774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a778:	f7f6 f9ec 	bl	8000b54 <__aeabi_dcmpge>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f000 8157 	beq.w	800aa30 <_dtoa_r+0x938>
 800a782:	2400      	movs	r4, #0
 800a784:	4625      	mov	r5, r4
 800a786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a788:	43db      	mvns	r3, r3
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	4656      	mov	r6, sl
 800a78e:	2700      	movs	r7, #0
 800a790:	4621      	mov	r1, r4
 800a792:	4658      	mov	r0, fp
 800a794:	f000 fbb4 	bl	800af00 <_Bfree>
 800a798:	2d00      	cmp	r5, #0
 800a79a:	d0dc      	beq.n	800a756 <_dtoa_r+0x65e>
 800a79c:	b12f      	cbz	r7, 800a7aa <_dtoa_r+0x6b2>
 800a79e:	42af      	cmp	r7, r5
 800a7a0:	d003      	beq.n	800a7aa <_dtoa_r+0x6b2>
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	4658      	mov	r0, fp
 800a7a6:	f000 fbab 	bl	800af00 <_Bfree>
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	4658      	mov	r0, fp
 800a7ae:	f000 fba7 	bl	800af00 <_Bfree>
 800a7b2:	e7d0      	b.n	800a756 <_dtoa_r+0x65e>
 800a7b4:	9704      	str	r7, [sp, #16]
 800a7b6:	4633      	mov	r3, r6
 800a7b8:	461e      	mov	r6, r3
 800a7ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7be:	2a39      	cmp	r2, #57	@ 0x39
 800a7c0:	d107      	bne.n	800a7d2 <_dtoa_r+0x6da>
 800a7c2:	459a      	cmp	sl, r3
 800a7c4:	d1f8      	bne.n	800a7b8 <_dtoa_r+0x6c0>
 800a7c6:	9a04      	ldr	r2, [sp, #16]
 800a7c8:	3201      	adds	r2, #1
 800a7ca:	9204      	str	r2, [sp, #16]
 800a7cc:	2230      	movs	r2, #48	@ 0x30
 800a7ce:	f88a 2000 	strb.w	r2, [sl]
 800a7d2:	781a      	ldrb	r2, [r3, #0]
 800a7d4:	3201      	adds	r2, #1
 800a7d6:	701a      	strb	r2, [r3, #0]
 800a7d8:	e7bd      	b.n	800a756 <_dtoa_r+0x65e>
 800a7da:	4b7b      	ldr	r3, [pc, #492]	@ (800a9c8 <_dtoa_r+0x8d0>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f7f5 ff33 	bl	8000648 <__aeabi_dmul>
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	460d      	mov	r5, r1
 800a7ea:	f7f6 f995 	bl	8000b18 <__aeabi_dcmpeq>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f43f aebb 	beq.w	800a56a <_dtoa_r+0x472>
 800a7f4:	e6f0      	b.n	800a5d8 <_dtoa_r+0x4e0>
 800a7f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a7f8:	2a00      	cmp	r2, #0
 800a7fa:	f000 80db 	beq.w	800a9b4 <_dtoa_r+0x8bc>
 800a7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a800:	2a01      	cmp	r2, #1
 800a802:	f300 80bf 	bgt.w	800a984 <_dtoa_r+0x88c>
 800a806:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a808:	2a00      	cmp	r2, #0
 800a80a:	f000 80b7 	beq.w	800a97c <_dtoa_r+0x884>
 800a80e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a812:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a814:	4646      	mov	r6, r8
 800a816:	9a08      	ldr	r2, [sp, #32]
 800a818:	2101      	movs	r1, #1
 800a81a:	441a      	add	r2, r3
 800a81c:	4658      	mov	r0, fp
 800a81e:	4498      	add	r8, r3
 800a820:	9208      	str	r2, [sp, #32]
 800a822:	f000 fc6b 	bl	800b0fc <__i2b>
 800a826:	4605      	mov	r5, r0
 800a828:	b15e      	cbz	r6, 800a842 <_dtoa_r+0x74a>
 800a82a:	9b08      	ldr	r3, [sp, #32]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dd08      	ble.n	800a842 <_dtoa_r+0x74a>
 800a830:	42b3      	cmp	r3, r6
 800a832:	9a08      	ldr	r2, [sp, #32]
 800a834:	bfa8      	it	ge
 800a836:	4633      	movge	r3, r6
 800a838:	eba8 0803 	sub.w	r8, r8, r3
 800a83c:	1af6      	subs	r6, r6, r3
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	9308      	str	r3, [sp, #32]
 800a842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a844:	b1f3      	cbz	r3, 800a884 <_dtoa_r+0x78c>
 800a846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 80b7 	beq.w	800a9bc <_dtoa_r+0x8c4>
 800a84e:	b18c      	cbz	r4, 800a874 <_dtoa_r+0x77c>
 800a850:	4629      	mov	r1, r5
 800a852:	4622      	mov	r2, r4
 800a854:	4658      	mov	r0, fp
 800a856:	f000 fd11 	bl	800b27c <__pow5mult>
 800a85a:	464a      	mov	r2, r9
 800a85c:	4601      	mov	r1, r0
 800a85e:	4605      	mov	r5, r0
 800a860:	4658      	mov	r0, fp
 800a862:	f000 fc61 	bl	800b128 <__multiply>
 800a866:	4649      	mov	r1, r9
 800a868:	9004      	str	r0, [sp, #16]
 800a86a:	4658      	mov	r0, fp
 800a86c:	f000 fb48 	bl	800af00 <_Bfree>
 800a870:	9b04      	ldr	r3, [sp, #16]
 800a872:	4699      	mov	r9, r3
 800a874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a876:	1b1a      	subs	r2, r3, r4
 800a878:	d004      	beq.n	800a884 <_dtoa_r+0x78c>
 800a87a:	4649      	mov	r1, r9
 800a87c:	4658      	mov	r0, fp
 800a87e:	f000 fcfd 	bl	800b27c <__pow5mult>
 800a882:	4681      	mov	r9, r0
 800a884:	2101      	movs	r1, #1
 800a886:	4658      	mov	r0, fp
 800a888:	f000 fc38 	bl	800b0fc <__i2b>
 800a88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a88e:	4604      	mov	r4, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 81cf 	beq.w	800ac34 <_dtoa_r+0xb3c>
 800a896:	461a      	mov	r2, r3
 800a898:	4601      	mov	r1, r0
 800a89a:	4658      	mov	r0, fp
 800a89c:	f000 fcee 	bl	800b27c <__pow5mult>
 800a8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	f300 8095 	bgt.w	800a9d4 <_dtoa_r+0x8dc>
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f040 8087 	bne.w	800a9c0 <_dtoa_r+0x8c8>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f040 8089 	bne.w	800a9d0 <_dtoa_r+0x8d8>
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8c4:	0d1b      	lsrs	r3, r3, #20
 800a8c6:	051b      	lsls	r3, r3, #20
 800a8c8:	b12b      	cbz	r3, 800a8d6 <_dtoa_r+0x7de>
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	9308      	str	r3, [sp, #32]
 800a8d0:	f108 0801 	add.w	r8, r8, #1
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 81b0 	beq.w	800ac40 <_dtoa_r+0xb48>
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8e6:	6918      	ldr	r0, [r3, #16]
 800a8e8:	f000 fbbc 	bl	800b064 <__hi0bits>
 800a8ec:	f1c0 0020 	rsb	r0, r0, #32
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	4418      	add	r0, r3
 800a8f4:	f010 001f 	ands.w	r0, r0, #31
 800a8f8:	d077      	beq.n	800a9ea <_dtoa_r+0x8f2>
 800a8fa:	f1c0 0320 	rsb	r3, r0, #32
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	dd6b      	ble.n	800a9da <_dtoa_r+0x8e2>
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	f1c0 001c 	rsb	r0, r0, #28
 800a908:	4403      	add	r3, r0
 800a90a:	4480      	add	r8, r0
 800a90c:	4406      	add	r6, r0
 800a90e:	9308      	str	r3, [sp, #32]
 800a910:	f1b8 0f00 	cmp.w	r8, #0
 800a914:	dd05      	ble.n	800a922 <_dtoa_r+0x82a>
 800a916:	4649      	mov	r1, r9
 800a918:	4642      	mov	r2, r8
 800a91a:	4658      	mov	r0, fp
 800a91c:	f000 fd08 	bl	800b330 <__lshift>
 800a920:	4681      	mov	r9, r0
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd05      	ble.n	800a934 <_dtoa_r+0x83c>
 800a928:	4621      	mov	r1, r4
 800a92a:	461a      	mov	r2, r3
 800a92c:	4658      	mov	r0, fp
 800a92e:	f000 fcff 	bl	800b330 <__lshift>
 800a932:	4604      	mov	r4, r0
 800a934:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a936:	2b00      	cmp	r3, #0
 800a938:	d059      	beq.n	800a9ee <_dtoa_r+0x8f6>
 800a93a:	4621      	mov	r1, r4
 800a93c:	4648      	mov	r0, r9
 800a93e:	f000 fd63 	bl	800b408 <__mcmp>
 800a942:	2800      	cmp	r0, #0
 800a944:	da53      	bge.n	800a9ee <_dtoa_r+0x8f6>
 800a946:	1e7b      	subs	r3, r7, #1
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	4649      	mov	r1, r9
 800a94c:	2300      	movs	r3, #0
 800a94e:	220a      	movs	r2, #10
 800a950:	4658      	mov	r0, fp
 800a952:	f000 faf7 	bl	800af44 <__multadd>
 800a956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a958:	4681      	mov	r9, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 8172 	beq.w	800ac44 <_dtoa_r+0xb4c>
 800a960:	2300      	movs	r3, #0
 800a962:	4629      	mov	r1, r5
 800a964:	220a      	movs	r2, #10
 800a966:	4658      	mov	r0, fp
 800a968:	f000 faec 	bl	800af44 <__multadd>
 800a96c:	9b00      	ldr	r3, [sp, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	4605      	mov	r5, r0
 800a972:	dc67      	bgt.n	800aa44 <_dtoa_r+0x94c>
 800a974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a976:	2b02      	cmp	r3, #2
 800a978:	dc41      	bgt.n	800a9fe <_dtoa_r+0x906>
 800a97a:	e063      	b.n	800aa44 <_dtoa_r+0x94c>
 800a97c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a97e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a982:	e746      	b.n	800a812 <_dtoa_r+0x71a>
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	1e5c      	subs	r4, r3, #1
 800a988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	bfbf      	itttt	lt
 800a98e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a990:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a992:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a994:	1ae3      	sublt	r3, r4, r3
 800a996:	bfb4      	ite	lt
 800a998:	18d2      	addlt	r2, r2, r3
 800a99a:	1b1c      	subge	r4, r3, r4
 800a99c:	9b07      	ldr	r3, [sp, #28]
 800a99e:	bfbc      	itt	lt
 800a9a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a9a2:	2400      	movlt	r4, #0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bfb5      	itete	lt
 800a9a8:	eba8 0603 	sublt.w	r6, r8, r3
 800a9ac:	9b07      	ldrge	r3, [sp, #28]
 800a9ae:	2300      	movlt	r3, #0
 800a9b0:	4646      	movge	r6, r8
 800a9b2:	e730      	b.n	800a816 <_dtoa_r+0x71e>
 800a9b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a9b8:	4646      	mov	r6, r8
 800a9ba:	e735      	b.n	800a828 <_dtoa_r+0x730>
 800a9bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9be:	e75c      	b.n	800a87a <_dtoa_r+0x782>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e788      	b.n	800a8d6 <_dtoa_r+0x7de>
 800a9c4:	3fe00000 	.word	0x3fe00000
 800a9c8:	40240000 	.word	0x40240000
 800a9cc:	40140000 	.word	0x40140000
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	e780      	b.n	800a8d6 <_dtoa_r+0x7de>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9d8:	e782      	b.n	800a8e0 <_dtoa_r+0x7e8>
 800a9da:	d099      	beq.n	800a910 <_dtoa_r+0x818>
 800a9dc:	9a08      	ldr	r2, [sp, #32]
 800a9de:	331c      	adds	r3, #28
 800a9e0:	441a      	add	r2, r3
 800a9e2:	4498      	add	r8, r3
 800a9e4:	441e      	add	r6, r3
 800a9e6:	9208      	str	r2, [sp, #32]
 800a9e8:	e792      	b.n	800a910 <_dtoa_r+0x818>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	e7f6      	b.n	800a9dc <_dtoa_r+0x8e4>
 800a9ee:	9b07      	ldr	r3, [sp, #28]
 800a9f0:	9704      	str	r7, [sp, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dc20      	bgt.n	800aa38 <_dtoa_r+0x940>
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	dd1e      	ble.n	800aa3c <_dtoa_r+0x944>
 800a9fe:	9b00      	ldr	r3, [sp, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f47f aec0 	bne.w	800a786 <_dtoa_r+0x68e>
 800aa06:	4621      	mov	r1, r4
 800aa08:	2205      	movs	r2, #5
 800aa0a:	4658      	mov	r0, fp
 800aa0c:	f000 fa9a 	bl	800af44 <__multadd>
 800aa10:	4601      	mov	r1, r0
 800aa12:	4604      	mov	r4, r0
 800aa14:	4648      	mov	r0, r9
 800aa16:	f000 fcf7 	bl	800b408 <__mcmp>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f77f aeb3 	ble.w	800a786 <_dtoa_r+0x68e>
 800aa20:	4656      	mov	r6, sl
 800aa22:	2331      	movs	r3, #49	@ 0x31
 800aa24:	f806 3b01 	strb.w	r3, [r6], #1
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	e6ae      	b.n	800a78e <_dtoa_r+0x696>
 800aa30:	9c07      	ldr	r4, [sp, #28]
 800aa32:	9704      	str	r7, [sp, #16]
 800aa34:	4625      	mov	r5, r4
 800aa36:	e7f3      	b.n	800aa20 <_dtoa_r+0x928>
 800aa38:	9b07      	ldr	r3, [sp, #28]
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 8104 	beq.w	800ac4c <_dtoa_r+0xb54>
 800aa44:	2e00      	cmp	r6, #0
 800aa46:	dd05      	ble.n	800aa54 <_dtoa_r+0x95c>
 800aa48:	4629      	mov	r1, r5
 800aa4a:	4632      	mov	r2, r6
 800aa4c:	4658      	mov	r0, fp
 800aa4e:	f000 fc6f 	bl	800b330 <__lshift>
 800aa52:	4605      	mov	r5, r0
 800aa54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d05a      	beq.n	800ab10 <_dtoa_r+0xa18>
 800aa5a:	6869      	ldr	r1, [r5, #4]
 800aa5c:	4658      	mov	r0, fp
 800aa5e:	f000 fa0f 	bl	800ae80 <_Balloc>
 800aa62:	4606      	mov	r6, r0
 800aa64:	b928      	cbnz	r0, 800aa72 <_dtoa_r+0x97a>
 800aa66:	4b84      	ldr	r3, [pc, #528]	@ (800ac78 <_dtoa_r+0xb80>)
 800aa68:	4602      	mov	r2, r0
 800aa6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa6e:	f7ff bb5a 	b.w	800a126 <_dtoa_r+0x2e>
 800aa72:	692a      	ldr	r2, [r5, #16]
 800aa74:	3202      	adds	r2, #2
 800aa76:	0092      	lsls	r2, r2, #2
 800aa78:	f105 010c 	add.w	r1, r5, #12
 800aa7c:	300c      	adds	r0, #12
 800aa7e:	f001 fef9 	bl	800c874 <memcpy>
 800aa82:	2201      	movs	r2, #1
 800aa84:	4631      	mov	r1, r6
 800aa86:	4658      	mov	r0, fp
 800aa88:	f000 fc52 	bl	800b330 <__lshift>
 800aa8c:	f10a 0301 	add.w	r3, sl, #1
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	9b00      	ldr	r3, [sp, #0]
 800aa94:	4453      	add	r3, sl
 800aa96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa98:	9b02      	ldr	r3, [sp, #8]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	462f      	mov	r7, r5
 800aaa0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	4648      	mov	r0, r9
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	f7ff fa9b 	bl	8009fe8 <quorem>
 800aab2:	4639      	mov	r1, r7
 800aab4:	9002      	str	r0, [sp, #8]
 800aab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aaba:	4648      	mov	r0, r9
 800aabc:	f000 fca4 	bl	800b408 <__mcmp>
 800aac0:	462a      	mov	r2, r5
 800aac2:	9008      	str	r0, [sp, #32]
 800aac4:	4621      	mov	r1, r4
 800aac6:	4658      	mov	r0, fp
 800aac8:	f000 fcba 	bl	800b440 <__mdiff>
 800aacc:	68c2      	ldr	r2, [r0, #12]
 800aace:	4606      	mov	r6, r0
 800aad0:	bb02      	cbnz	r2, 800ab14 <_dtoa_r+0xa1c>
 800aad2:	4601      	mov	r1, r0
 800aad4:	4648      	mov	r0, r9
 800aad6:	f000 fc97 	bl	800b408 <__mcmp>
 800aada:	4602      	mov	r2, r0
 800aadc:	4631      	mov	r1, r6
 800aade:	4658      	mov	r0, fp
 800aae0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aae2:	f000 fa0d 	bl	800af00 <_Bfree>
 800aae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaea:	9e07      	ldr	r6, [sp, #28]
 800aaec:	ea43 0102 	orr.w	r1, r3, r2
 800aaf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf2:	4319      	orrs	r1, r3
 800aaf4:	d110      	bne.n	800ab18 <_dtoa_r+0xa20>
 800aaf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aafa:	d029      	beq.n	800ab50 <_dtoa_r+0xa58>
 800aafc:	9b08      	ldr	r3, [sp, #32]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd02      	ble.n	800ab08 <_dtoa_r+0xa10>
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	f883 8000 	strb.w	r8, [r3]
 800ab0e:	e63f      	b.n	800a790 <_dtoa_r+0x698>
 800ab10:	4628      	mov	r0, r5
 800ab12:	e7bb      	b.n	800aa8c <_dtoa_r+0x994>
 800ab14:	2201      	movs	r2, #1
 800ab16:	e7e1      	b.n	800aadc <_dtoa_r+0x9e4>
 800ab18:	9b08      	ldr	r3, [sp, #32]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	db04      	blt.n	800ab28 <_dtoa_r+0xa30>
 800ab1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab20:	430b      	orrs	r3, r1
 800ab22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab24:	430b      	orrs	r3, r1
 800ab26:	d120      	bne.n	800ab6a <_dtoa_r+0xa72>
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	dded      	ble.n	800ab08 <_dtoa_r+0xa10>
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4658      	mov	r0, fp
 800ab32:	f000 fbfd 	bl	800b330 <__lshift>
 800ab36:	4621      	mov	r1, r4
 800ab38:	4681      	mov	r9, r0
 800ab3a:	f000 fc65 	bl	800b408 <__mcmp>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	dc03      	bgt.n	800ab4a <_dtoa_r+0xa52>
 800ab42:	d1e1      	bne.n	800ab08 <_dtoa_r+0xa10>
 800ab44:	f018 0f01 	tst.w	r8, #1
 800ab48:	d0de      	beq.n	800ab08 <_dtoa_r+0xa10>
 800ab4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab4e:	d1d8      	bne.n	800ab02 <_dtoa_r+0xa0a>
 800ab50:	9a00      	ldr	r2, [sp, #0]
 800ab52:	2339      	movs	r3, #57	@ 0x39
 800ab54:	7013      	strb	r3, [r2, #0]
 800ab56:	4633      	mov	r3, r6
 800ab58:	461e      	mov	r6, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab60:	2a39      	cmp	r2, #57	@ 0x39
 800ab62:	d052      	beq.n	800ac0a <_dtoa_r+0xb12>
 800ab64:	3201      	adds	r2, #1
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	e612      	b.n	800a790 <_dtoa_r+0x698>
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	dd07      	ble.n	800ab7e <_dtoa_r+0xa86>
 800ab6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab72:	d0ed      	beq.n	800ab50 <_dtoa_r+0xa58>
 800ab74:	9a00      	ldr	r2, [sp, #0]
 800ab76:	f108 0301 	add.w	r3, r8, #1
 800ab7a:	7013      	strb	r3, [r2, #0]
 800ab7c:	e608      	b.n	800a790 <_dtoa_r+0x698>
 800ab7e:	9b07      	ldr	r3, [sp, #28]
 800ab80:	9a07      	ldr	r2, [sp, #28]
 800ab82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ab86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d028      	beq.n	800abde <_dtoa_r+0xae6>
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	2300      	movs	r3, #0
 800ab90:	220a      	movs	r2, #10
 800ab92:	4658      	mov	r0, fp
 800ab94:	f000 f9d6 	bl	800af44 <__multadd>
 800ab98:	42af      	cmp	r7, r5
 800ab9a:	4681      	mov	r9, r0
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	f04f 020a 	mov.w	r2, #10
 800aba4:	4639      	mov	r1, r7
 800aba6:	4658      	mov	r0, fp
 800aba8:	d107      	bne.n	800abba <_dtoa_r+0xac2>
 800abaa:	f000 f9cb 	bl	800af44 <__multadd>
 800abae:	4607      	mov	r7, r0
 800abb0:	4605      	mov	r5, r0
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	3301      	adds	r3, #1
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	e774      	b.n	800aaa4 <_dtoa_r+0x9ac>
 800abba:	f000 f9c3 	bl	800af44 <__multadd>
 800abbe:	4629      	mov	r1, r5
 800abc0:	4607      	mov	r7, r0
 800abc2:	2300      	movs	r3, #0
 800abc4:	220a      	movs	r2, #10
 800abc6:	4658      	mov	r0, fp
 800abc8:	f000 f9bc 	bl	800af44 <__multadd>
 800abcc:	4605      	mov	r5, r0
 800abce:	e7f0      	b.n	800abb2 <_dtoa_r+0xaba>
 800abd0:	9b00      	ldr	r3, [sp, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bfcc      	ite	gt
 800abd6:	461e      	movgt	r6, r3
 800abd8:	2601      	movle	r6, #1
 800abda:	4456      	add	r6, sl
 800abdc:	2700      	movs	r7, #0
 800abde:	4649      	mov	r1, r9
 800abe0:	2201      	movs	r2, #1
 800abe2:	4658      	mov	r0, fp
 800abe4:	f000 fba4 	bl	800b330 <__lshift>
 800abe8:	4621      	mov	r1, r4
 800abea:	4681      	mov	r9, r0
 800abec:	f000 fc0c 	bl	800b408 <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	dcb0      	bgt.n	800ab56 <_dtoa_r+0xa5e>
 800abf4:	d102      	bne.n	800abfc <_dtoa_r+0xb04>
 800abf6:	f018 0f01 	tst.w	r8, #1
 800abfa:	d1ac      	bne.n	800ab56 <_dtoa_r+0xa5e>
 800abfc:	4633      	mov	r3, r6
 800abfe:	461e      	mov	r6, r3
 800ac00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac04:	2a30      	cmp	r2, #48	@ 0x30
 800ac06:	d0fa      	beq.n	800abfe <_dtoa_r+0xb06>
 800ac08:	e5c2      	b.n	800a790 <_dtoa_r+0x698>
 800ac0a:	459a      	cmp	sl, r3
 800ac0c:	d1a4      	bne.n	800ab58 <_dtoa_r+0xa60>
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	3301      	adds	r3, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	2331      	movs	r3, #49	@ 0x31
 800ac16:	f88a 3000 	strb.w	r3, [sl]
 800ac1a:	e5b9      	b.n	800a790 <_dtoa_r+0x698>
 800ac1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac7c <_dtoa_r+0xb84>
 800ac22:	b11b      	cbz	r3, 800ac2c <_dtoa_r+0xb34>
 800ac24:	f10a 0308 	add.w	r3, sl, #8
 800ac28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	4650      	mov	r0, sl
 800ac2e:	b019      	add	sp, #100	@ 0x64
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	f77f ae37 	ble.w	800a8aa <_dtoa_r+0x7b2>
 800ac3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac40:	2001      	movs	r0, #1
 800ac42:	e655      	b.n	800a8f0 <_dtoa_r+0x7f8>
 800ac44:	9b00      	ldr	r3, [sp, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f77f aed6 	ble.w	800a9f8 <_dtoa_r+0x900>
 800ac4c:	4656      	mov	r6, sl
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4648      	mov	r0, r9
 800ac52:	f7ff f9c9 	bl	8009fe8 <quorem>
 800ac56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac5a:	f806 8b01 	strb.w	r8, [r6], #1
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	eba6 020a 	sub.w	r2, r6, sl
 800ac64:	4293      	cmp	r3, r2
 800ac66:	ddb3      	ble.n	800abd0 <_dtoa_r+0xad8>
 800ac68:	4649      	mov	r1, r9
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	4658      	mov	r0, fp
 800ac70:	f000 f968 	bl	800af44 <__multadd>
 800ac74:	4681      	mov	r9, r0
 800ac76:	e7ea      	b.n	800ac4e <_dtoa_r+0xb56>
 800ac78:	0800d7ca 	.word	0x0800d7ca
 800ac7c:	0800d74e 	.word	0x0800d74e

0800ac80 <_free_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4605      	mov	r5, r0
 800ac84:	2900      	cmp	r1, #0
 800ac86:	d041      	beq.n	800ad0c <_free_r+0x8c>
 800ac88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8c:	1f0c      	subs	r4, r1, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfb8      	it	lt
 800ac92:	18e4      	addlt	r4, r4, r3
 800ac94:	f000 f8e8 	bl	800ae68 <__malloc_lock>
 800ac98:	4a1d      	ldr	r2, [pc, #116]	@ (800ad10 <_free_r+0x90>)
 800ac9a:	6813      	ldr	r3, [r2, #0]
 800ac9c:	b933      	cbnz	r3, 800acac <_free_r+0x2c>
 800ac9e:	6063      	str	r3, [r4, #4]
 800aca0:	6014      	str	r4, [r2, #0]
 800aca2:	4628      	mov	r0, r5
 800aca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aca8:	f000 b8e4 	b.w	800ae74 <__malloc_unlock>
 800acac:	42a3      	cmp	r3, r4
 800acae:	d908      	bls.n	800acc2 <_free_r+0x42>
 800acb0:	6820      	ldr	r0, [r4, #0]
 800acb2:	1821      	adds	r1, r4, r0
 800acb4:	428b      	cmp	r3, r1
 800acb6:	bf01      	itttt	eq
 800acb8:	6819      	ldreq	r1, [r3, #0]
 800acba:	685b      	ldreq	r3, [r3, #4]
 800acbc:	1809      	addeq	r1, r1, r0
 800acbe:	6021      	streq	r1, [r4, #0]
 800acc0:	e7ed      	b.n	800ac9e <_free_r+0x1e>
 800acc2:	461a      	mov	r2, r3
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	b10b      	cbz	r3, 800accc <_free_r+0x4c>
 800acc8:	42a3      	cmp	r3, r4
 800acca:	d9fa      	bls.n	800acc2 <_free_r+0x42>
 800accc:	6811      	ldr	r1, [r2, #0]
 800acce:	1850      	adds	r0, r2, r1
 800acd0:	42a0      	cmp	r0, r4
 800acd2:	d10b      	bne.n	800acec <_free_r+0x6c>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	4401      	add	r1, r0
 800acd8:	1850      	adds	r0, r2, r1
 800acda:	4283      	cmp	r3, r0
 800acdc:	6011      	str	r1, [r2, #0]
 800acde:	d1e0      	bne.n	800aca2 <_free_r+0x22>
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	6053      	str	r3, [r2, #4]
 800ace6:	4408      	add	r0, r1
 800ace8:	6010      	str	r0, [r2, #0]
 800acea:	e7da      	b.n	800aca2 <_free_r+0x22>
 800acec:	d902      	bls.n	800acf4 <_free_r+0x74>
 800acee:	230c      	movs	r3, #12
 800acf0:	602b      	str	r3, [r5, #0]
 800acf2:	e7d6      	b.n	800aca2 <_free_r+0x22>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	1821      	adds	r1, r4, r0
 800acf8:	428b      	cmp	r3, r1
 800acfa:	bf04      	itt	eq
 800acfc:	6819      	ldreq	r1, [r3, #0]
 800acfe:	685b      	ldreq	r3, [r3, #4]
 800ad00:	6063      	str	r3, [r4, #4]
 800ad02:	bf04      	itt	eq
 800ad04:	1809      	addeq	r1, r1, r0
 800ad06:	6021      	streq	r1, [r4, #0]
 800ad08:	6054      	str	r4, [r2, #4]
 800ad0a:	e7ca      	b.n	800aca2 <_free_r+0x22>
 800ad0c:	bd38      	pop	{r3, r4, r5, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000980 	.word	0x20000980

0800ad14 <malloc>:
 800ad14:	4b02      	ldr	r3, [pc, #8]	@ (800ad20 <malloc+0xc>)
 800ad16:	4601      	mov	r1, r0
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	f000 b825 	b.w	800ad68 <_malloc_r>
 800ad1e:	bf00      	nop
 800ad20:	20000030 	.word	0x20000030

0800ad24 <sbrk_aligned>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	4e0f      	ldr	r6, [pc, #60]	@ (800ad64 <sbrk_aligned+0x40>)
 800ad28:	460c      	mov	r4, r1
 800ad2a:	6831      	ldr	r1, [r6, #0]
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	b911      	cbnz	r1, 800ad36 <sbrk_aligned+0x12>
 800ad30:	f001 fd90 	bl	800c854 <_sbrk_r>
 800ad34:	6030      	str	r0, [r6, #0]
 800ad36:	4621      	mov	r1, r4
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f001 fd8b 	bl	800c854 <_sbrk_r>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	d103      	bne.n	800ad4a <sbrk_aligned+0x26>
 800ad42:	f04f 34ff 	mov.w	r4, #4294967295
 800ad46:	4620      	mov	r0, r4
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
 800ad4a:	1cc4      	adds	r4, r0, #3
 800ad4c:	f024 0403 	bic.w	r4, r4, #3
 800ad50:	42a0      	cmp	r0, r4
 800ad52:	d0f8      	beq.n	800ad46 <sbrk_aligned+0x22>
 800ad54:	1a21      	subs	r1, r4, r0
 800ad56:	4628      	mov	r0, r5
 800ad58:	f001 fd7c 	bl	800c854 <_sbrk_r>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d1f2      	bne.n	800ad46 <sbrk_aligned+0x22>
 800ad60:	e7ef      	b.n	800ad42 <sbrk_aligned+0x1e>
 800ad62:	bf00      	nop
 800ad64:	2000097c 	.word	0x2000097c

0800ad68 <_malloc_r>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	1ccd      	adds	r5, r1, #3
 800ad6e:	f025 0503 	bic.w	r5, r5, #3
 800ad72:	3508      	adds	r5, #8
 800ad74:	2d0c      	cmp	r5, #12
 800ad76:	bf38      	it	cc
 800ad78:	250c      	movcc	r5, #12
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	db01      	blt.n	800ad84 <_malloc_r+0x1c>
 800ad80:	42a9      	cmp	r1, r5
 800ad82:	d904      	bls.n	800ad8e <_malloc_r+0x26>
 800ad84:	230c      	movs	r3, #12
 800ad86:	6033      	str	r3, [r6, #0]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae64 <_malloc_r+0xfc>
 800ad92:	f000 f869 	bl	800ae68 <__malloc_lock>
 800ad96:	f8d8 3000 	ldr.w	r3, [r8]
 800ad9a:	461c      	mov	r4, r3
 800ad9c:	bb44      	cbnz	r4, 800adf0 <_malloc_r+0x88>
 800ad9e:	4629      	mov	r1, r5
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff ffbf 	bl	800ad24 <sbrk_aligned>
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	4604      	mov	r4, r0
 800adaa:	d158      	bne.n	800ae5e <_malloc_r+0xf6>
 800adac:	f8d8 4000 	ldr.w	r4, [r8]
 800adb0:	4627      	mov	r7, r4
 800adb2:	2f00      	cmp	r7, #0
 800adb4:	d143      	bne.n	800ae3e <_malloc_r+0xd6>
 800adb6:	2c00      	cmp	r4, #0
 800adb8:	d04b      	beq.n	800ae52 <_malloc_r+0xea>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	4639      	mov	r1, r7
 800adbe:	4630      	mov	r0, r6
 800adc0:	eb04 0903 	add.w	r9, r4, r3
 800adc4:	f001 fd46 	bl	800c854 <_sbrk_r>
 800adc8:	4581      	cmp	r9, r0
 800adca:	d142      	bne.n	800ae52 <_malloc_r+0xea>
 800adcc:	6821      	ldr	r1, [r4, #0]
 800adce:	1a6d      	subs	r5, r5, r1
 800add0:	4629      	mov	r1, r5
 800add2:	4630      	mov	r0, r6
 800add4:	f7ff ffa6 	bl	800ad24 <sbrk_aligned>
 800add8:	3001      	adds	r0, #1
 800adda:	d03a      	beq.n	800ae52 <_malloc_r+0xea>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	442b      	add	r3, r5
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	f8d8 3000 	ldr.w	r3, [r8]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	bb62      	cbnz	r2, 800ae44 <_malloc_r+0xdc>
 800adea:	f8c8 7000 	str.w	r7, [r8]
 800adee:	e00f      	b.n	800ae10 <_malloc_r+0xa8>
 800adf0:	6822      	ldr	r2, [r4, #0]
 800adf2:	1b52      	subs	r2, r2, r5
 800adf4:	d420      	bmi.n	800ae38 <_malloc_r+0xd0>
 800adf6:	2a0b      	cmp	r2, #11
 800adf8:	d917      	bls.n	800ae2a <_malloc_r+0xc2>
 800adfa:	1961      	adds	r1, r4, r5
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	6025      	str	r5, [r4, #0]
 800ae00:	bf18      	it	ne
 800ae02:	6059      	strne	r1, [r3, #4]
 800ae04:	6863      	ldr	r3, [r4, #4]
 800ae06:	bf08      	it	eq
 800ae08:	f8c8 1000 	streq.w	r1, [r8]
 800ae0c:	5162      	str	r2, [r4, r5]
 800ae0e:	604b      	str	r3, [r1, #4]
 800ae10:	4630      	mov	r0, r6
 800ae12:	f000 f82f 	bl	800ae74 <__malloc_unlock>
 800ae16:	f104 000b 	add.w	r0, r4, #11
 800ae1a:	1d23      	adds	r3, r4, #4
 800ae1c:	f020 0007 	bic.w	r0, r0, #7
 800ae20:	1ac2      	subs	r2, r0, r3
 800ae22:	bf1c      	itt	ne
 800ae24:	1a1b      	subne	r3, r3, r0
 800ae26:	50a3      	strne	r3, [r4, r2]
 800ae28:	e7af      	b.n	800ad8a <_malloc_r+0x22>
 800ae2a:	6862      	ldr	r2, [r4, #4]
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	bf0c      	ite	eq
 800ae30:	f8c8 2000 	streq.w	r2, [r8]
 800ae34:	605a      	strne	r2, [r3, #4]
 800ae36:	e7eb      	b.n	800ae10 <_malloc_r+0xa8>
 800ae38:	4623      	mov	r3, r4
 800ae3a:	6864      	ldr	r4, [r4, #4]
 800ae3c:	e7ae      	b.n	800ad9c <_malloc_r+0x34>
 800ae3e:	463c      	mov	r4, r7
 800ae40:	687f      	ldr	r7, [r7, #4]
 800ae42:	e7b6      	b.n	800adb2 <_malloc_r+0x4a>
 800ae44:	461a      	mov	r2, r3
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d1fb      	bne.n	800ae44 <_malloc_r+0xdc>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	6053      	str	r3, [r2, #4]
 800ae50:	e7de      	b.n	800ae10 <_malloc_r+0xa8>
 800ae52:	230c      	movs	r3, #12
 800ae54:	6033      	str	r3, [r6, #0]
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 f80c 	bl	800ae74 <__malloc_unlock>
 800ae5c:	e794      	b.n	800ad88 <_malloc_r+0x20>
 800ae5e:	6005      	str	r5, [r0, #0]
 800ae60:	e7d6      	b.n	800ae10 <_malloc_r+0xa8>
 800ae62:	bf00      	nop
 800ae64:	20000980 	.word	0x20000980

0800ae68 <__malloc_lock>:
 800ae68:	4801      	ldr	r0, [pc, #4]	@ (800ae70 <__malloc_lock+0x8>)
 800ae6a:	f7ff b8b4 	b.w	8009fd6 <__retarget_lock_acquire_recursive>
 800ae6e:	bf00      	nop
 800ae70:	20000978 	.word	0x20000978

0800ae74 <__malloc_unlock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	@ (800ae7c <__malloc_unlock+0x8>)
 800ae76:	f7ff b8af 	b.w	8009fd8 <__retarget_lock_release_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	20000978 	.word	0x20000978

0800ae80 <_Balloc>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	69c6      	ldr	r6, [r0, #28]
 800ae84:	4604      	mov	r4, r0
 800ae86:	460d      	mov	r5, r1
 800ae88:	b976      	cbnz	r6, 800aea8 <_Balloc+0x28>
 800ae8a:	2010      	movs	r0, #16
 800ae8c:	f7ff ff42 	bl	800ad14 <malloc>
 800ae90:	4602      	mov	r2, r0
 800ae92:	61e0      	str	r0, [r4, #28]
 800ae94:	b920      	cbnz	r0, 800aea0 <_Balloc+0x20>
 800ae96:	4b18      	ldr	r3, [pc, #96]	@ (800aef8 <_Balloc+0x78>)
 800ae98:	4818      	ldr	r0, [pc, #96]	@ (800aefc <_Balloc+0x7c>)
 800ae9a:	216b      	movs	r1, #107	@ 0x6b
 800ae9c:	f001 fd00 	bl	800c8a0 <__assert_func>
 800aea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aea4:	6006      	str	r6, [r0, #0]
 800aea6:	60c6      	str	r6, [r0, #12]
 800aea8:	69e6      	ldr	r6, [r4, #28]
 800aeaa:	68f3      	ldr	r3, [r6, #12]
 800aeac:	b183      	cbz	r3, 800aed0 <_Balloc+0x50>
 800aeae:	69e3      	ldr	r3, [r4, #28]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aeb6:	b9b8      	cbnz	r0, 800aee8 <_Balloc+0x68>
 800aeb8:	2101      	movs	r1, #1
 800aeba:	fa01 f605 	lsl.w	r6, r1, r5
 800aebe:	1d72      	adds	r2, r6, #5
 800aec0:	0092      	lsls	r2, r2, #2
 800aec2:	4620      	mov	r0, r4
 800aec4:	f001 fd0a 	bl	800c8dc <_calloc_r>
 800aec8:	b160      	cbz	r0, 800aee4 <_Balloc+0x64>
 800aeca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aece:	e00e      	b.n	800aeee <_Balloc+0x6e>
 800aed0:	2221      	movs	r2, #33	@ 0x21
 800aed2:	2104      	movs	r1, #4
 800aed4:	4620      	mov	r0, r4
 800aed6:	f001 fd01 	bl	800c8dc <_calloc_r>
 800aeda:	69e3      	ldr	r3, [r4, #28]
 800aedc:	60f0      	str	r0, [r6, #12]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e4      	bne.n	800aeae <_Balloc+0x2e>
 800aee4:	2000      	movs	r0, #0
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	6802      	ldr	r2, [r0, #0]
 800aeea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeee:	2300      	movs	r3, #0
 800aef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aef4:	e7f7      	b.n	800aee6 <_Balloc+0x66>
 800aef6:	bf00      	nop
 800aef8:	0800d75b 	.word	0x0800d75b
 800aefc:	0800d7db 	.word	0x0800d7db

0800af00 <_Bfree>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	69c6      	ldr	r6, [r0, #28]
 800af04:	4605      	mov	r5, r0
 800af06:	460c      	mov	r4, r1
 800af08:	b976      	cbnz	r6, 800af28 <_Bfree+0x28>
 800af0a:	2010      	movs	r0, #16
 800af0c:	f7ff ff02 	bl	800ad14 <malloc>
 800af10:	4602      	mov	r2, r0
 800af12:	61e8      	str	r0, [r5, #28]
 800af14:	b920      	cbnz	r0, 800af20 <_Bfree+0x20>
 800af16:	4b09      	ldr	r3, [pc, #36]	@ (800af3c <_Bfree+0x3c>)
 800af18:	4809      	ldr	r0, [pc, #36]	@ (800af40 <_Bfree+0x40>)
 800af1a:	218f      	movs	r1, #143	@ 0x8f
 800af1c:	f001 fcc0 	bl	800c8a0 <__assert_func>
 800af20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af24:	6006      	str	r6, [r0, #0]
 800af26:	60c6      	str	r6, [r0, #12]
 800af28:	b13c      	cbz	r4, 800af3a <_Bfree+0x3a>
 800af2a:	69eb      	ldr	r3, [r5, #28]
 800af2c:	6862      	ldr	r2, [r4, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af34:	6021      	str	r1, [r4, #0]
 800af36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	0800d75b 	.word	0x0800d75b
 800af40:	0800d7db 	.word	0x0800d7db

0800af44 <__multadd>:
 800af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af48:	690d      	ldr	r5, [r1, #16]
 800af4a:	4607      	mov	r7, r0
 800af4c:	460c      	mov	r4, r1
 800af4e:	461e      	mov	r6, r3
 800af50:	f101 0c14 	add.w	ip, r1, #20
 800af54:	2000      	movs	r0, #0
 800af56:	f8dc 3000 	ldr.w	r3, [ip]
 800af5a:	b299      	uxth	r1, r3
 800af5c:	fb02 6101 	mla	r1, r2, r1, r6
 800af60:	0c1e      	lsrs	r6, r3, #16
 800af62:	0c0b      	lsrs	r3, r1, #16
 800af64:	fb02 3306 	mla	r3, r2, r6, r3
 800af68:	b289      	uxth	r1, r1
 800af6a:	3001      	adds	r0, #1
 800af6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af70:	4285      	cmp	r5, r0
 800af72:	f84c 1b04 	str.w	r1, [ip], #4
 800af76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af7a:	dcec      	bgt.n	800af56 <__multadd+0x12>
 800af7c:	b30e      	cbz	r6, 800afc2 <__multadd+0x7e>
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	42ab      	cmp	r3, r5
 800af82:	dc19      	bgt.n	800afb8 <__multadd+0x74>
 800af84:	6861      	ldr	r1, [r4, #4]
 800af86:	4638      	mov	r0, r7
 800af88:	3101      	adds	r1, #1
 800af8a:	f7ff ff79 	bl	800ae80 <_Balloc>
 800af8e:	4680      	mov	r8, r0
 800af90:	b928      	cbnz	r0, 800af9e <__multadd+0x5a>
 800af92:	4602      	mov	r2, r0
 800af94:	4b0c      	ldr	r3, [pc, #48]	@ (800afc8 <__multadd+0x84>)
 800af96:	480d      	ldr	r0, [pc, #52]	@ (800afcc <__multadd+0x88>)
 800af98:	21ba      	movs	r1, #186	@ 0xba
 800af9a:	f001 fc81 	bl	800c8a0 <__assert_func>
 800af9e:	6922      	ldr	r2, [r4, #16]
 800afa0:	3202      	adds	r2, #2
 800afa2:	f104 010c 	add.w	r1, r4, #12
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	300c      	adds	r0, #12
 800afaa:	f001 fc63 	bl	800c874 <memcpy>
 800afae:	4621      	mov	r1, r4
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff ffa5 	bl	800af00 <_Bfree>
 800afb6:	4644      	mov	r4, r8
 800afb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afbc:	3501      	adds	r5, #1
 800afbe:	615e      	str	r6, [r3, #20]
 800afc0:	6125      	str	r5, [r4, #16]
 800afc2:	4620      	mov	r0, r4
 800afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc8:	0800d7ca 	.word	0x0800d7ca
 800afcc:	0800d7db 	.word	0x0800d7db

0800afd0 <__s2b>:
 800afd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	460c      	mov	r4, r1
 800afd6:	4615      	mov	r5, r2
 800afd8:	461f      	mov	r7, r3
 800afda:	2209      	movs	r2, #9
 800afdc:	3308      	adds	r3, #8
 800afde:	4606      	mov	r6, r0
 800afe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800afe4:	2100      	movs	r1, #0
 800afe6:	2201      	movs	r2, #1
 800afe8:	429a      	cmp	r2, r3
 800afea:	db09      	blt.n	800b000 <__s2b+0x30>
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ff47 	bl	800ae80 <_Balloc>
 800aff2:	b940      	cbnz	r0, 800b006 <__s2b+0x36>
 800aff4:	4602      	mov	r2, r0
 800aff6:	4b19      	ldr	r3, [pc, #100]	@ (800b05c <__s2b+0x8c>)
 800aff8:	4819      	ldr	r0, [pc, #100]	@ (800b060 <__s2b+0x90>)
 800affa:	21d3      	movs	r1, #211	@ 0xd3
 800affc:	f001 fc50 	bl	800c8a0 <__assert_func>
 800b000:	0052      	lsls	r2, r2, #1
 800b002:	3101      	adds	r1, #1
 800b004:	e7f0      	b.n	800afe8 <__s2b+0x18>
 800b006:	9b08      	ldr	r3, [sp, #32]
 800b008:	6143      	str	r3, [r0, #20]
 800b00a:	2d09      	cmp	r5, #9
 800b00c:	f04f 0301 	mov.w	r3, #1
 800b010:	6103      	str	r3, [r0, #16]
 800b012:	dd16      	ble.n	800b042 <__s2b+0x72>
 800b014:	f104 0909 	add.w	r9, r4, #9
 800b018:	46c8      	mov	r8, r9
 800b01a:	442c      	add	r4, r5
 800b01c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b020:	4601      	mov	r1, r0
 800b022:	3b30      	subs	r3, #48	@ 0x30
 800b024:	220a      	movs	r2, #10
 800b026:	4630      	mov	r0, r6
 800b028:	f7ff ff8c 	bl	800af44 <__multadd>
 800b02c:	45a0      	cmp	r8, r4
 800b02e:	d1f5      	bne.n	800b01c <__s2b+0x4c>
 800b030:	f1a5 0408 	sub.w	r4, r5, #8
 800b034:	444c      	add	r4, r9
 800b036:	1b2d      	subs	r5, r5, r4
 800b038:	1963      	adds	r3, r4, r5
 800b03a:	42bb      	cmp	r3, r7
 800b03c:	db04      	blt.n	800b048 <__s2b+0x78>
 800b03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b042:	340a      	adds	r4, #10
 800b044:	2509      	movs	r5, #9
 800b046:	e7f6      	b.n	800b036 <__s2b+0x66>
 800b048:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b04c:	4601      	mov	r1, r0
 800b04e:	3b30      	subs	r3, #48	@ 0x30
 800b050:	220a      	movs	r2, #10
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ff76 	bl	800af44 <__multadd>
 800b058:	e7ee      	b.n	800b038 <__s2b+0x68>
 800b05a:	bf00      	nop
 800b05c:	0800d7ca 	.word	0x0800d7ca
 800b060:	0800d7db 	.word	0x0800d7db

0800b064 <__hi0bits>:
 800b064:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b068:	4603      	mov	r3, r0
 800b06a:	bf36      	itet	cc
 800b06c:	0403      	lslcc	r3, r0, #16
 800b06e:	2000      	movcs	r0, #0
 800b070:	2010      	movcc	r0, #16
 800b072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b076:	bf3c      	itt	cc
 800b078:	021b      	lslcc	r3, r3, #8
 800b07a:	3008      	addcc	r0, #8
 800b07c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b080:	bf3c      	itt	cc
 800b082:	011b      	lslcc	r3, r3, #4
 800b084:	3004      	addcc	r0, #4
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b08a:	bf3c      	itt	cc
 800b08c:	009b      	lslcc	r3, r3, #2
 800b08e:	3002      	addcc	r0, #2
 800b090:	2b00      	cmp	r3, #0
 800b092:	db05      	blt.n	800b0a0 <__hi0bits+0x3c>
 800b094:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b098:	f100 0001 	add.w	r0, r0, #1
 800b09c:	bf08      	it	eq
 800b09e:	2020      	moveq	r0, #32
 800b0a0:	4770      	bx	lr

0800b0a2 <__lo0bits>:
 800b0a2:	6803      	ldr	r3, [r0, #0]
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	f013 0007 	ands.w	r0, r3, #7
 800b0aa:	d00b      	beq.n	800b0c4 <__lo0bits+0x22>
 800b0ac:	07d9      	lsls	r1, r3, #31
 800b0ae:	d421      	bmi.n	800b0f4 <__lo0bits+0x52>
 800b0b0:	0798      	lsls	r0, r3, #30
 800b0b2:	bf49      	itett	mi
 800b0b4:	085b      	lsrmi	r3, r3, #1
 800b0b6:	089b      	lsrpl	r3, r3, #2
 800b0b8:	2001      	movmi	r0, #1
 800b0ba:	6013      	strmi	r3, [r2, #0]
 800b0bc:	bf5c      	itt	pl
 800b0be:	6013      	strpl	r3, [r2, #0]
 800b0c0:	2002      	movpl	r0, #2
 800b0c2:	4770      	bx	lr
 800b0c4:	b299      	uxth	r1, r3
 800b0c6:	b909      	cbnz	r1, 800b0cc <__lo0bits+0x2a>
 800b0c8:	0c1b      	lsrs	r3, r3, #16
 800b0ca:	2010      	movs	r0, #16
 800b0cc:	b2d9      	uxtb	r1, r3
 800b0ce:	b909      	cbnz	r1, 800b0d4 <__lo0bits+0x32>
 800b0d0:	3008      	adds	r0, #8
 800b0d2:	0a1b      	lsrs	r3, r3, #8
 800b0d4:	0719      	lsls	r1, r3, #28
 800b0d6:	bf04      	itt	eq
 800b0d8:	091b      	lsreq	r3, r3, #4
 800b0da:	3004      	addeq	r0, #4
 800b0dc:	0799      	lsls	r1, r3, #30
 800b0de:	bf04      	itt	eq
 800b0e0:	089b      	lsreq	r3, r3, #2
 800b0e2:	3002      	addeq	r0, #2
 800b0e4:	07d9      	lsls	r1, r3, #31
 800b0e6:	d403      	bmi.n	800b0f0 <__lo0bits+0x4e>
 800b0e8:	085b      	lsrs	r3, r3, #1
 800b0ea:	f100 0001 	add.w	r0, r0, #1
 800b0ee:	d003      	beq.n	800b0f8 <__lo0bits+0x56>
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	4770      	bx	lr
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	4770      	bx	lr
 800b0f8:	2020      	movs	r0, #32
 800b0fa:	4770      	bx	lr

0800b0fc <__i2b>:
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	460c      	mov	r4, r1
 800b100:	2101      	movs	r1, #1
 800b102:	f7ff febd 	bl	800ae80 <_Balloc>
 800b106:	4602      	mov	r2, r0
 800b108:	b928      	cbnz	r0, 800b116 <__i2b+0x1a>
 800b10a:	4b05      	ldr	r3, [pc, #20]	@ (800b120 <__i2b+0x24>)
 800b10c:	4805      	ldr	r0, [pc, #20]	@ (800b124 <__i2b+0x28>)
 800b10e:	f240 1145 	movw	r1, #325	@ 0x145
 800b112:	f001 fbc5 	bl	800c8a0 <__assert_func>
 800b116:	2301      	movs	r3, #1
 800b118:	6144      	str	r4, [r0, #20]
 800b11a:	6103      	str	r3, [r0, #16]
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	bf00      	nop
 800b120:	0800d7ca 	.word	0x0800d7ca
 800b124:	0800d7db 	.word	0x0800d7db

0800b128 <__multiply>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	4614      	mov	r4, r2
 800b12e:	690a      	ldr	r2, [r1, #16]
 800b130:	6923      	ldr	r3, [r4, #16]
 800b132:	429a      	cmp	r2, r3
 800b134:	bfa8      	it	ge
 800b136:	4623      	movge	r3, r4
 800b138:	460f      	mov	r7, r1
 800b13a:	bfa4      	itt	ge
 800b13c:	460c      	movge	r4, r1
 800b13e:	461f      	movge	r7, r3
 800b140:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b144:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b148:	68a3      	ldr	r3, [r4, #8]
 800b14a:	6861      	ldr	r1, [r4, #4]
 800b14c:	eb0a 0609 	add.w	r6, sl, r9
 800b150:	42b3      	cmp	r3, r6
 800b152:	b085      	sub	sp, #20
 800b154:	bfb8      	it	lt
 800b156:	3101      	addlt	r1, #1
 800b158:	f7ff fe92 	bl	800ae80 <_Balloc>
 800b15c:	b930      	cbnz	r0, 800b16c <__multiply+0x44>
 800b15e:	4602      	mov	r2, r0
 800b160:	4b44      	ldr	r3, [pc, #272]	@ (800b274 <__multiply+0x14c>)
 800b162:	4845      	ldr	r0, [pc, #276]	@ (800b278 <__multiply+0x150>)
 800b164:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b168:	f001 fb9a 	bl	800c8a0 <__assert_func>
 800b16c:	f100 0514 	add.w	r5, r0, #20
 800b170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b174:	462b      	mov	r3, r5
 800b176:	2200      	movs	r2, #0
 800b178:	4543      	cmp	r3, r8
 800b17a:	d321      	bcc.n	800b1c0 <__multiply+0x98>
 800b17c:	f107 0114 	add.w	r1, r7, #20
 800b180:	f104 0214 	add.w	r2, r4, #20
 800b184:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b188:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b18c:	9302      	str	r3, [sp, #8]
 800b18e:	1b13      	subs	r3, r2, r4
 800b190:	3b15      	subs	r3, #21
 800b192:	f023 0303 	bic.w	r3, r3, #3
 800b196:	3304      	adds	r3, #4
 800b198:	f104 0715 	add.w	r7, r4, #21
 800b19c:	42ba      	cmp	r2, r7
 800b19e:	bf38      	it	cc
 800b1a0:	2304      	movcc	r3, #4
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	9b02      	ldr	r3, [sp, #8]
 800b1a6:	9103      	str	r1, [sp, #12]
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	d80c      	bhi.n	800b1c6 <__multiply+0x9e>
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	dd03      	ble.n	800b1b8 <__multiply+0x90>
 800b1b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d05b      	beq.n	800b270 <__multiply+0x148>
 800b1b8:	6106      	str	r6, [r0, #16]
 800b1ba:	b005      	add	sp, #20
 800b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c0:	f843 2b04 	str.w	r2, [r3], #4
 800b1c4:	e7d8      	b.n	800b178 <__multiply+0x50>
 800b1c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1ca:	f1ba 0f00 	cmp.w	sl, #0
 800b1ce:	d024      	beq.n	800b21a <__multiply+0xf2>
 800b1d0:	f104 0e14 	add.w	lr, r4, #20
 800b1d4:	46a9      	mov	r9, r5
 800b1d6:	f04f 0c00 	mov.w	ip, #0
 800b1da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1de:	f8d9 3000 	ldr.w	r3, [r9]
 800b1e2:	fa1f fb87 	uxth.w	fp, r7
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1f0:	f8d9 7000 	ldr.w	r7, [r9]
 800b1f4:	4463      	add	r3, ip
 800b1f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800b1fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b202:	b29b      	uxth	r3, r3
 800b204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b208:	4572      	cmp	r2, lr
 800b20a:	f849 3b04 	str.w	r3, [r9], #4
 800b20e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b212:	d8e2      	bhi.n	800b1da <__multiply+0xb2>
 800b214:	9b01      	ldr	r3, [sp, #4]
 800b216:	f845 c003 	str.w	ip, [r5, r3]
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b220:	3104      	adds	r1, #4
 800b222:	f1b9 0f00 	cmp.w	r9, #0
 800b226:	d021      	beq.n	800b26c <__multiply+0x144>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	f104 0c14 	add.w	ip, r4, #20
 800b22e:	46ae      	mov	lr, r5
 800b230:	f04f 0a00 	mov.w	sl, #0
 800b234:	f8bc b000 	ldrh.w	fp, [ip]
 800b238:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b23c:	fb09 770b 	mla	r7, r9, fp, r7
 800b240:	4457      	add	r7, sl
 800b242:	b29b      	uxth	r3, r3
 800b244:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b248:	f84e 3b04 	str.w	r3, [lr], #4
 800b24c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b250:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b254:	f8be 3000 	ldrh.w	r3, [lr]
 800b258:	fb09 330a 	mla	r3, r9, sl, r3
 800b25c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b260:	4562      	cmp	r2, ip
 800b262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b266:	d8e5      	bhi.n	800b234 <__multiply+0x10c>
 800b268:	9f01      	ldr	r7, [sp, #4]
 800b26a:	51eb      	str	r3, [r5, r7]
 800b26c:	3504      	adds	r5, #4
 800b26e:	e799      	b.n	800b1a4 <__multiply+0x7c>
 800b270:	3e01      	subs	r6, #1
 800b272:	e79b      	b.n	800b1ac <__multiply+0x84>
 800b274:	0800d7ca 	.word	0x0800d7ca
 800b278:	0800d7db 	.word	0x0800d7db

0800b27c <__pow5mult>:
 800b27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b280:	4615      	mov	r5, r2
 800b282:	f012 0203 	ands.w	r2, r2, #3
 800b286:	4607      	mov	r7, r0
 800b288:	460e      	mov	r6, r1
 800b28a:	d007      	beq.n	800b29c <__pow5mult+0x20>
 800b28c:	4c25      	ldr	r4, [pc, #148]	@ (800b324 <__pow5mult+0xa8>)
 800b28e:	3a01      	subs	r2, #1
 800b290:	2300      	movs	r3, #0
 800b292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b296:	f7ff fe55 	bl	800af44 <__multadd>
 800b29a:	4606      	mov	r6, r0
 800b29c:	10ad      	asrs	r5, r5, #2
 800b29e:	d03d      	beq.n	800b31c <__pow5mult+0xa0>
 800b2a0:	69fc      	ldr	r4, [r7, #28]
 800b2a2:	b97c      	cbnz	r4, 800b2c4 <__pow5mult+0x48>
 800b2a4:	2010      	movs	r0, #16
 800b2a6:	f7ff fd35 	bl	800ad14 <malloc>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	61f8      	str	r0, [r7, #28]
 800b2ae:	b928      	cbnz	r0, 800b2bc <__pow5mult+0x40>
 800b2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b328 <__pow5mult+0xac>)
 800b2b2:	481e      	ldr	r0, [pc, #120]	@ (800b32c <__pow5mult+0xb0>)
 800b2b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2b8:	f001 faf2 	bl	800c8a0 <__assert_func>
 800b2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2c0:	6004      	str	r4, [r0, #0]
 800b2c2:	60c4      	str	r4, [r0, #12]
 800b2c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2cc:	b94c      	cbnz	r4, 800b2e2 <__pow5mult+0x66>
 800b2ce:	f240 2171 	movw	r1, #625	@ 0x271
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f7ff ff12 	bl	800b0fc <__i2b>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2de:	4604      	mov	r4, r0
 800b2e0:	6003      	str	r3, [r0, #0]
 800b2e2:	f04f 0900 	mov.w	r9, #0
 800b2e6:	07eb      	lsls	r3, r5, #31
 800b2e8:	d50a      	bpl.n	800b300 <__pow5mult+0x84>
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	4622      	mov	r2, r4
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	f7ff ff1a 	bl	800b128 <__multiply>
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4680      	mov	r8, r0
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7ff fe01 	bl	800af00 <_Bfree>
 800b2fe:	4646      	mov	r6, r8
 800b300:	106d      	asrs	r5, r5, #1
 800b302:	d00b      	beq.n	800b31c <__pow5mult+0xa0>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	b938      	cbnz	r0, 800b318 <__pow5mult+0x9c>
 800b308:	4622      	mov	r2, r4
 800b30a:	4621      	mov	r1, r4
 800b30c:	4638      	mov	r0, r7
 800b30e:	f7ff ff0b 	bl	800b128 <__multiply>
 800b312:	6020      	str	r0, [r4, #0]
 800b314:	f8c0 9000 	str.w	r9, [r0]
 800b318:	4604      	mov	r4, r0
 800b31a:	e7e4      	b.n	800b2e6 <__pow5mult+0x6a>
 800b31c:	4630      	mov	r0, r6
 800b31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b322:	bf00      	nop
 800b324:	0800d834 	.word	0x0800d834
 800b328:	0800d75b 	.word	0x0800d75b
 800b32c:	0800d7db 	.word	0x0800d7db

0800b330 <__lshift>:
 800b330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b334:	460c      	mov	r4, r1
 800b336:	6849      	ldr	r1, [r1, #4]
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b33e:	68a3      	ldr	r3, [r4, #8]
 800b340:	4607      	mov	r7, r0
 800b342:	4691      	mov	r9, r2
 800b344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b348:	f108 0601 	add.w	r6, r8, #1
 800b34c:	42b3      	cmp	r3, r6
 800b34e:	db0b      	blt.n	800b368 <__lshift+0x38>
 800b350:	4638      	mov	r0, r7
 800b352:	f7ff fd95 	bl	800ae80 <_Balloc>
 800b356:	4605      	mov	r5, r0
 800b358:	b948      	cbnz	r0, 800b36e <__lshift+0x3e>
 800b35a:	4602      	mov	r2, r0
 800b35c:	4b28      	ldr	r3, [pc, #160]	@ (800b400 <__lshift+0xd0>)
 800b35e:	4829      	ldr	r0, [pc, #164]	@ (800b404 <__lshift+0xd4>)
 800b360:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b364:	f001 fa9c 	bl	800c8a0 <__assert_func>
 800b368:	3101      	adds	r1, #1
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	e7ee      	b.n	800b34c <__lshift+0x1c>
 800b36e:	2300      	movs	r3, #0
 800b370:	f100 0114 	add.w	r1, r0, #20
 800b374:	f100 0210 	add.w	r2, r0, #16
 800b378:	4618      	mov	r0, r3
 800b37a:	4553      	cmp	r3, sl
 800b37c:	db33      	blt.n	800b3e6 <__lshift+0xb6>
 800b37e:	6920      	ldr	r0, [r4, #16]
 800b380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b384:	f104 0314 	add.w	r3, r4, #20
 800b388:	f019 091f 	ands.w	r9, r9, #31
 800b38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b394:	d02b      	beq.n	800b3ee <__lshift+0xbe>
 800b396:	f1c9 0e20 	rsb	lr, r9, #32
 800b39a:	468a      	mov	sl, r1
 800b39c:	2200      	movs	r2, #0
 800b39e:	6818      	ldr	r0, [r3, #0]
 800b3a0:	fa00 f009 	lsl.w	r0, r0, r9
 800b3a4:	4310      	orrs	r0, r2
 800b3a6:	f84a 0b04 	str.w	r0, [sl], #4
 800b3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ae:	459c      	cmp	ip, r3
 800b3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3b4:	d8f3      	bhi.n	800b39e <__lshift+0x6e>
 800b3b6:	ebac 0304 	sub.w	r3, ip, r4
 800b3ba:	3b15      	subs	r3, #21
 800b3bc:	f023 0303 	bic.w	r3, r3, #3
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	f104 0015 	add.w	r0, r4, #21
 800b3c6:	4584      	cmp	ip, r0
 800b3c8:	bf38      	it	cc
 800b3ca:	2304      	movcc	r3, #4
 800b3cc:	50ca      	str	r2, [r1, r3]
 800b3ce:	b10a      	cbz	r2, 800b3d4 <__lshift+0xa4>
 800b3d0:	f108 0602 	add.w	r6, r8, #2
 800b3d4:	3e01      	subs	r6, #1
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	612e      	str	r6, [r5, #16]
 800b3da:	4621      	mov	r1, r4
 800b3dc:	f7ff fd90 	bl	800af00 <_Bfree>
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	e7c5      	b.n	800b37a <__lshift+0x4a>
 800b3ee:	3904      	subs	r1, #4
 800b3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3f8:	459c      	cmp	ip, r3
 800b3fa:	d8f9      	bhi.n	800b3f0 <__lshift+0xc0>
 800b3fc:	e7ea      	b.n	800b3d4 <__lshift+0xa4>
 800b3fe:	bf00      	nop
 800b400:	0800d7ca 	.word	0x0800d7ca
 800b404:	0800d7db 	.word	0x0800d7db

0800b408 <__mcmp>:
 800b408:	690a      	ldr	r2, [r1, #16]
 800b40a:	4603      	mov	r3, r0
 800b40c:	6900      	ldr	r0, [r0, #16]
 800b40e:	1a80      	subs	r0, r0, r2
 800b410:	b530      	push	{r4, r5, lr}
 800b412:	d10e      	bne.n	800b432 <__mcmp+0x2a>
 800b414:	3314      	adds	r3, #20
 800b416:	3114      	adds	r1, #20
 800b418:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b41c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b428:	4295      	cmp	r5, r2
 800b42a:	d003      	beq.n	800b434 <__mcmp+0x2c>
 800b42c:	d205      	bcs.n	800b43a <__mcmp+0x32>
 800b42e:	f04f 30ff 	mov.w	r0, #4294967295
 800b432:	bd30      	pop	{r4, r5, pc}
 800b434:	42a3      	cmp	r3, r4
 800b436:	d3f3      	bcc.n	800b420 <__mcmp+0x18>
 800b438:	e7fb      	b.n	800b432 <__mcmp+0x2a>
 800b43a:	2001      	movs	r0, #1
 800b43c:	e7f9      	b.n	800b432 <__mcmp+0x2a>
	...

0800b440 <__mdiff>:
 800b440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	4689      	mov	r9, r1
 800b446:	4606      	mov	r6, r0
 800b448:	4611      	mov	r1, r2
 800b44a:	4648      	mov	r0, r9
 800b44c:	4614      	mov	r4, r2
 800b44e:	f7ff ffdb 	bl	800b408 <__mcmp>
 800b452:	1e05      	subs	r5, r0, #0
 800b454:	d112      	bne.n	800b47c <__mdiff+0x3c>
 800b456:	4629      	mov	r1, r5
 800b458:	4630      	mov	r0, r6
 800b45a:	f7ff fd11 	bl	800ae80 <_Balloc>
 800b45e:	4602      	mov	r2, r0
 800b460:	b928      	cbnz	r0, 800b46e <__mdiff+0x2e>
 800b462:	4b3f      	ldr	r3, [pc, #252]	@ (800b560 <__mdiff+0x120>)
 800b464:	f240 2137 	movw	r1, #567	@ 0x237
 800b468:	483e      	ldr	r0, [pc, #248]	@ (800b564 <__mdiff+0x124>)
 800b46a:	f001 fa19 	bl	800c8a0 <__assert_func>
 800b46e:	2301      	movs	r3, #1
 800b470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b474:	4610      	mov	r0, r2
 800b476:	b003      	add	sp, #12
 800b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47c:	bfbc      	itt	lt
 800b47e:	464b      	movlt	r3, r9
 800b480:	46a1      	movlt	r9, r4
 800b482:	4630      	mov	r0, r6
 800b484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b488:	bfba      	itte	lt
 800b48a:	461c      	movlt	r4, r3
 800b48c:	2501      	movlt	r5, #1
 800b48e:	2500      	movge	r5, #0
 800b490:	f7ff fcf6 	bl	800ae80 <_Balloc>
 800b494:	4602      	mov	r2, r0
 800b496:	b918      	cbnz	r0, 800b4a0 <__mdiff+0x60>
 800b498:	4b31      	ldr	r3, [pc, #196]	@ (800b560 <__mdiff+0x120>)
 800b49a:	f240 2145 	movw	r1, #581	@ 0x245
 800b49e:	e7e3      	b.n	800b468 <__mdiff+0x28>
 800b4a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4a4:	6926      	ldr	r6, [r4, #16]
 800b4a6:	60c5      	str	r5, [r0, #12]
 800b4a8:	f109 0310 	add.w	r3, r9, #16
 800b4ac:	f109 0514 	add.w	r5, r9, #20
 800b4b0:	f104 0e14 	add.w	lr, r4, #20
 800b4b4:	f100 0b14 	add.w	fp, r0, #20
 800b4b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	46d9      	mov	r9, fp
 800b4c4:	f04f 0c00 	mov.w	ip, #0
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	fa1f f38a 	uxth.w	r3, sl
 800b4d8:	4619      	mov	r1, r3
 800b4da:	b283      	uxth	r3, r0
 800b4dc:	1acb      	subs	r3, r1, r3
 800b4de:	0c00      	lsrs	r0, r0, #16
 800b4e0:	4463      	add	r3, ip
 800b4e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4f0:	4576      	cmp	r6, lr
 800b4f2:	f849 3b04 	str.w	r3, [r9], #4
 800b4f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4fa:	d8e5      	bhi.n	800b4c8 <__mdiff+0x88>
 800b4fc:	1b33      	subs	r3, r6, r4
 800b4fe:	3b15      	subs	r3, #21
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	3415      	adds	r4, #21
 800b506:	3304      	adds	r3, #4
 800b508:	42a6      	cmp	r6, r4
 800b50a:	bf38      	it	cc
 800b50c:	2304      	movcc	r3, #4
 800b50e:	441d      	add	r5, r3
 800b510:	445b      	add	r3, fp
 800b512:	461e      	mov	r6, r3
 800b514:	462c      	mov	r4, r5
 800b516:	4544      	cmp	r4, r8
 800b518:	d30e      	bcc.n	800b538 <__mdiff+0xf8>
 800b51a:	f108 0103 	add.w	r1, r8, #3
 800b51e:	1b49      	subs	r1, r1, r5
 800b520:	f021 0103 	bic.w	r1, r1, #3
 800b524:	3d03      	subs	r5, #3
 800b526:	45a8      	cmp	r8, r5
 800b528:	bf38      	it	cc
 800b52a:	2100      	movcc	r1, #0
 800b52c:	440b      	add	r3, r1
 800b52e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b532:	b191      	cbz	r1, 800b55a <__mdiff+0x11a>
 800b534:	6117      	str	r7, [r2, #16]
 800b536:	e79d      	b.n	800b474 <__mdiff+0x34>
 800b538:	f854 1b04 	ldr.w	r1, [r4], #4
 800b53c:	46e6      	mov	lr, ip
 800b53e:	0c08      	lsrs	r0, r1, #16
 800b540:	fa1c fc81 	uxtah	ip, ip, r1
 800b544:	4471      	add	r1, lr
 800b546:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b54a:	b289      	uxth	r1, r1
 800b54c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b550:	f846 1b04 	str.w	r1, [r6], #4
 800b554:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b558:	e7dd      	b.n	800b516 <__mdiff+0xd6>
 800b55a:	3f01      	subs	r7, #1
 800b55c:	e7e7      	b.n	800b52e <__mdiff+0xee>
 800b55e:	bf00      	nop
 800b560:	0800d7ca 	.word	0x0800d7ca
 800b564:	0800d7db 	.word	0x0800d7db

0800b568 <__ulp>:
 800b568:	b082      	sub	sp, #8
 800b56a:	ed8d 0b00 	vstr	d0, [sp]
 800b56e:	9a01      	ldr	r2, [sp, #4]
 800b570:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b0 <__ulp+0x48>)
 800b572:	4013      	ands	r3, r2
 800b574:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	dc08      	bgt.n	800b58e <__ulp+0x26>
 800b57c:	425b      	negs	r3, r3
 800b57e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b582:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b586:	da04      	bge.n	800b592 <__ulp+0x2a>
 800b588:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b58c:	4113      	asrs	r3, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	e008      	b.n	800b5a4 <__ulp+0x3c>
 800b592:	f1a2 0314 	sub.w	r3, r2, #20
 800b596:	2b1e      	cmp	r3, #30
 800b598:	bfda      	itte	le
 800b59a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b59e:	40da      	lsrle	r2, r3
 800b5a0:	2201      	movgt	r2, #1
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	ec41 0b10 	vmov	d0, r0, r1
 800b5ac:	b002      	add	sp, #8
 800b5ae:	4770      	bx	lr
 800b5b0:	7ff00000 	.word	0x7ff00000

0800b5b4 <__b2d>:
 800b5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b8:	6906      	ldr	r6, [r0, #16]
 800b5ba:	f100 0814 	add.w	r8, r0, #20
 800b5be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5c2:	1f37      	subs	r7, r6, #4
 800b5c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	f7ff fd4b 	bl	800b064 <__hi0bits>
 800b5ce:	f1c0 0320 	rsb	r3, r0, #32
 800b5d2:	280a      	cmp	r0, #10
 800b5d4:	600b      	str	r3, [r1, #0]
 800b5d6:	491b      	ldr	r1, [pc, #108]	@ (800b644 <__b2d+0x90>)
 800b5d8:	dc15      	bgt.n	800b606 <__b2d+0x52>
 800b5da:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5de:	fa22 f30c 	lsr.w	r3, r2, ip
 800b5e2:	45b8      	cmp	r8, r7
 800b5e4:	ea43 0501 	orr.w	r5, r3, r1
 800b5e8:	bf34      	ite	cc
 800b5ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b5ee:	2300      	movcs	r3, #0
 800b5f0:	3015      	adds	r0, #21
 800b5f2:	fa02 f000 	lsl.w	r0, r2, r0
 800b5f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b5fa:	4303      	orrs	r3, r0
 800b5fc:	461c      	mov	r4, r3
 800b5fe:	ec45 4b10 	vmov	d0, r4, r5
 800b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b606:	45b8      	cmp	r8, r7
 800b608:	bf3a      	itte	cc
 800b60a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b60e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b612:	2300      	movcs	r3, #0
 800b614:	380b      	subs	r0, #11
 800b616:	d012      	beq.n	800b63e <__b2d+0x8a>
 800b618:	f1c0 0120 	rsb	r1, r0, #32
 800b61c:	fa23 f401 	lsr.w	r4, r3, r1
 800b620:	4082      	lsls	r2, r0
 800b622:	4322      	orrs	r2, r4
 800b624:	4547      	cmp	r7, r8
 800b626:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b62a:	bf8c      	ite	hi
 800b62c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b630:	2200      	movls	r2, #0
 800b632:	4083      	lsls	r3, r0
 800b634:	40ca      	lsrs	r2, r1
 800b636:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b63a:	4313      	orrs	r3, r2
 800b63c:	e7de      	b.n	800b5fc <__b2d+0x48>
 800b63e:	ea42 0501 	orr.w	r5, r2, r1
 800b642:	e7db      	b.n	800b5fc <__b2d+0x48>
 800b644:	3ff00000 	.word	0x3ff00000

0800b648 <__d2b>:
 800b648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	460f      	mov	r7, r1
 800b64e:	2101      	movs	r1, #1
 800b650:	ec59 8b10 	vmov	r8, r9, d0
 800b654:	4616      	mov	r6, r2
 800b656:	f7ff fc13 	bl	800ae80 <_Balloc>
 800b65a:	4604      	mov	r4, r0
 800b65c:	b930      	cbnz	r0, 800b66c <__d2b+0x24>
 800b65e:	4602      	mov	r2, r0
 800b660:	4b23      	ldr	r3, [pc, #140]	@ (800b6f0 <__d2b+0xa8>)
 800b662:	4824      	ldr	r0, [pc, #144]	@ (800b6f4 <__d2b+0xac>)
 800b664:	f240 310f 	movw	r1, #783	@ 0x30f
 800b668:	f001 f91a 	bl	800c8a0 <__assert_func>
 800b66c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b674:	b10d      	cbz	r5, 800b67a <__d2b+0x32>
 800b676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	f1b8 0300 	subs.w	r3, r8, #0
 800b680:	d023      	beq.n	800b6ca <__d2b+0x82>
 800b682:	4668      	mov	r0, sp
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	f7ff fd0c 	bl	800b0a2 <__lo0bits>
 800b68a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b68e:	b1d0      	cbz	r0, 800b6c6 <__d2b+0x7e>
 800b690:	f1c0 0320 	rsb	r3, r0, #32
 800b694:	fa02 f303 	lsl.w	r3, r2, r3
 800b698:	430b      	orrs	r3, r1
 800b69a:	40c2      	lsrs	r2, r0
 800b69c:	6163      	str	r3, [r4, #20]
 800b69e:	9201      	str	r2, [sp, #4]
 800b6a0:	9b01      	ldr	r3, [sp, #4]
 800b6a2:	61a3      	str	r3, [r4, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bf0c      	ite	eq
 800b6a8:	2201      	moveq	r2, #1
 800b6aa:	2202      	movne	r2, #2
 800b6ac:	6122      	str	r2, [r4, #16]
 800b6ae:	b1a5      	cbz	r5, 800b6da <__d2b+0x92>
 800b6b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6b4:	4405      	add	r5, r0
 800b6b6:	603d      	str	r5, [r7, #0]
 800b6b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6bc:	6030      	str	r0, [r6, #0]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	b003      	add	sp, #12
 800b6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	6161      	str	r1, [r4, #20]
 800b6c8:	e7ea      	b.n	800b6a0 <__d2b+0x58>
 800b6ca:	a801      	add	r0, sp, #4
 800b6cc:	f7ff fce9 	bl	800b0a2 <__lo0bits>
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	6163      	str	r3, [r4, #20]
 800b6d4:	3020      	adds	r0, #32
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	e7e8      	b.n	800b6ac <__d2b+0x64>
 800b6da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6e2:	6038      	str	r0, [r7, #0]
 800b6e4:	6918      	ldr	r0, [r3, #16]
 800b6e6:	f7ff fcbd 	bl	800b064 <__hi0bits>
 800b6ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6ee:	e7e5      	b.n	800b6bc <__d2b+0x74>
 800b6f0:	0800d7ca 	.word	0x0800d7ca
 800b6f4:	0800d7db 	.word	0x0800d7db

0800b6f8 <__ratio>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	e9cd 1000 	strd	r1, r0, [sp]
 800b702:	a902      	add	r1, sp, #8
 800b704:	f7ff ff56 	bl	800b5b4 <__b2d>
 800b708:	9800      	ldr	r0, [sp, #0]
 800b70a:	a903      	add	r1, sp, #12
 800b70c:	ec55 4b10 	vmov	r4, r5, d0
 800b710:	f7ff ff50 	bl	800b5b4 <__b2d>
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	6919      	ldr	r1, [r3, #16]
 800b718:	9b00      	ldr	r3, [sp, #0]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	1ac9      	subs	r1, r1, r3
 800b71e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b722:	1a9b      	subs	r3, r3, r2
 800b724:	ec5b ab10 	vmov	sl, fp, d0
 800b728:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	bfce      	itee	gt
 800b730:	462a      	movgt	r2, r5
 800b732:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b736:	465a      	movle	r2, fp
 800b738:	462f      	mov	r7, r5
 800b73a:	46d9      	mov	r9, fp
 800b73c:	bfcc      	ite	gt
 800b73e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b742:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b746:	464b      	mov	r3, r9
 800b748:	4652      	mov	r2, sl
 800b74a:	4620      	mov	r0, r4
 800b74c:	4639      	mov	r1, r7
 800b74e:	f7f5 f8a5 	bl	800089c <__aeabi_ddiv>
 800b752:	ec41 0b10 	vmov	d0, r0, r1
 800b756:	b005      	add	sp, #20
 800b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b75c <__copybits>:
 800b75c:	3901      	subs	r1, #1
 800b75e:	b570      	push	{r4, r5, r6, lr}
 800b760:	1149      	asrs	r1, r1, #5
 800b762:	6914      	ldr	r4, [r2, #16]
 800b764:	3101      	adds	r1, #1
 800b766:	f102 0314 	add.w	r3, r2, #20
 800b76a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b76e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b772:	1f05      	subs	r5, r0, #4
 800b774:	42a3      	cmp	r3, r4
 800b776:	d30c      	bcc.n	800b792 <__copybits+0x36>
 800b778:	1aa3      	subs	r3, r4, r2
 800b77a:	3b11      	subs	r3, #17
 800b77c:	f023 0303 	bic.w	r3, r3, #3
 800b780:	3211      	adds	r2, #17
 800b782:	42a2      	cmp	r2, r4
 800b784:	bf88      	it	hi
 800b786:	2300      	movhi	r3, #0
 800b788:	4418      	add	r0, r3
 800b78a:	2300      	movs	r3, #0
 800b78c:	4288      	cmp	r0, r1
 800b78e:	d305      	bcc.n	800b79c <__copybits+0x40>
 800b790:	bd70      	pop	{r4, r5, r6, pc}
 800b792:	f853 6b04 	ldr.w	r6, [r3], #4
 800b796:	f845 6f04 	str.w	r6, [r5, #4]!
 800b79a:	e7eb      	b.n	800b774 <__copybits+0x18>
 800b79c:	f840 3b04 	str.w	r3, [r0], #4
 800b7a0:	e7f4      	b.n	800b78c <__copybits+0x30>

0800b7a2 <__any_on>:
 800b7a2:	f100 0214 	add.w	r2, r0, #20
 800b7a6:	6900      	ldr	r0, [r0, #16]
 800b7a8:	114b      	asrs	r3, r1, #5
 800b7aa:	4298      	cmp	r0, r3
 800b7ac:	b510      	push	{r4, lr}
 800b7ae:	db11      	blt.n	800b7d4 <__any_on+0x32>
 800b7b0:	dd0a      	ble.n	800b7c8 <__any_on+0x26>
 800b7b2:	f011 011f 	ands.w	r1, r1, #31
 800b7b6:	d007      	beq.n	800b7c8 <__any_on+0x26>
 800b7b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7bc:	fa24 f001 	lsr.w	r0, r4, r1
 800b7c0:	fa00 f101 	lsl.w	r1, r0, r1
 800b7c4:	428c      	cmp	r4, r1
 800b7c6:	d10b      	bne.n	800b7e0 <__any_on+0x3e>
 800b7c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d803      	bhi.n	800b7d8 <__any_on+0x36>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	e7f7      	b.n	800b7c8 <__any_on+0x26>
 800b7d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d0f5      	beq.n	800b7cc <__any_on+0x2a>
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	e7f6      	b.n	800b7d2 <__any_on+0x30>

0800b7e4 <sulp>:
 800b7e4:	b570      	push	{r4, r5, r6, lr}
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	ec45 4b10 	vmov	d0, r4, r5
 800b7ee:	4616      	mov	r6, r2
 800b7f0:	f7ff feba 	bl	800b568 <__ulp>
 800b7f4:	ec51 0b10 	vmov	r0, r1, d0
 800b7f8:	b17e      	cbz	r6, 800b81a <sulp+0x36>
 800b7fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b7fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b802:	2b00      	cmp	r3, #0
 800b804:	dd09      	ble.n	800b81a <sulp+0x36>
 800b806:	051b      	lsls	r3, r3, #20
 800b808:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b80c:	2400      	movs	r4, #0
 800b80e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b812:	4622      	mov	r2, r4
 800b814:	462b      	mov	r3, r5
 800b816:	f7f4 ff17 	bl	8000648 <__aeabi_dmul>
 800b81a:	ec41 0b10 	vmov	d0, r0, r1
 800b81e:	bd70      	pop	{r4, r5, r6, pc}

0800b820 <_strtod_l>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	b09f      	sub	sp, #124	@ 0x7c
 800b826:	460c      	mov	r4, r1
 800b828:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b82a:	2200      	movs	r2, #0
 800b82c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b82e:	9005      	str	r0, [sp, #20]
 800b830:	f04f 0a00 	mov.w	sl, #0
 800b834:	f04f 0b00 	mov.w	fp, #0
 800b838:	460a      	mov	r2, r1
 800b83a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b83c:	7811      	ldrb	r1, [r2, #0]
 800b83e:	292b      	cmp	r1, #43	@ 0x2b
 800b840:	d04a      	beq.n	800b8d8 <_strtod_l+0xb8>
 800b842:	d838      	bhi.n	800b8b6 <_strtod_l+0x96>
 800b844:	290d      	cmp	r1, #13
 800b846:	d832      	bhi.n	800b8ae <_strtod_l+0x8e>
 800b848:	2908      	cmp	r1, #8
 800b84a:	d832      	bhi.n	800b8b2 <_strtod_l+0x92>
 800b84c:	2900      	cmp	r1, #0
 800b84e:	d03b      	beq.n	800b8c8 <_strtod_l+0xa8>
 800b850:	2200      	movs	r2, #0
 800b852:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b854:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b856:	782a      	ldrb	r2, [r5, #0]
 800b858:	2a30      	cmp	r2, #48	@ 0x30
 800b85a:	f040 80b3 	bne.w	800b9c4 <_strtod_l+0x1a4>
 800b85e:	786a      	ldrb	r2, [r5, #1]
 800b860:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b864:	2a58      	cmp	r2, #88	@ 0x58
 800b866:	d16e      	bne.n	800b946 <_strtod_l+0x126>
 800b868:	9302      	str	r3, [sp, #8]
 800b86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	4a8e      	ldr	r2, [pc, #568]	@ (800baac <_strtod_l+0x28c>)
 800b874:	9805      	ldr	r0, [sp, #20]
 800b876:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b878:	a919      	add	r1, sp, #100	@ 0x64
 800b87a:	f001 f8ab 	bl	800c9d4 <__gethex>
 800b87e:	f010 060f 	ands.w	r6, r0, #15
 800b882:	4604      	mov	r4, r0
 800b884:	d005      	beq.n	800b892 <_strtod_l+0x72>
 800b886:	2e06      	cmp	r6, #6
 800b888:	d128      	bne.n	800b8dc <_strtod_l+0xbc>
 800b88a:	3501      	adds	r5, #1
 800b88c:	2300      	movs	r3, #0
 800b88e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b890:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b894:	2b00      	cmp	r3, #0
 800b896:	f040 858e 	bne.w	800c3b6 <_strtod_l+0xb96>
 800b89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b89c:	b1cb      	cbz	r3, 800b8d2 <_strtod_l+0xb2>
 800b89e:	4652      	mov	r2, sl
 800b8a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b8a4:	ec43 2b10 	vmov	d0, r2, r3
 800b8a8:	b01f      	add	sp, #124	@ 0x7c
 800b8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ae:	2920      	cmp	r1, #32
 800b8b0:	d1ce      	bne.n	800b850 <_strtod_l+0x30>
 800b8b2:	3201      	adds	r2, #1
 800b8b4:	e7c1      	b.n	800b83a <_strtod_l+0x1a>
 800b8b6:	292d      	cmp	r1, #45	@ 0x2d
 800b8b8:	d1ca      	bne.n	800b850 <_strtod_l+0x30>
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8be:	1c51      	adds	r1, r2, #1
 800b8c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8c2:	7852      	ldrb	r2, [r2, #1]
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	d1c5      	bne.n	800b854 <_strtod_l+0x34>
 800b8c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 8570 	bne.w	800c3b2 <_strtod_l+0xb92>
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	e7e5      	b.n	800b8a4 <_strtod_l+0x84>
 800b8d8:	2100      	movs	r1, #0
 800b8da:	e7ef      	b.n	800b8bc <_strtod_l+0x9c>
 800b8dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8de:	b13a      	cbz	r2, 800b8f0 <_strtod_l+0xd0>
 800b8e0:	2135      	movs	r1, #53	@ 0x35
 800b8e2:	a81c      	add	r0, sp, #112	@ 0x70
 800b8e4:	f7ff ff3a 	bl	800b75c <__copybits>
 800b8e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8ea:	9805      	ldr	r0, [sp, #20]
 800b8ec:	f7ff fb08 	bl	800af00 <_Bfree>
 800b8f0:	3e01      	subs	r6, #1
 800b8f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b8f4:	2e04      	cmp	r6, #4
 800b8f6:	d806      	bhi.n	800b906 <_strtod_l+0xe6>
 800b8f8:	e8df f006 	tbb	[pc, r6]
 800b8fc:	201d0314 	.word	0x201d0314
 800b900:	14          	.byte	0x14
 800b901:	00          	.byte	0x00
 800b902:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b906:	05e1      	lsls	r1, r4, #23
 800b908:	bf48      	it	mi
 800b90a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b90e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b912:	0d1b      	lsrs	r3, r3, #20
 800b914:	051b      	lsls	r3, r3, #20
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1bb      	bne.n	800b892 <_strtod_l+0x72>
 800b91a:	f7fe fb31 	bl	8009f80 <__errno>
 800b91e:	2322      	movs	r3, #34	@ 0x22
 800b920:	6003      	str	r3, [r0, #0]
 800b922:	e7b6      	b.n	800b892 <_strtod_l+0x72>
 800b924:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b928:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b92c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b930:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b934:	e7e7      	b.n	800b906 <_strtod_l+0xe6>
 800b936:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bab4 <_strtod_l+0x294>
 800b93a:	e7e4      	b.n	800b906 <_strtod_l+0xe6>
 800b93c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b940:	f04f 3aff 	mov.w	sl, #4294967295
 800b944:	e7df      	b.n	800b906 <_strtod_l+0xe6>
 800b946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b94c:	785b      	ldrb	r3, [r3, #1]
 800b94e:	2b30      	cmp	r3, #48	@ 0x30
 800b950:	d0f9      	beq.n	800b946 <_strtod_l+0x126>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d09d      	beq.n	800b892 <_strtod_l+0x72>
 800b956:	2301      	movs	r3, #1
 800b958:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b95c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b95e:	2300      	movs	r3, #0
 800b960:	9308      	str	r3, [sp, #32]
 800b962:	930a      	str	r3, [sp, #40]	@ 0x28
 800b964:	461f      	mov	r7, r3
 800b966:	220a      	movs	r2, #10
 800b968:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b96a:	7805      	ldrb	r5, [r0, #0]
 800b96c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b970:	b2d9      	uxtb	r1, r3
 800b972:	2909      	cmp	r1, #9
 800b974:	d928      	bls.n	800b9c8 <_strtod_l+0x1a8>
 800b976:	494e      	ldr	r1, [pc, #312]	@ (800bab0 <_strtod_l+0x290>)
 800b978:	2201      	movs	r2, #1
 800b97a:	f000 ff59 	bl	800c830 <strncmp>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d032      	beq.n	800b9e8 <_strtod_l+0x1c8>
 800b982:	2000      	movs	r0, #0
 800b984:	462a      	mov	r2, r5
 800b986:	4681      	mov	r9, r0
 800b988:	463d      	mov	r5, r7
 800b98a:	4603      	mov	r3, r0
 800b98c:	2a65      	cmp	r2, #101	@ 0x65
 800b98e:	d001      	beq.n	800b994 <_strtod_l+0x174>
 800b990:	2a45      	cmp	r2, #69	@ 0x45
 800b992:	d114      	bne.n	800b9be <_strtod_l+0x19e>
 800b994:	b91d      	cbnz	r5, 800b99e <_strtod_l+0x17e>
 800b996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b998:	4302      	orrs	r2, r0
 800b99a:	d095      	beq.n	800b8c8 <_strtod_l+0xa8>
 800b99c:	2500      	movs	r5, #0
 800b99e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b9a0:	1c62      	adds	r2, r4, #1
 800b9a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9a4:	7862      	ldrb	r2, [r4, #1]
 800b9a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b9a8:	d077      	beq.n	800ba9a <_strtod_l+0x27a>
 800b9aa:	2a2d      	cmp	r2, #45	@ 0x2d
 800b9ac:	d07b      	beq.n	800baa6 <_strtod_l+0x286>
 800b9ae:	f04f 0c00 	mov.w	ip, #0
 800b9b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b9b6:	2909      	cmp	r1, #9
 800b9b8:	f240 8082 	bls.w	800bac0 <_strtod_l+0x2a0>
 800b9bc:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9be:	f04f 0800 	mov.w	r8, #0
 800b9c2:	e0a2      	b.n	800bb0a <_strtod_l+0x2ea>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	e7c7      	b.n	800b958 <_strtod_l+0x138>
 800b9c8:	2f08      	cmp	r7, #8
 800b9ca:	bfd5      	itete	le
 800b9cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b9ce:	9908      	ldrgt	r1, [sp, #32]
 800b9d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b9d8:	f100 0001 	add.w	r0, r0, #1
 800b9dc:	bfd4      	ite	le
 800b9de:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b9e0:	9308      	strgt	r3, [sp, #32]
 800b9e2:	3701      	adds	r7, #1
 800b9e4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9e6:	e7bf      	b.n	800b968 <_strtod_l+0x148>
 800b9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9ee:	785a      	ldrb	r2, [r3, #1]
 800b9f0:	b37f      	cbz	r7, 800ba52 <_strtod_l+0x232>
 800b9f2:	4681      	mov	r9, r0
 800b9f4:	463d      	mov	r5, r7
 800b9f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b9fa:	2b09      	cmp	r3, #9
 800b9fc:	d912      	bls.n	800ba24 <_strtod_l+0x204>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7c4      	b.n	800b98c <_strtod_l+0x16c>
 800ba02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba08:	785a      	ldrb	r2, [r3, #1]
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	2a30      	cmp	r2, #48	@ 0x30
 800ba0e:	d0f8      	beq.n	800ba02 <_strtod_l+0x1e2>
 800ba10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	f200 84d3 	bhi.w	800c3c0 <_strtod_l+0xba0>
 800ba1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba1e:	4681      	mov	r9, r0
 800ba20:	2000      	movs	r0, #0
 800ba22:	4605      	mov	r5, r0
 800ba24:	3a30      	subs	r2, #48	@ 0x30
 800ba26:	f100 0301 	add.w	r3, r0, #1
 800ba2a:	d02a      	beq.n	800ba82 <_strtod_l+0x262>
 800ba2c:	4499      	add	r9, r3
 800ba2e:	eb00 0c05 	add.w	ip, r0, r5
 800ba32:	462b      	mov	r3, r5
 800ba34:	210a      	movs	r1, #10
 800ba36:	4563      	cmp	r3, ip
 800ba38:	d10d      	bne.n	800ba56 <_strtod_l+0x236>
 800ba3a:	1c69      	adds	r1, r5, #1
 800ba3c:	4401      	add	r1, r0
 800ba3e:	4428      	add	r0, r5
 800ba40:	2808      	cmp	r0, #8
 800ba42:	dc16      	bgt.n	800ba72 <_strtod_l+0x252>
 800ba44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba46:	230a      	movs	r3, #10
 800ba48:	fb03 2300 	mla	r3, r3, r0, r2
 800ba4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e018      	b.n	800ba84 <_strtod_l+0x264>
 800ba52:	4638      	mov	r0, r7
 800ba54:	e7da      	b.n	800ba0c <_strtod_l+0x1ec>
 800ba56:	2b08      	cmp	r3, #8
 800ba58:	f103 0301 	add.w	r3, r3, #1
 800ba5c:	dc03      	bgt.n	800ba66 <_strtod_l+0x246>
 800ba5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba60:	434e      	muls	r6, r1
 800ba62:	960a      	str	r6, [sp, #40]	@ 0x28
 800ba64:	e7e7      	b.n	800ba36 <_strtod_l+0x216>
 800ba66:	2b10      	cmp	r3, #16
 800ba68:	bfde      	ittt	le
 800ba6a:	9e08      	ldrle	r6, [sp, #32]
 800ba6c:	434e      	mulle	r6, r1
 800ba6e:	9608      	strle	r6, [sp, #32]
 800ba70:	e7e1      	b.n	800ba36 <_strtod_l+0x216>
 800ba72:	280f      	cmp	r0, #15
 800ba74:	dceb      	bgt.n	800ba4e <_strtod_l+0x22e>
 800ba76:	9808      	ldr	r0, [sp, #32]
 800ba78:	230a      	movs	r3, #10
 800ba7a:	fb03 2300 	mla	r3, r3, r0, r2
 800ba7e:	9308      	str	r3, [sp, #32]
 800ba80:	e7e5      	b.n	800ba4e <_strtod_l+0x22e>
 800ba82:	4629      	mov	r1, r5
 800ba84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba86:	1c50      	adds	r0, r2, #1
 800ba88:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba8a:	7852      	ldrb	r2, [r2, #1]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	460d      	mov	r5, r1
 800ba90:	e7b1      	b.n	800b9f6 <_strtod_l+0x1d6>
 800ba92:	f04f 0900 	mov.w	r9, #0
 800ba96:	2301      	movs	r3, #1
 800ba98:	e77d      	b.n	800b996 <_strtod_l+0x176>
 800ba9a:	f04f 0c00 	mov.w	ip, #0
 800ba9e:	1ca2      	adds	r2, r4, #2
 800baa0:	9219      	str	r2, [sp, #100]	@ 0x64
 800baa2:	78a2      	ldrb	r2, [r4, #2]
 800baa4:	e785      	b.n	800b9b2 <_strtod_l+0x192>
 800baa6:	f04f 0c01 	mov.w	ip, #1
 800baaa:	e7f8      	b.n	800ba9e <_strtod_l+0x27e>
 800baac:	0800d948 	.word	0x0800d948
 800bab0:	0800d930 	.word	0x0800d930
 800bab4:	7ff00000 	.word	0x7ff00000
 800bab8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baba:	1c51      	adds	r1, r2, #1
 800babc:	9119      	str	r1, [sp, #100]	@ 0x64
 800babe:	7852      	ldrb	r2, [r2, #1]
 800bac0:	2a30      	cmp	r2, #48	@ 0x30
 800bac2:	d0f9      	beq.n	800bab8 <_strtod_l+0x298>
 800bac4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bac8:	2908      	cmp	r1, #8
 800baca:	f63f af78 	bhi.w	800b9be <_strtod_l+0x19e>
 800bace:	3a30      	subs	r2, #48	@ 0x30
 800bad0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bad2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bad4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bad6:	f04f 080a 	mov.w	r8, #10
 800bada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800badc:	1c56      	adds	r6, r2, #1
 800bade:	9619      	str	r6, [sp, #100]	@ 0x64
 800bae0:	7852      	ldrb	r2, [r2, #1]
 800bae2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bae6:	f1be 0f09 	cmp.w	lr, #9
 800baea:	d939      	bls.n	800bb60 <_strtod_l+0x340>
 800baec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800baee:	1a76      	subs	r6, r6, r1
 800baf0:	2e08      	cmp	r6, #8
 800baf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800baf6:	dc03      	bgt.n	800bb00 <_strtod_l+0x2e0>
 800baf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bafa:	4588      	cmp	r8, r1
 800bafc:	bfa8      	it	ge
 800bafe:	4688      	movge	r8, r1
 800bb00:	f1bc 0f00 	cmp.w	ip, #0
 800bb04:	d001      	beq.n	800bb0a <_strtod_l+0x2ea>
 800bb06:	f1c8 0800 	rsb	r8, r8, #0
 800bb0a:	2d00      	cmp	r5, #0
 800bb0c:	d14e      	bne.n	800bbac <_strtod_l+0x38c>
 800bb0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb10:	4308      	orrs	r0, r1
 800bb12:	f47f aebe 	bne.w	800b892 <_strtod_l+0x72>
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f47f aed6 	bne.w	800b8c8 <_strtod_l+0xa8>
 800bb1c:	2a69      	cmp	r2, #105	@ 0x69
 800bb1e:	d028      	beq.n	800bb72 <_strtod_l+0x352>
 800bb20:	dc25      	bgt.n	800bb6e <_strtod_l+0x34e>
 800bb22:	2a49      	cmp	r2, #73	@ 0x49
 800bb24:	d025      	beq.n	800bb72 <_strtod_l+0x352>
 800bb26:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb28:	f47f aece 	bne.w	800b8c8 <_strtod_l+0xa8>
 800bb2c:	499b      	ldr	r1, [pc, #620]	@ (800bd9c <_strtod_l+0x57c>)
 800bb2e:	a819      	add	r0, sp, #100	@ 0x64
 800bb30:	f001 f972 	bl	800ce18 <__match>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	f43f aec7 	beq.w	800b8c8 <_strtod_l+0xa8>
 800bb3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b28      	cmp	r3, #40	@ 0x28
 800bb40:	d12e      	bne.n	800bba0 <_strtod_l+0x380>
 800bb42:	4997      	ldr	r1, [pc, #604]	@ (800bda0 <_strtod_l+0x580>)
 800bb44:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb46:	a819      	add	r0, sp, #100	@ 0x64
 800bb48:	f001 f97a 	bl	800ce40 <__hexnan>
 800bb4c:	2805      	cmp	r0, #5
 800bb4e:	d127      	bne.n	800bba0 <_strtod_l+0x380>
 800bb50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bb56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bb5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bb5e:	e698      	b.n	800b892 <_strtod_l+0x72>
 800bb60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb62:	fb08 2101 	mla	r1, r8, r1, r2
 800bb66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bb6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb6c:	e7b5      	b.n	800bada <_strtod_l+0x2ba>
 800bb6e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bb70:	e7da      	b.n	800bb28 <_strtod_l+0x308>
 800bb72:	498c      	ldr	r1, [pc, #560]	@ (800bda4 <_strtod_l+0x584>)
 800bb74:	a819      	add	r0, sp, #100	@ 0x64
 800bb76:	f001 f94f 	bl	800ce18 <__match>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f43f aea4 	beq.w	800b8c8 <_strtod_l+0xa8>
 800bb80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb82:	4989      	ldr	r1, [pc, #548]	@ (800bda8 <_strtod_l+0x588>)
 800bb84:	3b01      	subs	r3, #1
 800bb86:	a819      	add	r0, sp, #100	@ 0x64
 800bb88:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb8a:	f001 f945 	bl	800ce18 <__match>
 800bb8e:	b910      	cbnz	r0, 800bb96 <_strtod_l+0x376>
 800bb90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb92:	3301      	adds	r3, #1
 800bb94:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bdb8 <_strtod_l+0x598>
 800bb9a:	f04f 0a00 	mov.w	sl, #0
 800bb9e:	e678      	b.n	800b892 <_strtod_l+0x72>
 800bba0:	4882      	ldr	r0, [pc, #520]	@ (800bdac <_strtod_l+0x58c>)
 800bba2:	f000 fe75 	bl	800c890 <nan>
 800bba6:	ec5b ab10 	vmov	sl, fp, d0
 800bbaa:	e672      	b.n	800b892 <_strtod_l+0x72>
 800bbac:	eba8 0309 	sub.w	r3, r8, r9
 800bbb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb4:	2f00      	cmp	r7, #0
 800bbb6:	bf08      	it	eq
 800bbb8:	462f      	moveq	r7, r5
 800bbba:	2d10      	cmp	r5, #16
 800bbbc:	462c      	mov	r4, r5
 800bbbe:	bfa8      	it	ge
 800bbc0:	2410      	movge	r4, #16
 800bbc2:	f7f4 fcc7 	bl	8000554 <__aeabi_ui2d>
 800bbc6:	2d09      	cmp	r5, #9
 800bbc8:	4682      	mov	sl, r0
 800bbca:	468b      	mov	fp, r1
 800bbcc:	dc13      	bgt.n	800bbf6 <_strtod_l+0x3d6>
 800bbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f43f ae5e 	beq.w	800b892 <_strtod_l+0x72>
 800bbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd8:	dd78      	ble.n	800bccc <_strtod_l+0x4ac>
 800bbda:	2b16      	cmp	r3, #22
 800bbdc:	dc5f      	bgt.n	800bc9e <_strtod_l+0x47e>
 800bbde:	4974      	ldr	r1, [pc, #464]	@ (800bdb0 <_strtod_l+0x590>)
 800bbe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe8:	4652      	mov	r2, sl
 800bbea:	465b      	mov	r3, fp
 800bbec:	f7f4 fd2c 	bl	8000648 <__aeabi_dmul>
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	468b      	mov	fp, r1
 800bbf4:	e64d      	b.n	800b892 <_strtod_l+0x72>
 800bbf6:	4b6e      	ldr	r3, [pc, #440]	@ (800bdb0 <_strtod_l+0x590>)
 800bbf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc00:	f7f4 fd22 	bl	8000648 <__aeabi_dmul>
 800bc04:	4682      	mov	sl, r0
 800bc06:	9808      	ldr	r0, [sp, #32]
 800bc08:	468b      	mov	fp, r1
 800bc0a:	f7f4 fca3 	bl	8000554 <__aeabi_ui2d>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4650      	mov	r0, sl
 800bc14:	4659      	mov	r1, fp
 800bc16:	f7f4 fb61 	bl	80002dc <__adddf3>
 800bc1a:	2d0f      	cmp	r5, #15
 800bc1c:	4682      	mov	sl, r0
 800bc1e:	468b      	mov	fp, r1
 800bc20:	ddd5      	ble.n	800bbce <_strtod_l+0x3ae>
 800bc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc24:	1b2c      	subs	r4, r5, r4
 800bc26:	441c      	add	r4, r3
 800bc28:	2c00      	cmp	r4, #0
 800bc2a:	f340 8096 	ble.w	800bd5a <_strtod_l+0x53a>
 800bc2e:	f014 030f 	ands.w	r3, r4, #15
 800bc32:	d00a      	beq.n	800bc4a <_strtod_l+0x42a>
 800bc34:	495e      	ldr	r1, [pc, #376]	@ (800bdb0 <_strtod_l+0x590>)
 800bc36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	465b      	mov	r3, fp
 800bc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc42:	f7f4 fd01 	bl	8000648 <__aeabi_dmul>
 800bc46:	4682      	mov	sl, r0
 800bc48:	468b      	mov	fp, r1
 800bc4a:	f034 040f 	bics.w	r4, r4, #15
 800bc4e:	d073      	beq.n	800bd38 <_strtod_l+0x518>
 800bc50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bc54:	dd48      	ble.n	800bce8 <_strtod_l+0x4c8>
 800bc56:	2400      	movs	r4, #0
 800bc58:	46a0      	mov	r8, r4
 800bc5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc5c:	46a1      	mov	r9, r4
 800bc5e:	9a05      	ldr	r2, [sp, #20]
 800bc60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bdb8 <_strtod_l+0x598>
 800bc64:	2322      	movs	r3, #34	@ 0x22
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	f04f 0a00 	mov.w	sl, #0
 800bc6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f43f ae0f 	beq.w	800b892 <_strtod_l+0x72>
 800bc74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc76:	9805      	ldr	r0, [sp, #20]
 800bc78:	f7ff f942 	bl	800af00 <_Bfree>
 800bc7c:	9805      	ldr	r0, [sp, #20]
 800bc7e:	4649      	mov	r1, r9
 800bc80:	f7ff f93e 	bl	800af00 <_Bfree>
 800bc84:	9805      	ldr	r0, [sp, #20]
 800bc86:	4641      	mov	r1, r8
 800bc88:	f7ff f93a 	bl	800af00 <_Bfree>
 800bc8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc8e:	9805      	ldr	r0, [sp, #20]
 800bc90:	f7ff f936 	bl	800af00 <_Bfree>
 800bc94:	9805      	ldr	r0, [sp, #20]
 800bc96:	4621      	mov	r1, r4
 800bc98:	f7ff f932 	bl	800af00 <_Bfree>
 800bc9c:	e5f9      	b.n	800b892 <_strtod_l+0x72>
 800bc9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bca4:	4293      	cmp	r3, r2
 800bca6:	dbbc      	blt.n	800bc22 <_strtod_l+0x402>
 800bca8:	4c41      	ldr	r4, [pc, #260]	@ (800bdb0 <_strtod_l+0x590>)
 800bcaa:	f1c5 050f 	rsb	r5, r5, #15
 800bcae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bcb2:	4652      	mov	r2, sl
 800bcb4:	465b      	mov	r3, fp
 800bcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcba:	f7f4 fcc5 	bl	8000648 <__aeabi_dmul>
 800bcbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc0:	1b5d      	subs	r5, r3, r5
 800bcc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bcc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bcca:	e78f      	b.n	800bbec <_strtod_l+0x3cc>
 800bccc:	3316      	adds	r3, #22
 800bcce:	dba8      	blt.n	800bc22 <_strtod_l+0x402>
 800bcd0:	4b37      	ldr	r3, [pc, #220]	@ (800bdb0 <_strtod_l+0x590>)
 800bcd2:	eba9 0808 	sub.w	r8, r9, r8
 800bcd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bcda:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bcde:	4650      	mov	r0, sl
 800bce0:	4659      	mov	r1, fp
 800bce2:	f7f4 fddb 	bl	800089c <__aeabi_ddiv>
 800bce6:	e783      	b.n	800bbf0 <_strtod_l+0x3d0>
 800bce8:	4b32      	ldr	r3, [pc, #200]	@ (800bdb4 <_strtod_l+0x594>)
 800bcea:	9308      	str	r3, [sp, #32]
 800bcec:	2300      	movs	r3, #0
 800bcee:	1124      	asrs	r4, r4, #4
 800bcf0:	4650      	mov	r0, sl
 800bcf2:	4659      	mov	r1, fp
 800bcf4:	461e      	mov	r6, r3
 800bcf6:	2c01      	cmp	r4, #1
 800bcf8:	dc21      	bgt.n	800bd3e <_strtod_l+0x51e>
 800bcfa:	b10b      	cbz	r3, 800bd00 <_strtod_l+0x4e0>
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	468b      	mov	fp, r1
 800bd00:	492c      	ldr	r1, [pc, #176]	@ (800bdb4 <_strtod_l+0x594>)
 800bd02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd12:	f7f4 fc99 	bl	8000648 <__aeabi_dmul>
 800bd16:	4b28      	ldr	r3, [pc, #160]	@ (800bdb8 <_strtod_l+0x598>)
 800bd18:	460a      	mov	r2, r1
 800bd1a:	400b      	ands	r3, r1
 800bd1c:	4927      	ldr	r1, [pc, #156]	@ (800bdbc <_strtod_l+0x59c>)
 800bd1e:	428b      	cmp	r3, r1
 800bd20:	4682      	mov	sl, r0
 800bd22:	d898      	bhi.n	800bc56 <_strtod_l+0x436>
 800bd24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd28:	428b      	cmp	r3, r1
 800bd2a:	bf86      	itte	hi
 800bd2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bdc0 <_strtod_l+0x5a0>
 800bd30:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd38:	2300      	movs	r3, #0
 800bd3a:	9308      	str	r3, [sp, #32]
 800bd3c:	e07a      	b.n	800be34 <_strtod_l+0x614>
 800bd3e:	07e2      	lsls	r2, r4, #31
 800bd40:	d505      	bpl.n	800bd4e <_strtod_l+0x52e>
 800bd42:	9b08      	ldr	r3, [sp, #32]
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fc7e 	bl	8000648 <__aeabi_dmul>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	9a08      	ldr	r2, [sp, #32]
 800bd50:	3208      	adds	r2, #8
 800bd52:	3601      	adds	r6, #1
 800bd54:	1064      	asrs	r4, r4, #1
 800bd56:	9208      	str	r2, [sp, #32]
 800bd58:	e7cd      	b.n	800bcf6 <_strtod_l+0x4d6>
 800bd5a:	d0ed      	beq.n	800bd38 <_strtod_l+0x518>
 800bd5c:	4264      	negs	r4, r4
 800bd5e:	f014 020f 	ands.w	r2, r4, #15
 800bd62:	d00a      	beq.n	800bd7a <_strtod_l+0x55a>
 800bd64:	4b12      	ldr	r3, [pc, #72]	@ (800bdb0 <_strtod_l+0x590>)
 800bd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd6a:	4650      	mov	r0, sl
 800bd6c:	4659      	mov	r1, fp
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fd93 	bl	800089c <__aeabi_ddiv>
 800bd76:	4682      	mov	sl, r0
 800bd78:	468b      	mov	fp, r1
 800bd7a:	1124      	asrs	r4, r4, #4
 800bd7c:	d0dc      	beq.n	800bd38 <_strtod_l+0x518>
 800bd7e:	2c1f      	cmp	r4, #31
 800bd80:	dd20      	ble.n	800bdc4 <_strtod_l+0x5a4>
 800bd82:	2400      	movs	r4, #0
 800bd84:	46a0      	mov	r8, r4
 800bd86:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd88:	46a1      	mov	r9, r4
 800bd8a:	9a05      	ldr	r2, [sp, #20]
 800bd8c:	2322      	movs	r3, #34	@ 0x22
 800bd8e:	f04f 0a00 	mov.w	sl, #0
 800bd92:	f04f 0b00 	mov.w	fp, #0
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e768      	b.n	800bc6c <_strtod_l+0x44c>
 800bd9a:	bf00      	nop
 800bd9c:	0800d722 	.word	0x0800d722
 800bda0:	0800d934 	.word	0x0800d934
 800bda4:	0800d71a 	.word	0x0800d71a
 800bda8:	0800d751 	.word	0x0800d751
 800bdac:	0800d9dc 	.word	0x0800d9dc
 800bdb0:	0800d868 	.word	0x0800d868
 800bdb4:	0800d840 	.word	0x0800d840
 800bdb8:	7ff00000 	.word	0x7ff00000
 800bdbc:	7ca00000 	.word	0x7ca00000
 800bdc0:	7fefffff 	.word	0x7fefffff
 800bdc4:	f014 0310 	ands.w	r3, r4, #16
 800bdc8:	bf18      	it	ne
 800bdca:	236a      	movne	r3, #106	@ 0x6a
 800bdcc:	4ea9      	ldr	r6, [pc, #676]	@ (800c074 <_strtod_l+0x854>)
 800bdce:	9308      	str	r3, [sp, #32]
 800bdd0:	4650      	mov	r0, sl
 800bdd2:	4659      	mov	r1, fp
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	07e2      	lsls	r2, r4, #31
 800bdd8:	d504      	bpl.n	800bde4 <_strtod_l+0x5c4>
 800bdda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdde:	f7f4 fc33 	bl	8000648 <__aeabi_dmul>
 800bde2:	2301      	movs	r3, #1
 800bde4:	1064      	asrs	r4, r4, #1
 800bde6:	f106 0608 	add.w	r6, r6, #8
 800bdea:	d1f4      	bne.n	800bdd6 <_strtod_l+0x5b6>
 800bdec:	b10b      	cbz	r3, 800bdf2 <_strtod_l+0x5d2>
 800bdee:	4682      	mov	sl, r0
 800bdf0:	468b      	mov	fp, r1
 800bdf2:	9b08      	ldr	r3, [sp, #32]
 800bdf4:	b1b3      	cbz	r3, 800be24 <_strtod_l+0x604>
 800bdf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bdfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	4659      	mov	r1, fp
 800be02:	dd0f      	ble.n	800be24 <_strtod_l+0x604>
 800be04:	2b1f      	cmp	r3, #31
 800be06:	dd55      	ble.n	800beb4 <_strtod_l+0x694>
 800be08:	2b34      	cmp	r3, #52	@ 0x34
 800be0a:	bfde      	ittt	le
 800be0c:	f04f 33ff 	movle.w	r3, #4294967295
 800be10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be14:	4093      	lslle	r3, r2
 800be16:	f04f 0a00 	mov.w	sl, #0
 800be1a:	bfcc      	ite	gt
 800be1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be20:	ea03 0b01 	andle.w	fp, r3, r1
 800be24:	2200      	movs	r2, #0
 800be26:	2300      	movs	r3, #0
 800be28:	4650      	mov	r0, sl
 800be2a:	4659      	mov	r1, fp
 800be2c:	f7f4 fe74 	bl	8000b18 <__aeabi_dcmpeq>
 800be30:	2800      	cmp	r0, #0
 800be32:	d1a6      	bne.n	800bd82 <_strtod_l+0x562>
 800be34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be3a:	9805      	ldr	r0, [sp, #20]
 800be3c:	462b      	mov	r3, r5
 800be3e:	463a      	mov	r2, r7
 800be40:	f7ff f8c6 	bl	800afd0 <__s2b>
 800be44:	900a      	str	r0, [sp, #40]	@ 0x28
 800be46:	2800      	cmp	r0, #0
 800be48:	f43f af05 	beq.w	800bc56 <_strtod_l+0x436>
 800be4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be4e:	2a00      	cmp	r2, #0
 800be50:	eba9 0308 	sub.w	r3, r9, r8
 800be54:	bfa8      	it	ge
 800be56:	2300      	movge	r3, #0
 800be58:	9312      	str	r3, [sp, #72]	@ 0x48
 800be5a:	2400      	movs	r4, #0
 800be5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be60:	9316      	str	r3, [sp, #88]	@ 0x58
 800be62:	46a0      	mov	r8, r4
 800be64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be66:	9805      	ldr	r0, [sp, #20]
 800be68:	6859      	ldr	r1, [r3, #4]
 800be6a:	f7ff f809 	bl	800ae80 <_Balloc>
 800be6e:	4681      	mov	r9, r0
 800be70:	2800      	cmp	r0, #0
 800be72:	f43f aef4 	beq.w	800bc5e <_strtod_l+0x43e>
 800be76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	3202      	adds	r2, #2
 800be7c:	f103 010c 	add.w	r1, r3, #12
 800be80:	0092      	lsls	r2, r2, #2
 800be82:	300c      	adds	r0, #12
 800be84:	f000 fcf6 	bl	800c874 <memcpy>
 800be88:	ec4b ab10 	vmov	d0, sl, fp
 800be8c:	9805      	ldr	r0, [sp, #20]
 800be8e:	aa1c      	add	r2, sp, #112	@ 0x70
 800be90:	a91b      	add	r1, sp, #108	@ 0x6c
 800be92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800be96:	f7ff fbd7 	bl	800b648 <__d2b>
 800be9a:	901a      	str	r0, [sp, #104]	@ 0x68
 800be9c:	2800      	cmp	r0, #0
 800be9e:	f43f aede 	beq.w	800bc5e <_strtod_l+0x43e>
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	2101      	movs	r1, #1
 800bea6:	f7ff f929 	bl	800b0fc <__i2b>
 800beaa:	4680      	mov	r8, r0
 800beac:	b948      	cbnz	r0, 800bec2 <_strtod_l+0x6a2>
 800beae:	f04f 0800 	mov.w	r8, #0
 800beb2:	e6d4      	b.n	800bc5e <_strtod_l+0x43e>
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bebc:	ea03 0a0a 	and.w	sl, r3, sl
 800bec0:	e7b0      	b.n	800be24 <_strtod_l+0x604>
 800bec2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bec4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bec6:	2d00      	cmp	r5, #0
 800bec8:	bfab      	itete	ge
 800beca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800becc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bece:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bed0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bed2:	bfac      	ite	ge
 800bed4:	18ef      	addge	r7, r5, r3
 800bed6:	1b5e      	sublt	r6, r3, r5
 800bed8:	9b08      	ldr	r3, [sp, #32]
 800beda:	1aed      	subs	r5, r5, r3
 800bedc:	4415      	add	r5, r2
 800bede:	4b66      	ldr	r3, [pc, #408]	@ (800c078 <_strtod_l+0x858>)
 800bee0:	3d01      	subs	r5, #1
 800bee2:	429d      	cmp	r5, r3
 800bee4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bee8:	da50      	bge.n	800bf8c <_strtod_l+0x76c>
 800beea:	1b5b      	subs	r3, r3, r5
 800beec:	2b1f      	cmp	r3, #31
 800beee:	eba2 0203 	sub.w	r2, r2, r3
 800bef2:	f04f 0101 	mov.w	r1, #1
 800bef6:	dc3d      	bgt.n	800bf74 <_strtod_l+0x754>
 800bef8:	fa01 f303 	lsl.w	r3, r1, r3
 800befc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800befe:	2300      	movs	r3, #0
 800bf00:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf02:	18bd      	adds	r5, r7, r2
 800bf04:	9b08      	ldr	r3, [sp, #32]
 800bf06:	42af      	cmp	r7, r5
 800bf08:	4416      	add	r6, r2
 800bf0a:	441e      	add	r6, r3
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	bfa8      	it	ge
 800bf10:	462b      	movge	r3, r5
 800bf12:	42b3      	cmp	r3, r6
 800bf14:	bfa8      	it	ge
 800bf16:	4633      	movge	r3, r6
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfc2      	ittt	gt
 800bf1c:	1aed      	subgt	r5, r5, r3
 800bf1e:	1af6      	subgt	r6, r6, r3
 800bf20:	1aff      	subgt	r7, r7, r3
 800bf22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dd16      	ble.n	800bf56 <_strtod_l+0x736>
 800bf28:	4641      	mov	r1, r8
 800bf2a:	9805      	ldr	r0, [sp, #20]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f7ff f9a5 	bl	800b27c <__pow5mult>
 800bf32:	4680      	mov	r8, r0
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d0ba      	beq.n	800beae <_strtod_l+0x68e>
 800bf38:	4601      	mov	r1, r0
 800bf3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf3c:	9805      	ldr	r0, [sp, #20]
 800bf3e:	f7ff f8f3 	bl	800b128 <__multiply>
 800bf42:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f43f ae8a 	beq.w	800bc5e <_strtod_l+0x43e>
 800bf4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf4c:	9805      	ldr	r0, [sp, #20]
 800bf4e:	f7fe ffd7 	bl	800af00 <_Bfree>
 800bf52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf54:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf56:	2d00      	cmp	r5, #0
 800bf58:	dc1d      	bgt.n	800bf96 <_strtod_l+0x776>
 800bf5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dd23      	ble.n	800bfa8 <_strtod_l+0x788>
 800bf60:	4649      	mov	r1, r9
 800bf62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf64:	9805      	ldr	r0, [sp, #20]
 800bf66:	f7ff f989 	bl	800b27c <__pow5mult>
 800bf6a:	4681      	mov	r9, r0
 800bf6c:	b9e0      	cbnz	r0, 800bfa8 <_strtod_l+0x788>
 800bf6e:	f04f 0900 	mov.w	r9, #0
 800bf72:	e674      	b.n	800bc5e <_strtod_l+0x43e>
 800bf74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bf78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bf7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bf80:	35e2      	adds	r5, #226	@ 0xe2
 800bf82:	fa01 f305 	lsl.w	r3, r1, r5
 800bf86:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf88:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bf8a:	e7ba      	b.n	800bf02 <_strtod_l+0x6e2>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf90:	2301      	movs	r3, #1
 800bf92:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf94:	e7b5      	b.n	800bf02 <_strtod_l+0x6e2>
 800bf96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf98:	9805      	ldr	r0, [sp, #20]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	f7ff f9c8 	bl	800b330 <__lshift>
 800bfa0:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d1d9      	bne.n	800bf5a <_strtod_l+0x73a>
 800bfa6:	e65a      	b.n	800bc5e <_strtod_l+0x43e>
 800bfa8:	2e00      	cmp	r6, #0
 800bfaa:	dd07      	ble.n	800bfbc <_strtod_l+0x79c>
 800bfac:	4649      	mov	r1, r9
 800bfae:	9805      	ldr	r0, [sp, #20]
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	f7ff f9bd 	bl	800b330 <__lshift>
 800bfb6:	4681      	mov	r9, r0
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d0d8      	beq.n	800bf6e <_strtod_l+0x74e>
 800bfbc:	2f00      	cmp	r7, #0
 800bfbe:	dd08      	ble.n	800bfd2 <_strtod_l+0x7b2>
 800bfc0:	4641      	mov	r1, r8
 800bfc2:	9805      	ldr	r0, [sp, #20]
 800bfc4:	463a      	mov	r2, r7
 800bfc6:	f7ff f9b3 	bl	800b330 <__lshift>
 800bfca:	4680      	mov	r8, r0
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	f43f ae46 	beq.w	800bc5e <_strtod_l+0x43e>
 800bfd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfd4:	9805      	ldr	r0, [sp, #20]
 800bfd6:	464a      	mov	r2, r9
 800bfd8:	f7ff fa32 	bl	800b440 <__mdiff>
 800bfdc:	4604      	mov	r4, r0
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	f43f ae3d 	beq.w	800bc5e <_strtod_l+0x43e>
 800bfe4:	68c3      	ldr	r3, [r0, #12]
 800bfe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60c3      	str	r3, [r0, #12]
 800bfec:	4641      	mov	r1, r8
 800bfee:	f7ff fa0b 	bl	800b408 <__mcmp>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	da46      	bge.n	800c084 <_strtod_l+0x864>
 800bff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bff8:	ea53 030a 	orrs.w	r3, r3, sl
 800bffc:	d16c      	bne.n	800c0d8 <_strtod_l+0x8b8>
 800bffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c002:	2b00      	cmp	r3, #0
 800c004:	d168      	bne.n	800c0d8 <_strtod_l+0x8b8>
 800c006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c00a:	0d1b      	lsrs	r3, r3, #20
 800c00c:	051b      	lsls	r3, r3, #20
 800c00e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c012:	d961      	bls.n	800c0d8 <_strtod_l+0x8b8>
 800c014:	6963      	ldr	r3, [r4, #20]
 800c016:	b913      	cbnz	r3, 800c01e <_strtod_l+0x7fe>
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	dd5c      	ble.n	800c0d8 <_strtod_l+0x8b8>
 800c01e:	4621      	mov	r1, r4
 800c020:	2201      	movs	r2, #1
 800c022:	9805      	ldr	r0, [sp, #20]
 800c024:	f7ff f984 	bl	800b330 <__lshift>
 800c028:	4641      	mov	r1, r8
 800c02a:	4604      	mov	r4, r0
 800c02c:	f7ff f9ec 	bl	800b408 <__mcmp>
 800c030:	2800      	cmp	r0, #0
 800c032:	dd51      	ble.n	800c0d8 <_strtod_l+0x8b8>
 800c034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c038:	9a08      	ldr	r2, [sp, #32]
 800c03a:	0d1b      	lsrs	r3, r3, #20
 800c03c:	051b      	lsls	r3, r3, #20
 800c03e:	2a00      	cmp	r2, #0
 800c040:	d06b      	beq.n	800c11a <_strtod_l+0x8fa>
 800c042:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c046:	d868      	bhi.n	800c11a <_strtod_l+0x8fa>
 800c048:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c04c:	f67f ae9d 	bls.w	800bd8a <_strtod_l+0x56a>
 800c050:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <_strtod_l+0x85c>)
 800c052:	4650      	mov	r0, sl
 800c054:	4659      	mov	r1, fp
 800c056:	2200      	movs	r2, #0
 800c058:	f7f4 faf6 	bl	8000648 <__aeabi_dmul>
 800c05c:	4b08      	ldr	r3, [pc, #32]	@ (800c080 <_strtod_l+0x860>)
 800c05e:	400b      	ands	r3, r1
 800c060:	4682      	mov	sl, r0
 800c062:	468b      	mov	fp, r1
 800c064:	2b00      	cmp	r3, #0
 800c066:	f47f ae05 	bne.w	800bc74 <_strtod_l+0x454>
 800c06a:	9a05      	ldr	r2, [sp, #20]
 800c06c:	2322      	movs	r3, #34	@ 0x22
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	e600      	b.n	800bc74 <_strtod_l+0x454>
 800c072:	bf00      	nop
 800c074:	0800d960 	.word	0x0800d960
 800c078:	fffffc02 	.word	0xfffffc02
 800c07c:	39500000 	.word	0x39500000
 800c080:	7ff00000 	.word	0x7ff00000
 800c084:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c088:	d165      	bne.n	800c156 <_strtod_l+0x936>
 800c08a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c08c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c090:	b35a      	cbz	r2, 800c0ea <_strtod_l+0x8ca>
 800c092:	4a9f      	ldr	r2, [pc, #636]	@ (800c310 <_strtod_l+0xaf0>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d12b      	bne.n	800c0f0 <_strtod_l+0x8d0>
 800c098:	9b08      	ldr	r3, [sp, #32]
 800c09a:	4651      	mov	r1, sl
 800c09c:	b303      	cbz	r3, 800c0e0 <_strtod_l+0x8c0>
 800c09e:	4b9d      	ldr	r3, [pc, #628]	@ (800c314 <_strtod_l+0xaf4>)
 800c0a0:	465a      	mov	r2, fp
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ac:	d81b      	bhi.n	800c0e6 <_strtod_l+0x8c6>
 800c0ae:	0d1b      	lsrs	r3, r3, #20
 800c0b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d119      	bne.n	800c0f0 <_strtod_l+0x8d0>
 800c0bc:	4b96      	ldr	r3, [pc, #600]	@ (800c318 <_strtod_l+0xaf8>)
 800c0be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d102      	bne.n	800c0ca <_strtod_l+0x8aa>
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	f43f adca 	beq.w	800bc5e <_strtod_l+0x43e>
 800c0ca:	4b92      	ldr	r3, [pc, #584]	@ (800c314 <_strtod_l+0xaf4>)
 800c0cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0ce:	401a      	ands	r2, r3
 800c0d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c0d4:	f04f 0a00 	mov.w	sl, #0
 800c0d8:	9b08      	ldr	r3, [sp, #32]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1b8      	bne.n	800c050 <_strtod_l+0x830>
 800c0de:	e5c9      	b.n	800bc74 <_strtod_l+0x454>
 800c0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e4:	e7e8      	b.n	800c0b8 <_strtod_l+0x898>
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	e7e6      	b.n	800c0b8 <_strtod_l+0x898>
 800c0ea:	ea53 030a 	orrs.w	r3, r3, sl
 800c0ee:	d0a1      	beq.n	800c034 <_strtod_l+0x814>
 800c0f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0f2:	b1db      	cbz	r3, 800c12c <_strtod_l+0x90c>
 800c0f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0f6:	4213      	tst	r3, r2
 800c0f8:	d0ee      	beq.n	800c0d8 <_strtod_l+0x8b8>
 800c0fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0fc:	9a08      	ldr	r2, [sp, #32]
 800c0fe:	4650      	mov	r0, sl
 800c100:	4659      	mov	r1, fp
 800c102:	b1bb      	cbz	r3, 800c134 <_strtod_l+0x914>
 800c104:	f7ff fb6e 	bl	800b7e4 <sulp>
 800c108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c10c:	ec53 2b10 	vmov	r2, r3, d0
 800c110:	f7f4 f8e4 	bl	80002dc <__adddf3>
 800c114:	4682      	mov	sl, r0
 800c116:	468b      	mov	fp, r1
 800c118:	e7de      	b.n	800c0d8 <_strtod_l+0x8b8>
 800c11a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c11e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c122:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c126:	f04f 3aff 	mov.w	sl, #4294967295
 800c12a:	e7d5      	b.n	800c0d8 <_strtod_l+0x8b8>
 800c12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c12e:	ea13 0f0a 	tst.w	r3, sl
 800c132:	e7e1      	b.n	800c0f8 <_strtod_l+0x8d8>
 800c134:	f7ff fb56 	bl	800b7e4 <sulp>
 800c138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c13c:	ec53 2b10 	vmov	r2, r3, d0
 800c140:	f7f4 f8ca 	bl	80002d8 <__aeabi_dsub>
 800c144:	2200      	movs	r2, #0
 800c146:	2300      	movs	r3, #0
 800c148:	4682      	mov	sl, r0
 800c14a:	468b      	mov	fp, r1
 800c14c:	f7f4 fce4 	bl	8000b18 <__aeabi_dcmpeq>
 800c150:	2800      	cmp	r0, #0
 800c152:	d0c1      	beq.n	800c0d8 <_strtod_l+0x8b8>
 800c154:	e619      	b.n	800bd8a <_strtod_l+0x56a>
 800c156:	4641      	mov	r1, r8
 800c158:	4620      	mov	r0, r4
 800c15a:	f7ff facd 	bl	800b6f8 <__ratio>
 800c15e:	ec57 6b10 	vmov	r6, r7, d0
 800c162:	2200      	movs	r2, #0
 800c164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 fce8 	bl	8000b40 <__aeabi_dcmple>
 800c170:	2800      	cmp	r0, #0
 800c172:	d06f      	beq.n	800c254 <_strtod_l+0xa34>
 800c174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c176:	2b00      	cmp	r3, #0
 800c178:	d17a      	bne.n	800c270 <_strtod_l+0xa50>
 800c17a:	f1ba 0f00 	cmp.w	sl, #0
 800c17e:	d158      	bne.n	800c232 <_strtod_l+0xa12>
 800c180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c186:	2b00      	cmp	r3, #0
 800c188:	d15a      	bne.n	800c240 <_strtod_l+0xa20>
 800c18a:	4b64      	ldr	r3, [pc, #400]	@ (800c31c <_strtod_l+0xafc>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4630      	mov	r0, r6
 800c190:	4639      	mov	r1, r7
 800c192:	f7f4 fccb 	bl	8000b2c <__aeabi_dcmplt>
 800c196:	2800      	cmp	r0, #0
 800c198:	d159      	bne.n	800c24e <_strtod_l+0xa2e>
 800c19a:	4630      	mov	r0, r6
 800c19c:	4639      	mov	r1, r7
 800c19e:	4b60      	ldr	r3, [pc, #384]	@ (800c320 <_strtod_l+0xb00>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f7f4 fa51 	bl	8000648 <__aeabi_dmul>
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	460f      	mov	r7, r1
 800c1aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c1ae:	9606      	str	r6, [sp, #24]
 800c1b0:	9307      	str	r3, [sp, #28]
 800c1b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1b6:	4d57      	ldr	r5, [pc, #348]	@ (800c314 <_strtod_l+0xaf4>)
 800c1b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1be:	401d      	ands	r5, r3
 800c1c0:	4b58      	ldr	r3, [pc, #352]	@ (800c324 <_strtod_l+0xb04>)
 800c1c2:	429d      	cmp	r5, r3
 800c1c4:	f040 80b2 	bne.w	800c32c <_strtod_l+0xb0c>
 800c1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c1ce:	ec4b ab10 	vmov	d0, sl, fp
 800c1d2:	f7ff f9c9 	bl	800b568 <__ulp>
 800c1d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1da:	ec51 0b10 	vmov	r0, r1, d0
 800c1de:	f7f4 fa33 	bl	8000648 <__aeabi_dmul>
 800c1e2:	4652      	mov	r2, sl
 800c1e4:	465b      	mov	r3, fp
 800c1e6:	f7f4 f879 	bl	80002dc <__adddf3>
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4949      	ldr	r1, [pc, #292]	@ (800c314 <_strtod_l+0xaf4>)
 800c1ee:	4a4e      	ldr	r2, [pc, #312]	@ (800c328 <_strtod_l+0xb08>)
 800c1f0:	4019      	ands	r1, r3
 800c1f2:	4291      	cmp	r1, r2
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	d942      	bls.n	800c27e <_strtod_l+0xa5e>
 800c1f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1fa:	4b47      	ldr	r3, [pc, #284]	@ (800c318 <_strtod_l+0xaf8>)
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d103      	bne.n	800c208 <_strtod_l+0x9e8>
 800c200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c202:	3301      	adds	r3, #1
 800c204:	f43f ad2b 	beq.w	800bc5e <_strtod_l+0x43e>
 800c208:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c318 <_strtod_l+0xaf8>
 800c20c:	f04f 3aff 	mov.w	sl, #4294967295
 800c210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c212:	9805      	ldr	r0, [sp, #20]
 800c214:	f7fe fe74 	bl	800af00 <_Bfree>
 800c218:	9805      	ldr	r0, [sp, #20]
 800c21a:	4649      	mov	r1, r9
 800c21c:	f7fe fe70 	bl	800af00 <_Bfree>
 800c220:	9805      	ldr	r0, [sp, #20]
 800c222:	4641      	mov	r1, r8
 800c224:	f7fe fe6c 	bl	800af00 <_Bfree>
 800c228:	9805      	ldr	r0, [sp, #20]
 800c22a:	4621      	mov	r1, r4
 800c22c:	f7fe fe68 	bl	800af00 <_Bfree>
 800c230:	e618      	b.n	800be64 <_strtod_l+0x644>
 800c232:	f1ba 0f01 	cmp.w	sl, #1
 800c236:	d103      	bne.n	800c240 <_strtod_l+0xa20>
 800c238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f43f ada5 	beq.w	800bd8a <_strtod_l+0x56a>
 800c240:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c2f0 <_strtod_l+0xad0>
 800c244:	4f35      	ldr	r7, [pc, #212]	@ (800c31c <_strtod_l+0xafc>)
 800c246:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c24a:	2600      	movs	r6, #0
 800c24c:	e7b1      	b.n	800c1b2 <_strtod_l+0x992>
 800c24e:	4f34      	ldr	r7, [pc, #208]	@ (800c320 <_strtod_l+0xb00>)
 800c250:	2600      	movs	r6, #0
 800c252:	e7aa      	b.n	800c1aa <_strtod_l+0x98a>
 800c254:	4b32      	ldr	r3, [pc, #200]	@ (800c320 <_strtod_l+0xb00>)
 800c256:	4630      	mov	r0, r6
 800c258:	4639      	mov	r1, r7
 800c25a:	2200      	movs	r2, #0
 800c25c:	f7f4 f9f4 	bl	8000648 <__aeabi_dmul>
 800c260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c262:	4606      	mov	r6, r0
 800c264:	460f      	mov	r7, r1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d09f      	beq.n	800c1aa <_strtod_l+0x98a>
 800c26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c26e:	e7a0      	b.n	800c1b2 <_strtod_l+0x992>
 800c270:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c2f8 <_strtod_l+0xad8>
 800c274:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c278:	ec57 6b17 	vmov	r6, r7, d7
 800c27c:	e799      	b.n	800c1b2 <_strtod_l+0x992>
 800c27e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c282:	9b08      	ldr	r3, [sp, #32]
 800c284:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1c1      	bne.n	800c210 <_strtod_l+0x9f0>
 800c28c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c290:	0d1b      	lsrs	r3, r3, #20
 800c292:	051b      	lsls	r3, r3, #20
 800c294:	429d      	cmp	r5, r3
 800c296:	d1bb      	bne.n	800c210 <_strtod_l+0x9f0>
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 fd34 	bl	8000d08 <__aeabi_d2lz>
 800c2a0:	f7f4 f9a4 	bl	80005ec <__aeabi_l2d>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 f814 	bl	80002d8 <__aeabi_dsub>
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c2b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2be:	ea46 060a 	orr.w	r6, r6, sl
 800c2c2:	431e      	orrs	r6, r3
 800c2c4:	d06f      	beq.n	800c3a6 <_strtod_l+0xb86>
 800c2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c300 <_strtod_l+0xae0>)
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	f7f4 fc2e 	bl	8000b2c <__aeabi_dcmplt>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	f47f accf 	bne.w	800bc74 <_strtod_l+0x454>
 800c2d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c308 <_strtod_l+0xae8>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2e0:	f7f4 fc42 	bl	8000b68 <__aeabi_dcmpgt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d093      	beq.n	800c210 <_strtod_l+0x9f0>
 800c2e8:	e4c4      	b.n	800bc74 <_strtod_l+0x454>
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w
 800c2f0:	00000000 	.word	0x00000000
 800c2f4:	bff00000 	.word	0xbff00000
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	3ff00000 	.word	0x3ff00000
 800c300:	94a03595 	.word	0x94a03595
 800c304:	3fdfffff 	.word	0x3fdfffff
 800c308:	35afe535 	.word	0x35afe535
 800c30c:	3fe00000 	.word	0x3fe00000
 800c310:	000fffff 	.word	0x000fffff
 800c314:	7ff00000 	.word	0x7ff00000
 800c318:	7fefffff 	.word	0x7fefffff
 800c31c:	3ff00000 	.word	0x3ff00000
 800c320:	3fe00000 	.word	0x3fe00000
 800c324:	7fe00000 	.word	0x7fe00000
 800c328:	7c9fffff 	.word	0x7c9fffff
 800c32c:	9b08      	ldr	r3, [sp, #32]
 800c32e:	b323      	cbz	r3, 800c37a <_strtod_l+0xb5a>
 800c330:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c334:	d821      	bhi.n	800c37a <_strtod_l+0xb5a>
 800c336:	a328      	add	r3, pc, #160	@ (adr r3, 800c3d8 <_strtod_l+0xbb8>)
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f4 fbfe 	bl	8000b40 <__aeabi_dcmple>
 800c344:	b1a0      	cbz	r0, 800c370 <_strtod_l+0xb50>
 800c346:	4639      	mov	r1, r7
 800c348:	4630      	mov	r0, r6
 800c34a:	f7f4 fc55 	bl	8000bf8 <__aeabi_d2uiz>
 800c34e:	2801      	cmp	r0, #1
 800c350:	bf38      	it	cc
 800c352:	2001      	movcc	r0, #1
 800c354:	f7f4 f8fe 	bl	8000554 <__aeabi_ui2d>
 800c358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c35a:	4606      	mov	r6, r0
 800c35c:	460f      	mov	r7, r1
 800c35e:	b9fb      	cbnz	r3, 800c3a0 <_strtod_l+0xb80>
 800c360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c364:	9014      	str	r0, [sp, #80]	@ 0x50
 800c366:	9315      	str	r3, [sp, #84]	@ 0x54
 800c368:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c36c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c372:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c376:	1b5b      	subs	r3, r3, r5
 800c378:	9311      	str	r3, [sp, #68]	@ 0x44
 800c37a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c37e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c382:	f7ff f8f1 	bl	800b568 <__ulp>
 800c386:	4650      	mov	r0, sl
 800c388:	ec53 2b10 	vmov	r2, r3, d0
 800c38c:	4659      	mov	r1, fp
 800c38e:	f7f4 f95b 	bl	8000648 <__aeabi_dmul>
 800c392:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c396:	f7f3 ffa1 	bl	80002dc <__adddf3>
 800c39a:	4682      	mov	sl, r0
 800c39c:	468b      	mov	fp, r1
 800c39e:	e770      	b.n	800c282 <_strtod_l+0xa62>
 800c3a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c3a4:	e7e0      	b.n	800c368 <_strtod_l+0xb48>
 800c3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3e0 <_strtod_l+0xbc0>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	f7f4 fbbe 	bl	8000b2c <__aeabi_dcmplt>
 800c3b0:	e798      	b.n	800c2e4 <_strtod_l+0xac4>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	f7ff ba6d 	b.w	800b89a <_strtod_l+0x7a>
 800c3c0:	2a65      	cmp	r2, #101	@ 0x65
 800c3c2:	f43f ab66 	beq.w	800ba92 <_strtod_l+0x272>
 800c3c6:	2a45      	cmp	r2, #69	@ 0x45
 800c3c8:	f43f ab63 	beq.w	800ba92 <_strtod_l+0x272>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f7ff bb9e 	b.w	800bb0e <_strtod_l+0x2ee>
 800c3d2:	bf00      	nop
 800c3d4:	f3af 8000 	nop.w
 800c3d8:	ffc00000 	.word	0xffc00000
 800c3dc:	41dfffff 	.word	0x41dfffff
 800c3e0:	94a03595 	.word	0x94a03595
 800c3e4:	3fcfffff 	.word	0x3fcfffff

0800c3e8 <_strtod_r>:
 800c3e8:	4b01      	ldr	r3, [pc, #4]	@ (800c3f0 <_strtod_r+0x8>)
 800c3ea:	f7ff ba19 	b.w	800b820 <_strtod_l>
 800c3ee:	bf00      	nop
 800c3f0:	20000080 	.word	0x20000080

0800c3f4 <__ssputs_r>:
 800c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	688e      	ldr	r6, [r1, #8]
 800c3fa:	461f      	mov	r7, r3
 800c3fc:	42be      	cmp	r6, r7
 800c3fe:	680b      	ldr	r3, [r1, #0]
 800c400:	4682      	mov	sl, r0
 800c402:	460c      	mov	r4, r1
 800c404:	4690      	mov	r8, r2
 800c406:	d82d      	bhi.n	800c464 <__ssputs_r+0x70>
 800c408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c40c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c410:	d026      	beq.n	800c460 <__ssputs_r+0x6c>
 800c412:	6965      	ldr	r5, [r4, #20]
 800c414:	6909      	ldr	r1, [r1, #16]
 800c416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c41a:	eba3 0901 	sub.w	r9, r3, r1
 800c41e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c422:	1c7b      	adds	r3, r7, #1
 800c424:	444b      	add	r3, r9
 800c426:	106d      	asrs	r5, r5, #1
 800c428:	429d      	cmp	r5, r3
 800c42a:	bf38      	it	cc
 800c42c:	461d      	movcc	r5, r3
 800c42e:	0553      	lsls	r3, r2, #21
 800c430:	d527      	bpl.n	800c482 <__ssputs_r+0x8e>
 800c432:	4629      	mov	r1, r5
 800c434:	f7fe fc98 	bl	800ad68 <_malloc_r>
 800c438:	4606      	mov	r6, r0
 800c43a:	b360      	cbz	r0, 800c496 <__ssputs_r+0xa2>
 800c43c:	6921      	ldr	r1, [r4, #16]
 800c43e:	464a      	mov	r2, r9
 800c440:	f000 fa18 	bl	800c874 <memcpy>
 800c444:	89a3      	ldrh	r3, [r4, #12]
 800c446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c44e:	81a3      	strh	r3, [r4, #12]
 800c450:	6126      	str	r6, [r4, #16]
 800c452:	6165      	str	r5, [r4, #20]
 800c454:	444e      	add	r6, r9
 800c456:	eba5 0509 	sub.w	r5, r5, r9
 800c45a:	6026      	str	r6, [r4, #0]
 800c45c:	60a5      	str	r5, [r4, #8]
 800c45e:	463e      	mov	r6, r7
 800c460:	42be      	cmp	r6, r7
 800c462:	d900      	bls.n	800c466 <__ssputs_r+0x72>
 800c464:	463e      	mov	r6, r7
 800c466:	6820      	ldr	r0, [r4, #0]
 800c468:	4632      	mov	r2, r6
 800c46a:	4641      	mov	r1, r8
 800c46c:	f000 f9c6 	bl	800c7fc <memmove>
 800c470:	68a3      	ldr	r3, [r4, #8]
 800c472:	1b9b      	subs	r3, r3, r6
 800c474:	60a3      	str	r3, [r4, #8]
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	4433      	add	r3, r6
 800c47a:	6023      	str	r3, [r4, #0]
 800c47c:	2000      	movs	r0, #0
 800c47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c482:	462a      	mov	r2, r5
 800c484:	f000 fd89 	bl	800cf9a <_realloc_r>
 800c488:	4606      	mov	r6, r0
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d1e0      	bne.n	800c450 <__ssputs_r+0x5c>
 800c48e:	6921      	ldr	r1, [r4, #16]
 800c490:	4650      	mov	r0, sl
 800c492:	f7fe fbf5 	bl	800ac80 <_free_r>
 800c496:	230c      	movs	r3, #12
 800c498:	f8ca 3000 	str.w	r3, [sl]
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	e7e9      	b.n	800c47e <__ssputs_r+0x8a>
	...

0800c4ac <_svfiprintf_r>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	4698      	mov	r8, r3
 800c4b2:	898b      	ldrh	r3, [r1, #12]
 800c4b4:	061b      	lsls	r3, r3, #24
 800c4b6:	b09d      	sub	sp, #116	@ 0x74
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	4614      	mov	r4, r2
 800c4be:	d510      	bpl.n	800c4e2 <_svfiprintf_r+0x36>
 800c4c0:	690b      	ldr	r3, [r1, #16]
 800c4c2:	b973      	cbnz	r3, 800c4e2 <_svfiprintf_r+0x36>
 800c4c4:	2140      	movs	r1, #64	@ 0x40
 800c4c6:	f7fe fc4f 	bl	800ad68 <_malloc_r>
 800c4ca:	6028      	str	r0, [r5, #0]
 800c4cc:	6128      	str	r0, [r5, #16]
 800c4ce:	b930      	cbnz	r0, 800c4de <_svfiprintf_r+0x32>
 800c4d0:	230c      	movs	r3, #12
 800c4d2:	603b      	str	r3, [r7, #0]
 800c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d8:	b01d      	add	sp, #116	@ 0x74
 800c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4de:	2340      	movs	r3, #64	@ 0x40
 800c4e0:	616b      	str	r3, [r5, #20]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4e6:	2320      	movs	r3, #32
 800c4e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f0:	2330      	movs	r3, #48	@ 0x30
 800c4f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c690 <_svfiprintf_r+0x1e4>
 800c4f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4fa:	f04f 0901 	mov.w	r9, #1
 800c4fe:	4623      	mov	r3, r4
 800c500:	469a      	mov	sl, r3
 800c502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c506:	b10a      	cbz	r2, 800c50c <_svfiprintf_r+0x60>
 800c508:	2a25      	cmp	r2, #37	@ 0x25
 800c50a:	d1f9      	bne.n	800c500 <_svfiprintf_r+0x54>
 800c50c:	ebba 0b04 	subs.w	fp, sl, r4
 800c510:	d00b      	beq.n	800c52a <_svfiprintf_r+0x7e>
 800c512:	465b      	mov	r3, fp
 800c514:	4622      	mov	r2, r4
 800c516:	4629      	mov	r1, r5
 800c518:	4638      	mov	r0, r7
 800c51a:	f7ff ff6b 	bl	800c3f4 <__ssputs_r>
 800c51e:	3001      	adds	r0, #1
 800c520:	f000 80a7 	beq.w	800c672 <_svfiprintf_r+0x1c6>
 800c524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c526:	445a      	add	r2, fp
 800c528:	9209      	str	r2, [sp, #36]	@ 0x24
 800c52a:	f89a 3000 	ldrb.w	r3, [sl]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 809f 	beq.w	800c672 <_svfiprintf_r+0x1c6>
 800c534:	2300      	movs	r3, #0
 800c536:	f04f 32ff 	mov.w	r2, #4294967295
 800c53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c53e:	f10a 0a01 	add.w	sl, sl, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	9307      	str	r3, [sp, #28]
 800c546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c54a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c54c:	4654      	mov	r4, sl
 800c54e:	2205      	movs	r2, #5
 800c550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c554:	484e      	ldr	r0, [pc, #312]	@ (800c690 <_svfiprintf_r+0x1e4>)
 800c556:	f7f3 fe63 	bl	8000220 <memchr>
 800c55a:	9a04      	ldr	r2, [sp, #16]
 800c55c:	b9d8      	cbnz	r0, 800c596 <_svfiprintf_r+0xea>
 800c55e:	06d0      	lsls	r0, r2, #27
 800c560:	bf44      	itt	mi
 800c562:	2320      	movmi	r3, #32
 800c564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c568:	0711      	lsls	r1, r2, #28
 800c56a:	bf44      	itt	mi
 800c56c:	232b      	movmi	r3, #43	@ 0x2b
 800c56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c572:	f89a 3000 	ldrb.w	r3, [sl]
 800c576:	2b2a      	cmp	r3, #42	@ 0x2a
 800c578:	d015      	beq.n	800c5a6 <_svfiprintf_r+0xfa>
 800c57a:	9a07      	ldr	r2, [sp, #28]
 800c57c:	4654      	mov	r4, sl
 800c57e:	2000      	movs	r0, #0
 800c580:	f04f 0c0a 	mov.w	ip, #10
 800c584:	4621      	mov	r1, r4
 800c586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c58a:	3b30      	subs	r3, #48	@ 0x30
 800c58c:	2b09      	cmp	r3, #9
 800c58e:	d94b      	bls.n	800c628 <_svfiprintf_r+0x17c>
 800c590:	b1b0      	cbz	r0, 800c5c0 <_svfiprintf_r+0x114>
 800c592:	9207      	str	r2, [sp, #28]
 800c594:	e014      	b.n	800c5c0 <_svfiprintf_r+0x114>
 800c596:	eba0 0308 	sub.w	r3, r0, r8
 800c59a:	fa09 f303 	lsl.w	r3, r9, r3
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	46a2      	mov	sl, r4
 800c5a4:	e7d2      	b.n	800c54c <_svfiprintf_r+0xa0>
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	1d19      	adds	r1, r3, #4
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	9103      	str	r1, [sp, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bfbb      	ittet	lt
 800c5b2:	425b      	neglt	r3, r3
 800c5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c5b8:	9307      	strge	r3, [sp, #28]
 800c5ba:	9307      	strlt	r3, [sp, #28]
 800c5bc:	bfb8      	it	lt
 800c5be:	9204      	strlt	r2, [sp, #16]
 800c5c0:	7823      	ldrb	r3, [r4, #0]
 800c5c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5c4:	d10a      	bne.n	800c5dc <_svfiprintf_r+0x130>
 800c5c6:	7863      	ldrb	r3, [r4, #1]
 800c5c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ca:	d132      	bne.n	800c632 <_svfiprintf_r+0x186>
 800c5cc:	9b03      	ldr	r3, [sp, #12]
 800c5ce:	1d1a      	adds	r2, r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	9203      	str	r2, [sp, #12]
 800c5d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5d8:	3402      	adds	r4, #2
 800c5da:	9305      	str	r3, [sp, #20]
 800c5dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6a0 <_svfiprintf_r+0x1f4>
 800c5e0:	7821      	ldrb	r1, [r4, #0]
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	4650      	mov	r0, sl
 800c5e6:	f7f3 fe1b 	bl	8000220 <memchr>
 800c5ea:	b138      	cbz	r0, 800c5fc <_svfiprintf_r+0x150>
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	eba0 000a 	sub.w	r0, r0, sl
 800c5f2:	2240      	movs	r2, #64	@ 0x40
 800c5f4:	4082      	lsls	r2, r0
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	3401      	adds	r4, #1
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c600:	4824      	ldr	r0, [pc, #144]	@ (800c694 <_svfiprintf_r+0x1e8>)
 800c602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c606:	2206      	movs	r2, #6
 800c608:	f7f3 fe0a 	bl	8000220 <memchr>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d036      	beq.n	800c67e <_svfiprintf_r+0x1d2>
 800c610:	4b21      	ldr	r3, [pc, #132]	@ (800c698 <_svfiprintf_r+0x1ec>)
 800c612:	bb1b      	cbnz	r3, 800c65c <_svfiprintf_r+0x1b0>
 800c614:	9b03      	ldr	r3, [sp, #12]
 800c616:	3307      	adds	r3, #7
 800c618:	f023 0307 	bic.w	r3, r3, #7
 800c61c:	3308      	adds	r3, #8
 800c61e:	9303      	str	r3, [sp, #12]
 800c620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c622:	4433      	add	r3, r6
 800c624:	9309      	str	r3, [sp, #36]	@ 0x24
 800c626:	e76a      	b.n	800c4fe <_svfiprintf_r+0x52>
 800c628:	fb0c 3202 	mla	r2, ip, r2, r3
 800c62c:	460c      	mov	r4, r1
 800c62e:	2001      	movs	r0, #1
 800c630:	e7a8      	b.n	800c584 <_svfiprintf_r+0xd8>
 800c632:	2300      	movs	r3, #0
 800c634:	3401      	adds	r4, #1
 800c636:	9305      	str	r3, [sp, #20]
 800c638:	4619      	mov	r1, r3
 800c63a:	f04f 0c0a 	mov.w	ip, #10
 800c63e:	4620      	mov	r0, r4
 800c640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c644:	3a30      	subs	r2, #48	@ 0x30
 800c646:	2a09      	cmp	r2, #9
 800c648:	d903      	bls.n	800c652 <_svfiprintf_r+0x1a6>
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0c6      	beq.n	800c5dc <_svfiprintf_r+0x130>
 800c64e:	9105      	str	r1, [sp, #20]
 800c650:	e7c4      	b.n	800c5dc <_svfiprintf_r+0x130>
 800c652:	fb0c 2101 	mla	r1, ip, r1, r2
 800c656:	4604      	mov	r4, r0
 800c658:	2301      	movs	r3, #1
 800c65a:	e7f0      	b.n	800c63e <_svfiprintf_r+0x192>
 800c65c:	ab03      	add	r3, sp, #12
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	462a      	mov	r2, r5
 800c662:	4b0e      	ldr	r3, [pc, #56]	@ (800c69c <_svfiprintf_r+0x1f0>)
 800c664:	a904      	add	r1, sp, #16
 800c666:	4638      	mov	r0, r7
 800c668:	f7fc fd38 	bl	80090dc <_printf_float>
 800c66c:	1c42      	adds	r2, r0, #1
 800c66e:	4606      	mov	r6, r0
 800c670:	d1d6      	bne.n	800c620 <_svfiprintf_r+0x174>
 800c672:	89ab      	ldrh	r3, [r5, #12]
 800c674:	065b      	lsls	r3, r3, #25
 800c676:	f53f af2d 	bmi.w	800c4d4 <_svfiprintf_r+0x28>
 800c67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c67c:	e72c      	b.n	800c4d8 <_svfiprintf_r+0x2c>
 800c67e:	ab03      	add	r3, sp, #12
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	462a      	mov	r2, r5
 800c684:	4b05      	ldr	r3, [pc, #20]	@ (800c69c <_svfiprintf_r+0x1f0>)
 800c686:	a904      	add	r1, sp, #16
 800c688:	4638      	mov	r0, r7
 800c68a:	f7fc ffbf 	bl	800960c <_printf_i>
 800c68e:	e7ed      	b.n	800c66c <_svfiprintf_r+0x1c0>
 800c690:	0800d988 	.word	0x0800d988
 800c694:	0800d992 	.word	0x0800d992
 800c698:	080090dd 	.word	0x080090dd
 800c69c:	0800c3f5 	.word	0x0800c3f5
 800c6a0:	0800d98e 	.word	0x0800d98e

0800c6a4 <__sflush_r>:
 800c6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ac:	0716      	lsls	r6, r2, #28
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	460c      	mov	r4, r1
 800c6b2:	d454      	bmi.n	800c75e <__sflush_r+0xba>
 800c6b4:	684b      	ldr	r3, [r1, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dc02      	bgt.n	800c6c0 <__sflush_r+0x1c>
 800c6ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dd48      	ble.n	800c752 <__sflush_r+0xae>
 800c6c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	d045      	beq.n	800c752 <__sflush_r+0xae>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6cc:	682f      	ldr	r7, [r5, #0]
 800c6ce:	6a21      	ldr	r1, [r4, #32]
 800c6d0:	602b      	str	r3, [r5, #0]
 800c6d2:	d030      	beq.n	800c736 <__sflush_r+0x92>
 800c6d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	0759      	lsls	r1, r3, #29
 800c6da:	d505      	bpl.n	800c6e8 <__sflush_r+0x44>
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6e2:	b10b      	cbz	r3, 800c6e8 <__sflush_r+0x44>
 800c6e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6e6:	1ad2      	subs	r2, r2, r3
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6ec:	6a21      	ldr	r1, [r4, #32]
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	47b0      	blx	r6
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	d106      	bne.n	800c706 <__sflush_r+0x62>
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	291d      	cmp	r1, #29
 800c6fc:	d82b      	bhi.n	800c756 <__sflush_r+0xb2>
 800c6fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c7a8 <__sflush_r+0x104>)
 800c700:	410a      	asrs	r2, r1
 800c702:	07d6      	lsls	r6, r2, #31
 800c704:	d427      	bmi.n	800c756 <__sflush_r+0xb2>
 800c706:	2200      	movs	r2, #0
 800c708:	6062      	str	r2, [r4, #4]
 800c70a:	04d9      	lsls	r1, r3, #19
 800c70c:	6922      	ldr	r2, [r4, #16]
 800c70e:	6022      	str	r2, [r4, #0]
 800c710:	d504      	bpl.n	800c71c <__sflush_r+0x78>
 800c712:	1c42      	adds	r2, r0, #1
 800c714:	d101      	bne.n	800c71a <__sflush_r+0x76>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b903      	cbnz	r3, 800c71c <__sflush_r+0x78>
 800c71a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c71e:	602f      	str	r7, [r5, #0]
 800c720:	b1b9      	cbz	r1, 800c752 <__sflush_r+0xae>
 800c722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c726:	4299      	cmp	r1, r3
 800c728:	d002      	beq.n	800c730 <__sflush_r+0x8c>
 800c72a:	4628      	mov	r0, r5
 800c72c:	f7fe faa8 	bl	800ac80 <_free_r>
 800c730:	2300      	movs	r3, #0
 800c732:	6363      	str	r3, [r4, #52]	@ 0x34
 800c734:	e00d      	b.n	800c752 <__sflush_r+0xae>
 800c736:	2301      	movs	r3, #1
 800c738:	4628      	mov	r0, r5
 800c73a:	47b0      	blx	r6
 800c73c:	4602      	mov	r2, r0
 800c73e:	1c50      	adds	r0, r2, #1
 800c740:	d1c9      	bne.n	800c6d6 <__sflush_r+0x32>
 800c742:	682b      	ldr	r3, [r5, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0c6      	beq.n	800c6d6 <__sflush_r+0x32>
 800c748:	2b1d      	cmp	r3, #29
 800c74a:	d001      	beq.n	800c750 <__sflush_r+0xac>
 800c74c:	2b16      	cmp	r3, #22
 800c74e:	d11e      	bne.n	800c78e <__sflush_r+0xea>
 800c750:	602f      	str	r7, [r5, #0]
 800c752:	2000      	movs	r0, #0
 800c754:	e022      	b.n	800c79c <__sflush_r+0xf8>
 800c756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	e01b      	b.n	800c796 <__sflush_r+0xf2>
 800c75e:	690f      	ldr	r7, [r1, #16]
 800c760:	2f00      	cmp	r7, #0
 800c762:	d0f6      	beq.n	800c752 <__sflush_r+0xae>
 800c764:	0793      	lsls	r3, r2, #30
 800c766:	680e      	ldr	r6, [r1, #0]
 800c768:	bf08      	it	eq
 800c76a:	694b      	ldreq	r3, [r1, #20]
 800c76c:	600f      	str	r7, [r1, #0]
 800c76e:	bf18      	it	ne
 800c770:	2300      	movne	r3, #0
 800c772:	eba6 0807 	sub.w	r8, r6, r7
 800c776:	608b      	str	r3, [r1, #8]
 800c778:	f1b8 0f00 	cmp.w	r8, #0
 800c77c:	dde9      	ble.n	800c752 <__sflush_r+0xae>
 800c77e:	6a21      	ldr	r1, [r4, #32]
 800c780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c782:	4643      	mov	r3, r8
 800c784:	463a      	mov	r2, r7
 800c786:	4628      	mov	r0, r5
 800c788:	47b0      	blx	r6
 800c78a:	2800      	cmp	r0, #0
 800c78c:	dc08      	bgt.n	800c7a0 <__sflush_r+0xfc>
 800c78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a0:	4407      	add	r7, r0
 800c7a2:	eba8 0800 	sub.w	r8, r8, r0
 800c7a6:	e7e7      	b.n	800c778 <__sflush_r+0xd4>
 800c7a8:	dfbffffe 	.word	0xdfbffffe

0800c7ac <_fflush_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	690b      	ldr	r3, [r1, #16]
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	b913      	cbnz	r3, 800c7bc <_fflush_r+0x10>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	b118      	cbz	r0, 800c7c6 <_fflush_r+0x1a>
 800c7be:	6a03      	ldr	r3, [r0, #32]
 800c7c0:	b90b      	cbnz	r3, 800c7c6 <_fflush_r+0x1a>
 800c7c2:	f7fd fae3 	bl	8009d8c <__sinit>
 800c7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0f3      	beq.n	800c7b6 <_fflush_r+0xa>
 800c7ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7d0:	07d0      	lsls	r0, r2, #31
 800c7d2:	d404      	bmi.n	800c7de <_fflush_r+0x32>
 800c7d4:	0599      	lsls	r1, r3, #22
 800c7d6:	d402      	bmi.n	800c7de <_fflush_r+0x32>
 800c7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7da:	f7fd fbfc 	bl	8009fd6 <__retarget_lock_acquire_recursive>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	f7ff ff5f 	bl	800c6a4 <__sflush_r>
 800c7e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7e8:	07da      	lsls	r2, r3, #31
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	d4e4      	bmi.n	800c7b8 <_fflush_r+0xc>
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	059b      	lsls	r3, r3, #22
 800c7f2:	d4e1      	bmi.n	800c7b8 <_fflush_r+0xc>
 800c7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7f6:	f7fd fbef 	bl	8009fd8 <__retarget_lock_release_recursive>
 800c7fa:	e7dd      	b.n	800c7b8 <_fflush_r+0xc>

0800c7fc <memmove>:
 800c7fc:	4288      	cmp	r0, r1
 800c7fe:	b510      	push	{r4, lr}
 800c800:	eb01 0402 	add.w	r4, r1, r2
 800c804:	d902      	bls.n	800c80c <memmove+0x10>
 800c806:	4284      	cmp	r4, r0
 800c808:	4623      	mov	r3, r4
 800c80a:	d807      	bhi.n	800c81c <memmove+0x20>
 800c80c:	1e43      	subs	r3, r0, #1
 800c80e:	42a1      	cmp	r1, r4
 800c810:	d008      	beq.n	800c824 <memmove+0x28>
 800c812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c81a:	e7f8      	b.n	800c80e <memmove+0x12>
 800c81c:	4402      	add	r2, r0
 800c81e:	4601      	mov	r1, r0
 800c820:	428a      	cmp	r2, r1
 800c822:	d100      	bne.n	800c826 <memmove+0x2a>
 800c824:	bd10      	pop	{r4, pc}
 800c826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c82e:	e7f7      	b.n	800c820 <memmove+0x24>

0800c830 <strncmp>:
 800c830:	b510      	push	{r4, lr}
 800c832:	b16a      	cbz	r2, 800c850 <strncmp+0x20>
 800c834:	3901      	subs	r1, #1
 800c836:	1884      	adds	r4, r0, r2
 800c838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c83c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c840:	429a      	cmp	r2, r3
 800c842:	d103      	bne.n	800c84c <strncmp+0x1c>
 800c844:	42a0      	cmp	r0, r4
 800c846:	d001      	beq.n	800c84c <strncmp+0x1c>
 800c848:	2a00      	cmp	r2, #0
 800c84a:	d1f5      	bne.n	800c838 <strncmp+0x8>
 800c84c:	1ad0      	subs	r0, r2, r3
 800c84e:	bd10      	pop	{r4, pc}
 800c850:	4610      	mov	r0, r2
 800c852:	e7fc      	b.n	800c84e <strncmp+0x1e>

0800c854 <_sbrk_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d06      	ldr	r5, [pc, #24]	@ (800c870 <_sbrk_r+0x1c>)
 800c858:	2300      	movs	r3, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	602b      	str	r3, [r5, #0]
 800c860:	f7f5 fb44 	bl	8001eec <_sbrk>
 800c864:	1c43      	adds	r3, r0, #1
 800c866:	d102      	bne.n	800c86e <_sbrk_r+0x1a>
 800c868:	682b      	ldr	r3, [r5, #0]
 800c86a:	b103      	cbz	r3, 800c86e <_sbrk_r+0x1a>
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	20000974 	.word	0x20000974

0800c874 <memcpy>:
 800c874:	440a      	add	r2, r1
 800c876:	4291      	cmp	r1, r2
 800c878:	f100 33ff 	add.w	r3, r0, #4294967295
 800c87c:	d100      	bne.n	800c880 <memcpy+0xc>
 800c87e:	4770      	bx	lr
 800c880:	b510      	push	{r4, lr}
 800c882:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c88a:	4291      	cmp	r1, r2
 800c88c:	d1f9      	bne.n	800c882 <memcpy+0xe>
 800c88e:	bd10      	pop	{r4, pc}

0800c890 <nan>:
 800c890:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c898 <nan+0x8>
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	00000000 	.word	0x00000000
 800c89c:	7ff80000 	.word	0x7ff80000

0800c8a0 <__assert_func>:
 800c8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8a2:	4614      	mov	r4, r2
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	4b09      	ldr	r3, [pc, #36]	@ (800c8cc <__assert_func+0x2c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	68d8      	ldr	r0, [r3, #12]
 800c8ae:	b954      	cbnz	r4, 800c8c6 <__assert_func+0x26>
 800c8b0:	4b07      	ldr	r3, [pc, #28]	@ (800c8d0 <__assert_func+0x30>)
 800c8b2:	461c      	mov	r4, r3
 800c8b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8b8:	9100      	str	r1, [sp, #0]
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	4905      	ldr	r1, [pc, #20]	@ (800c8d4 <__assert_func+0x34>)
 800c8be:	f000 fba7 	bl	800d010 <fiprintf>
 800c8c2:	f000 fbb7 	bl	800d034 <abort>
 800c8c6:	4b04      	ldr	r3, [pc, #16]	@ (800c8d8 <__assert_func+0x38>)
 800c8c8:	e7f4      	b.n	800c8b4 <__assert_func+0x14>
 800c8ca:	bf00      	nop
 800c8cc:	20000030 	.word	0x20000030
 800c8d0:	0800d9dc 	.word	0x0800d9dc
 800c8d4:	0800d9ae 	.word	0x0800d9ae
 800c8d8:	0800d9a1 	.word	0x0800d9a1

0800c8dc <_calloc_r>:
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	fba1 5402 	umull	r5, r4, r1, r2
 800c8e2:	b93c      	cbnz	r4, 800c8f4 <_calloc_r+0x18>
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7fe fa3f 	bl	800ad68 <_malloc_r>
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	b928      	cbnz	r0, 800c8fa <_calloc_r+0x1e>
 800c8ee:	2600      	movs	r6, #0
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
 800c8f4:	220c      	movs	r2, #12
 800c8f6:	6002      	str	r2, [r0, #0]
 800c8f8:	e7f9      	b.n	800c8ee <_calloc_r+0x12>
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	f7fd fade 	bl	8009ebe <memset>
 800c902:	e7f5      	b.n	800c8f0 <_calloc_r+0x14>

0800c904 <rshift>:
 800c904:	6903      	ldr	r3, [r0, #16]
 800c906:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c90e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c912:	f100 0414 	add.w	r4, r0, #20
 800c916:	dd45      	ble.n	800c9a4 <rshift+0xa0>
 800c918:	f011 011f 	ands.w	r1, r1, #31
 800c91c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c920:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c924:	d10c      	bne.n	800c940 <rshift+0x3c>
 800c926:	f100 0710 	add.w	r7, r0, #16
 800c92a:	4629      	mov	r1, r5
 800c92c:	42b1      	cmp	r1, r6
 800c92e:	d334      	bcc.n	800c99a <rshift+0x96>
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	1eea      	subs	r2, r5, #3
 800c936:	4296      	cmp	r6, r2
 800c938:	bf38      	it	cc
 800c93a:	2300      	movcc	r3, #0
 800c93c:	4423      	add	r3, r4
 800c93e:	e015      	b.n	800c96c <rshift+0x68>
 800c940:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c944:	f1c1 0820 	rsb	r8, r1, #32
 800c948:	40cf      	lsrs	r7, r1
 800c94a:	f105 0e04 	add.w	lr, r5, #4
 800c94e:	46a1      	mov	r9, r4
 800c950:	4576      	cmp	r6, lr
 800c952:	46f4      	mov	ip, lr
 800c954:	d815      	bhi.n	800c982 <rshift+0x7e>
 800c956:	1a9a      	subs	r2, r3, r2
 800c958:	0092      	lsls	r2, r2, #2
 800c95a:	3a04      	subs	r2, #4
 800c95c:	3501      	adds	r5, #1
 800c95e:	42ae      	cmp	r6, r5
 800c960:	bf38      	it	cc
 800c962:	2200      	movcc	r2, #0
 800c964:	18a3      	adds	r3, r4, r2
 800c966:	50a7      	str	r7, [r4, r2]
 800c968:	b107      	cbz	r7, 800c96c <rshift+0x68>
 800c96a:	3304      	adds	r3, #4
 800c96c:	1b1a      	subs	r2, r3, r4
 800c96e:	42a3      	cmp	r3, r4
 800c970:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c974:	bf08      	it	eq
 800c976:	2300      	moveq	r3, #0
 800c978:	6102      	str	r2, [r0, #16]
 800c97a:	bf08      	it	eq
 800c97c:	6143      	streq	r3, [r0, #20]
 800c97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c982:	f8dc c000 	ldr.w	ip, [ip]
 800c986:	fa0c fc08 	lsl.w	ip, ip, r8
 800c98a:	ea4c 0707 	orr.w	r7, ip, r7
 800c98e:	f849 7b04 	str.w	r7, [r9], #4
 800c992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c996:	40cf      	lsrs	r7, r1
 800c998:	e7da      	b.n	800c950 <rshift+0x4c>
 800c99a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c99e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9a2:	e7c3      	b.n	800c92c <rshift+0x28>
 800c9a4:	4623      	mov	r3, r4
 800c9a6:	e7e1      	b.n	800c96c <rshift+0x68>

0800c9a8 <__hexdig_fun>:
 800c9a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c9ac:	2b09      	cmp	r3, #9
 800c9ae:	d802      	bhi.n	800c9b6 <__hexdig_fun+0xe>
 800c9b0:	3820      	subs	r0, #32
 800c9b2:	b2c0      	uxtb	r0, r0
 800c9b4:	4770      	bx	lr
 800c9b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c9ba:	2b05      	cmp	r3, #5
 800c9bc:	d801      	bhi.n	800c9c2 <__hexdig_fun+0x1a>
 800c9be:	3847      	subs	r0, #71	@ 0x47
 800c9c0:	e7f7      	b.n	800c9b2 <__hexdig_fun+0xa>
 800c9c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c9c6:	2b05      	cmp	r3, #5
 800c9c8:	d801      	bhi.n	800c9ce <__hexdig_fun+0x26>
 800c9ca:	3827      	subs	r0, #39	@ 0x27
 800c9cc:	e7f1      	b.n	800c9b2 <__hexdig_fun+0xa>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <__gethex>:
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	b085      	sub	sp, #20
 800c9da:	468a      	mov	sl, r1
 800c9dc:	9302      	str	r3, [sp, #8]
 800c9de:	680b      	ldr	r3, [r1, #0]
 800c9e0:	9001      	str	r0, [sp, #4]
 800c9e2:	4690      	mov	r8, r2
 800c9e4:	1c9c      	adds	r4, r3, #2
 800c9e6:	46a1      	mov	r9, r4
 800c9e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c9ec:	2830      	cmp	r0, #48	@ 0x30
 800c9ee:	d0fa      	beq.n	800c9e6 <__gethex+0x12>
 800c9f0:	eba9 0303 	sub.w	r3, r9, r3
 800c9f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c9f8:	f7ff ffd6 	bl	800c9a8 <__hexdig_fun>
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d168      	bne.n	800cad4 <__gethex+0x100>
 800ca02:	49a0      	ldr	r1, [pc, #640]	@ (800cc84 <__gethex+0x2b0>)
 800ca04:	2201      	movs	r2, #1
 800ca06:	4648      	mov	r0, r9
 800ca08:	f7ff ff12 	bl	800c830 <strncmp>
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d167      	bne.n	800cae2 <__gethex+0x10e>
 800ca12:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ca16:	4626      	mov	r6, r4
 800ca18:	f7ff ffc6 	bl	800c9a8 <__hexdig_fun>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d062      	beq.n	800cae6 <__gethex+0x112>
 800ca20:	4623      	mov	r3, r4
 800ca22:	7818      	ldrb	r0, [r3, #0]
 800ca24:	2830      	cmp	r0, #48	@ 0x30
 800ca26:	4699      	mov	r9, r3
 800ca28:	f103 0301 	add.w	r3, r3, #1
 800ca2c:	d0f9      	beq.n	800ca22 <__gethex+0x4e>
 800ca2e:	f7ff ffbb 	bl	800c9a8 <__hexdig_fun>
 800ca32:	fab0 f580 	clz	r5, r0
 800ca36:	096d      	lsrs	r5, r5, #5
 800ca38:	f04f 0b01 	mov.w	fp, #1
 800ca3c:	464a      	mov	r2, r9
 800ca3e:	4616      	mov	r6, r2
 800ca40:	3201      	adds	r2, #1
 800ca42:	7830      	ldrb	r0, [r6, #0]
 800ca44:	f7ff ffb0 	bl	800c9a8 <__hexdig_fun>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1f8      	bne.n	800ca3e <__gethex+0x6a>
 800ca4c:	498d      	ldr	r1, [pc, #564]	@ (800cc84 <__gethex+0x2b0>)
 800ca4e:	2201      	movs	r2, #1
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff feed 	bl	800c830 <strncmp>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d13f      	bne.n	800cada <__gethex+0x106>
 800ca5a:	b944      	cbnz	r4, 800ca6e <__gethex+0x9a>
 800ca5c:	1c74      	adds	r4, r6, #1
 800ca5e:	4622      	mov	r2, r4
 800ca60:	4616      	mov	r6, r2
 800ca62:	3201      	adds	r2, #1
 800ca64:	7830      	ldrb	r0, [r6, #0]
 800ca66:	f7ff ff9f 	bl	800c9a8 <__hexdig_fun>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	d1f8      	bne.n	800ca60 <__gethex+0x8c>
 800ca6e:	1ba4      	subs	r4, r4, r6
 800ca70:	00a7      	lsls	r7, r4, #2
 800ca72:	7833      	ldrb	r3, [r6, #0]
 800ca74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ca78:	2b50      	cmp	r3, #80	@ 0x50
 800ca7a:	d13e      	bne.n	800cafa <__gethex+0x126>
 800ca7c:	7873      	ldrb	r3, [r6, #1]
 800ca7e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca80:	d033      	beq.n	800caea <__gethex+0x116>
 800ca82:	2b2d      	cmp	r3, #45	@ 0x2d
 800ca84:	d034      	beq.n	800caf0 <__gethex+0x11c>
 800ca86:	1c71      	adds	r1, r6, #1
 800ca88:	2400      	movs	r4, #0
 800ca8a:	7808      	ldrb	r0, [r1, #0]
 800ca8c:	f7ff ff8c 	bl	800c9a8 <__hexdig_fun>
 800ca90:	1e43      	subs	r3, r0, #1
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b18      	cmp	r3, #24
 800ca96:	d830      	bhi.n	800cafa <__gethex+0x126>
 800ca98:	f1a0 0210 	sub.w	r2, r0, #16
 800ca9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800caa0:	f7ff ff82 	bl	800c9a8 <__hexdig_fun>
 800caa4:	f100 3cff 	add.w	ip, r0, #4294967295
 800caa8:	fa5f fc8c 	uxtb.w	ip, ip
 800caac:	f1bc 0f18 	cmp.w	ip, #24
 800cab0:	f04f 030a 	mov.w	r3, #10
 800cab4:	d91e      	bls.n	800caf4 <__gethex+0x120>
 800cab6:	b104      	cbz	r4, 800caba <__gethex+0xe6>
 800cab8:	4252      	negs	r2, r2
 800caba:	4417      	add	r7, r2
 800cabc:	f8ca 1000 	str.w	r1, [sl]
 800cac0:	b1ed      	cbz	r5, 800cafe <__gethex+0x12a>
 800cac2:	f1bb 0f00 	cmp.w	fp, #0
 800cac6:	bf0c      	ite	eq
 800cac8:	2506      	moveq	r5, #6
 800caca:	2500      	movne	r5, #0
 800cacc:	4628      	mov	r0, r5
 800cace:	b005      	add	sp, #20
 800cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad4:	2500      	movs	r5, #0
 800cad6:	462c      	mov	r4, r5
 800cad8:	e7b0      	b.n	800ca3c <__gethex+0x68>
 800cada:	2c00      	cmp	r4, #0
 800cadc:	d1c7      	bne.n	800ca6e <__gethex+0x9a>
 800cade:	4627      	mov	r7, r4
 800cae0:	e7c7      	b.n	800ca72 <__gethex+0x9e>
 800cae2:	464e      	mov	r6, r9
 800cae4:	462f      	mov	r7, r5
 800cae6:	2501      	movs	r5, #1
 800cae8:	e7c3      	b.n	800ca72 <__gethex+0x9e>
 800caea:	2400      	movs	r4, #0
 800caec:	1cb1      	adds	r1, r6, #2
 800caee:	e7cc      	b.n	800ca8a <__gethex+0xb6>
 800caf0:	2401      	movs	r4, #1
 800caf2:	e7fb      	b.n	800caec <__gethex+0x118>
 800caf4:	fb03 0002 	mla	r0, r3, r2, r0
 800caf8:	e7ce      	b.n	800ca98 <__gethex+0xc4>
 800cafa:	4631      	mov	r1, r6
 800cafc:	e7de      	b.n	800cabc <__gethex+0xe8>
 800cafe:	eba6 0309 	sub.w	r3, r6, r9
 800cb02:	3b01      	subs	r3, #1
 800cb04:	4629      	mov	r1, r5
 800cb06:	2b07      	cmp	r3, #7
 800cb08:	dc0a      	bgt.n	800cb20 <__gethex+0x14c>
 800cb0a:	9801      	ldr	r0, [sp, #4]
 800cb0c:	f7fe f9b8 	bl	800ae80 <_Balloc>
 800cb10:	4604      	mov	r4, r0
 800cb12:	b940      	cbnz	r0, 800cb26 <__gethex+0x152>
 800cb14:	4b5c      	ldr	r3, [pc, #368]	@ (800cc88 <__gethex+0x2b4>)
 800cb16:	4602      	mov	r2, r0
 800cb18:	21e4      	movs	r1, #228	@ 0xe4
 800cb1a:	485c      	ldr	r0, [pc, #368]	@ (800cc8c <__gethex+0x2b8>)
 800cb1c:	f7ff fec0 	bl	800c8a0 <__assert_func>
 800cb20:	3101      	adds	r1, #1
 800cb22:	105b      	asrs	r3, r3, #1
 800cb24:	e7ef      	b.n	800cb06 <__gethex+0x132>
 800cb26:	f100 0a14 	add.w	sl, r0, #20
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	4655      	mov	r5, sl
 800cb2e:	469b      	mov	fp, r3
 800cb30:	45b1      	cmp	r9, r6
 800cb32:	d337      	bcc.n	800cba4 <__gethex+0x1d0>
 800cb34:	f845 bb04 	str.w	fp, [r5], #4
 800cb38:	eba5 050a 	sub.w	r5, r5, sl
 800cb3c:	10ad      	asrs	r5, r5, #2
 800cb3e:	6125      	str	r5, [r4, #16]
 800cb40:	4658      	mov	r0, fp
 800cb42:	f7fe fa8f 	bl	800b064 <__hi0bits>
 800cb46:	016d      	lsls	r5, r5, #5
 800cb48:	f8d8 6000 	ldr.w	r6, [r8]
 800cb4c:	1a2d      	subs	r5, r5, r0
 800cb4e:	42b5      	cmp	r5, r6
 800cb50:	dd54      	ble.n	800cbfc <__gethex+0x228>
 800cb52:	1bad      	subs	r5, r5, r6
 800cb54:	4629      	mov	r1, r5
 800cb56:	4620      	mov	r0, r4
 800cb58:	f7fe fe23 	bl	800b7a2 <__any_on>
 800cb5c:	4681      	mov	r9, r0
 800cb5e:	b178      	cbz	r0, 800cb80 <__gethex+0x1ac>
 800cb60:	1e6b      	subs	r3, r5, #1
 800cb62:	1159      	asrs	r1, r3, #5
 800cb64:	f003 021f 	and.w	r2, r3, #31
 800cb68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb6c:	f04f 0901 	mov.w	r9, #1
 800cb70:	fa09 f202 	lsl.w	r2, r9, r2
 800cb74:	420a      	tst	r2, r1
 800cb76:	d003      	beq.n	800cb80 <__gethex+0x1ac>
 800cb78:	454b      	cmp	r3, r9
 800cb7a:	dc36      	bgt.n	800cbea <__gethex+0x216>
 800cb7c:	f04f 0902 	mov.w	r9, #2
 800cb80:	4629      	mov	r1, r5
 800cb82:	4620      	mov	r0, r4
 800cb84:	f7ff febe 	bl	800c904 <rshift>
 800cb88:	442f      	add	r7, r5
 800cb8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb8e:	42bb      	cmp	r3, r7
 800cb90:	da42      	bge.n	800cc18 <__gethex+0x244>
 800cb92:	9801      	ldr	r0, [sp, #4]
 800cb94:	4621      	mov	r1, r4
 800cb96:	f7fe f9b3 	bl	800af00 <_Bfree>
 800cb9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	25a3      	movs	r5, #163	@ 0xa3
 800cba2:	e793      	b.n	800cacc <__gethex+0xf8>
 800cba4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cba8:	2a2e      	cmp	r2, #46	@ 0x2e
 800cbaa:	d012      	beq.n	800cbd2 <__gethex+0x1fe>
 800cbac:	2b20      	cmp	r3, #32
 800cbae:	d104      	bne.n	800cbba <__gethex+0x1e6>
 800cbb0:	f845 bb04 	str.w	fp, [r5], #4
 800cbb4:	f04f 0b00 	mov.w	fp, #0
 800cbb8:	465b      	mov	r3, fp
 800cbba:	7830      	ldrb	r0, [r6, #0]
 800cbbc:	9303      	str	r3, [sp, #12]
 800cbbe:	f7ff fef3 	bl	800c9a8 <__hexdig_fun>
 800cbc2:	9b03      	ldr	r3, [sp, #12]
 800cbc4:	f000 000f 	and.w	r0, r0, #15
 800cbc8:	4098      	lsls	r0, r3
 800cbca:	ea4b 0b00 	orr.w	fp, fp, r0
 800cbce:	3304      	adds	r3, #4
 800cbd0:	e7ae      	b.n	800cb30 <__gethex+0x15c>
 800cbd2:	45b1      	cmp	r9, r6
 800cbd4:	d8ea      	bhi.n	800cbac <__gethex+0x1d8>
 800cbd6:	492b      	ldr	r1, [pc, #172]	@ (800cc84 <__gethex+0x2b0>)
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7ff fe27 	bl	800c830 <strncmp>
 800cbe2:	9b03      	ldr	r3, [sp, #12]
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d1e1      	bne.n	800cbac <__gethex+0x1d8>
 800cbe8:	e7a2      	b.n	800cb30 <__gethex+0x15c>
 800cbea:	1ea9      	subs	r1, r5, #2
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7fe fdd8 	bl	800b7a2 <__any_on>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0c2      	beq.n	800cb7c <__gethex+0x1a8>
 800cbf6:	f04f 0903 	mov.w	r9, #3
 800cbfa:	e7c1      	b.n	800cb80 <__gethex+0x1ac>
 800cbfc:	da09      	bge.n	800cc12 <__gethex+0x23e>
 800cbfe:	1b75      	subs	r5, r6, r5
 800cc00:	4621      	mov	r1, r4
 800cc02:	9801      	ldr	r0, [sp, #4]
 800cc04:	462a      	mov	r2, r5
 800cc06:	f7fe fb93 	bl	800b330 <__lshift>
 800cc0a:	1b7f      	subs	r7, r7, r5
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	f100 0a14 	add.w	sl, r0, #20
 800cc12:	f04f 0900 	mov.w	r9, #0
 800cc16:	e7b8      	b.n	800cb8a <__gethex+0x1b6>
 800cc18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc1c:	42bd      	cmp	r5, r7
 800cc1e:	dd6f      	ble.n	800cd00 <__gethex+0x32c>
 800cc20:	1bed      	subs	r5, r5, r7
 800cc22:	42ae      	cmp	r6, r5
 800cc24:	dc34      	bgt.n	800cc90 <__gethex+0x2bc>
 800cc26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d022      	beq.n	800cc74 <__gethex+0x2a0>
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d024      	beq.n	800cc7c <__gethex+0x2a8>
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d115      	bne.n	800cc62 <__gethex+0x28e>
 800cc36:	42ae      	cmp	r6, r5
 800cc38:	d113      	bne.n	800cc62 <__gethex+0x28e>
 800cc3a:	2e01      	cmp	r6, #1
 800cc3c:	d10b      	bne.n	800cc56 <__gethex+0x282>
 800cc3e:	9a02      	ldr	r2, [sp, #8]
 800cc40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	2301      	movs	r3, #1
 800cc48:	6123      	str	r3, [r4, #16]
 800cc4a:	f8ca 3000 	str.w	r3, [sl]
 800cc4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc50:	2562      	movs	r5, #98	@ 0x62
 800cc52:	601c      	str	r4, [r3, #0]
 800cc54:	e73a      	b.n	800cacc <__gethex+0xf8>
 800cc56:	1e71      	subs	r1, r6, #1
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f7fe fda2 	bl	800b7a2 <__any_on>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d1ed      	bne.n	800cc3e <__gethex+0x26a>
 800cc62:	9801      	ldr	r0, [sp, #4]
 800cc64:	4621      	mov	r1, r4
 800cc66:	f7fe f94b 	bl	800af00 <_Bfree>
 800cc6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	2550      	movs	r5, #80	@ 0x50
 800cc72:	e72b      	b.n	800cacc <__gethex+0xf8>
 800cc74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1f3      	bne.n	800cc62 <__gethex+0x28e>
 800cc7a:	e7e0      	b.n	800cc3e <__gethex+0x26a>
 800cc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1dd      	bne.n	800cc3e <__gethex+0x26a>
 800cc82:	e7ee      	b.n	800cc62 <__gethex+0x28e>
 800cc84:	0800d930 	.word	0x0800d930
 800cc88:	0800d7ca 	.word	0x0800d7ca
 800cc8c:	0800d9dd 	.word	0x0800d9dd
 800cc90:	1e6f      	subs	r7, r5, #1
 800cc92:	f1b9 0f00 	cmp.w	r9, #0
 800cc96:	d130      	bne.n	800ccfa <__gethex+0x326>
 800cc98:	b127      	cbz	r7, 800cca4 <__gethex+0x2d0>
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7fe fd80 	bl	800b7a2 <__any_on>
 800cca2:	4681      	mov	r9, r0
 800cca4:	117a      	asrs	r2, r7, #5
 800cca6:	2301      	movs	r3, #1
 800cca8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ccac:	f007 071f 	and.w	r7, r7, #31
 800ccb0:	40bb      	lsls	r3, r7
 800ccb2:	4213      	tst	r3, r2
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	bf18      	it	ne
 800ccba:	f049 0902 	orrne.w	r9, r9, #2
 800ccbe:	f7ff fe21 	bl	800c904 <rshift>
 800ccc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ccc6:	1b76      	subs	r6, r6, r5
 800ccc8:	2502      	movs	r5, #2
 800ccca:	f1b9 0f00 	cmp.w	r9, #0
 800ccce:	d047      	beq.n	800cd60 <__gethex+0x38c>
 800ccd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d015      	beq.n	800cd04 <__gethex+0x330>
 800ccd8:	2b03      	cmp	r3, #3
 800ccda:	d017      	beq.n	800cd0c <__gethex+0x338>
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d109      	bne.n	800ccf4 <__gethex+0x320>
 800cce0:	f019 0f02 	tst.w	r9, #2
 800cce4:	d006      	beq.n	800ccf4 <__gethex+0x320>
 800cce6:	f8da 3000 	ldr.w	r3, [sl]
 800ccea:	ea49 0903 	orr.w	r9, r9, r3
 800ccee:	f019 0f01 	tst.w	r9, #1
 800ccf2:	d10e      	bne.n	800cd12 <__gethex+0x33e>
 800ccf4:	f045 0510 	orr.w	r5, r5, #16
 800ccf8:	e032      	b.n	800cd60 <__gethex+0x38c>
 800ccfa:	f04f 0901 	mov.w	r9, #1
 800ccfe:	e7d1      	b.n	800cca4 <__gethex+0x2d0>
 800cd00:	2501      	movs	r5, #1
 800cd02:	e7e2      	b.n	800ccca <__gethex+0x2f6>
 800cd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd06:	f1c3 0301 	rsb	r3, r3, #1
 800cd0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0f0      	beq.n	800ccf4 <__gethex+0x320>
 800cd12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd16:	f104 0314 	add.w	r3, r4, #20
 800cd1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd22:	f04f 0c00 	mov.w	ip, #0
 800cd26:	4618      	mov	r0, r3
 800cd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd30:	d01b      	beq.n	800cd6a <__gethex+0x396>
 800cd32:	3201      	adds	r2, #1
 800cd34:	6002      	str	r2, [r0, #0]
 800cd36:	2d02      	cmp	r5, #2
 800cd38:	f104 0314 	add.w	r3, r4, #20
 800cd3c:	d13c      	bne.n	800cdb8 <__gethex+0x3e4>
 800cd3e:	f8d8 2000 	ldr.w	r2, [r8]
 800cd42:	3a01      	subs	r2, #1
 800cd44:	42b2      	cmp	r2, r6
 800cd46:	d109      	bne.n	800cd5c <__gethex+0x388>
 800cd48:	1171      	asrs	r1, r6, #5
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd50:	f006 061f 	and.w	r6, r6, #31
 800cd54:	fa02 f606 	lsl.w	r6, r2, r6
 800cd58:	421e      	tst	r6, r3
 800cd5a:	d13a      	bne.n	800cdd2 <__gethex+0x3fe>
 800cd5c:	f045 0520 	orr.w	r5, r5, #32
 800cd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd62:	601c      	str	r4, [r3, #0]
 800cd64:	9b02      	ldr	r3, [sp, #8]
 800cd66:	601f      	str	r7, [r3, #0]
 800cd68:	e6b0      	b.n	800cacc <__gethex+0xf8>
 800cd6a:	4299      	cmp	r1, r3
 800cd6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd70:	d8d9      	bhi.n	800cd26 <__gethex+0x352>
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	459b      	cmp	fp, r3
 800cd76:	db17      	blt.n	800cda8 <__gethex+0x3d4>
 800cd78:	6861      	ldr	r1, [r4, #4]
 800cd7a:	9801      	ldr	r0, [sp, #4]
 800cd7c:	3101      	adds	r1, #1
 800cd7e:	f7fe f87f 	bl	800ae80 <_Balloc>
 800cd82:	4681      	mov	r9, r0
 800cd84:	b918      	cbnz	r0, 800cd8e <__gethex+0x3ba>
 800cd86:	4b1a      	ldr	r3, [pc, #104]	@ (800cdf0 <__gethex+0x41c>)
 800cd88:	4602      	mov	r2, r0
 800cd8a:	2184      	movs	r1, #132	@ 0x84
 800cd8c:	e6c5      	b.n	800cb1a <__gethex+0x146>
 800cd8e:	6922      	ldr	r2, [r4, #16]
 800cd90:	3202      	adds	r2, #2
 800cd92:	f104 010c 	add.w	r1, r4, #12
 800cd96:	0092      	lsls	r2, r2, #2
 800cd98:	300c      	adds	r0, #12
 800cd9a:	f7ff fd6b 	bl	800c874 <memcpy>
 800cd9e:	4621      	mov	r1, r4
 800cda0:	9801      	ldr	r0, [sp, #4]
 800cda2:	f7fe f8ad 	bl	800af00 <_Bfree>
 800cda6:	464c      	mov	r4, r9
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	1c5a      	adds	r2, r3, #1
 800cdac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdb0:	6122      	str	r2, [r4, #16]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	615a      	str	r2, [r3, #20]
 800cdb6:	e7be      	b.n	800cd36 <__gethex+0x362>
 800cdb8:	6922      	ldr	r2, [r4, #16]
 800cdba:	455a      	cmp	r2, fp
 800cdbc:	dd0b      	ble.n	800cdd6 <__gethex+0x402>
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f7ff fd9f 	bl	800c904 <rshift>
 800cdc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdca:	3701      	adds	r7, #1
 800cdcc:	42bb      	cmp	r3, r7
 800cdce:	f6ff aee0 	blt.w	800cb92 <__gethex+0x1be>
 800cdd2:	2501      	movs	r5, #1
 800cdd4:	e7c2      	b.n	800cd5c <__gethex+0x388>
 800cdd6:	f016 061f 	ands.w	r6, r6, #31
 800cdda:	d0fa      	beq.n	800cdd2 <__gethex+0x3fe>
 800cddc:	4453      	add	r3, sl
 800cdde:	f1c6 0620 	rsb	r6, r6, #32
 800cde2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cde6:	f7fe f93d 	bl	800b064 <__hi0bits>
 800cdea:	42b0      	cmp	r0, r6
 800cdec:	dbe7      	blt.n	800cdbe <__gethex+0x3ea>
 800cdee:	e7f0      	b.n	800cdd2 <__gethex+0x3fe>
 800cdf0:	0800d7ca 	.word	0x0800d7ca

0800cdf4 <L_shift>:
 800cdf4:	f1c2 0208 	rsb	r2, r2, #8
 800cdf8:	0092      	lsls	r2, r2, #2
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	f1c2 0620 	rsb	r6, r2, #32
 800ce00:	6843      	ldr	r3, [r0, #4]
 800ce02:	6804      	ldr	r4, [r0, #0]
 800ce04:	fa03 f506 	lsl.w	r5, r3, r6
 800ce08:	432c      	orrs	r4, r5
 800ce0a:	40d3      	lsrs	r3, r2
 800ce0c:	6004      	str	r4, [r0, #0]
 800ce0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce12:	4288      	cmp	r0, r1
 800ce14:	d3f4      	bcc.n	800ce00 <L_shift+0xc>
 800ce16:	bd70      	pop	{r4, r5, r6, pc}

0800ce18 <__match>:
 800ce18:	b530      	push	{r4, r5, lr}
 800ce1a:	6803      	ldr	r3, [r0, #0]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce22:	b914      	cbnz	r4, 800ce2a <__match+0x12>
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	2001      	movs	r0, #1
 800ce28:	bd30      	pop	{r4, r5, pc}
 800ce2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ce32:	2d19      	cmp	r5, #25
 800ce34:	bf98      	it	ls
 800ce36:	3220      	addls	r2, #32
 800ce38:	42a2      	cmp	r2, r4
 800ce3a:	d0f0      	beq.n	800ce1e <__match+0x6>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e7f3      	b.n	800ce28 <__match+0x10>

0800ce40 <__hexnan>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	680b      	ldr	r3, [r1, #0]
 800ce46:	6801      	ldr	r1, [r0, #0]
 800ce48:	115e      	asrs	r6, r3, #5
 800ce4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce4e:	f013 031f 	ands.w	r3, r3, #31
 800ce52:	b087      	sub	sp, #28
 800ce54:	bf18      	it	ne
 800ce56:	3604      	addne	r6, #4
 800ce58:	2500      	movs	r5, #0
 800ce5a:	1f37      	subs	r7, r6, #4
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	4690      	mov	r8, r2
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce66:	46b9      	mov	r9, r7
 800ce68:	463c      	mov	r4, r7
 800ce6a:	9502      	str	r5, [sp, #8]
 800ce6c:	46ab      	mov	fp, r5
 800ce6e:	784a      	ldrb	r2, [r1, #1]
 800ce70:	1c4b      	adds	r3, r1, #1
 800ce72:	9303      	str	r3, [sp, #12]
 800ce74:	b342      	cbz	r2, 800cec8 <__hexnan+0x88>
 800ce76:	4610      	mov	r0, r2
 800ce78:	9105      	str	r1, [sp, #20]
 800ce7a:	9204      	str	r2, [sp, #16]
 800ce7c:	f7ff fd94 	bl	800c9a8 <__hexdig_fun>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d151      	bne.n	800cf28 <__hexnan+0xe8>
 800ce84:	9a04      	ldr	r2, [sp, #16]
 800ce86:	9905      	ldr	r1, [sp, #20]
 800ce88:	2a20      	cmp	r2, #32
 800ce8a:	d818      	bhi.n	800cebe <__hexnan+0x7e>
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	459b      	cmp	fp, r3
 800ce90:	dd13      	ble.n	800ceba <__hexnan+0x7a>
 800ce92:	454c      	cmp	r4, r9
 800ce94:	d206      	bcs.n	800cea4 <__hexnan+0x64>
 800ce96:	2d07      	cmp	r5, #7
 800ce98:	dc04      	bgt.n	800cea4 <__hexnan+0x64>
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7ff ffa8 	bl	800cdf4 <L_shift>
 800cea4:	4544      	cmp	r4, r8
 800cea6:	d952      	bls.n	800cf4e <__hexnan+0x10e>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ceae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ceb6:	464c      	mov	r4, r9
 800ceb8:	461d      	mov	r5, r3
 800ceba:	9903      	ldr	r1, [sp, #12]
 800cebc:	e7d7      	b.n	800ce6e <__hexnan+0x2e>
 800cebe:	2a29      	cmp	r2, #41	@ 0x29
 800cec0:	d157      	bne.n	800cf72 <__hexnan+0x132>
 800cec2:	3102      	adds	r1, #2
 800cec4:	f8ca 1000 	str.w	r1, [sl]
 800cec8:	f1bb 0f00 	cmp.w	fp, #0
 800cecc:	d051      	beq.n	800cf72 <__hexnan+0x132>
 800cece:	454c      	cmp	r4, r9
 800ced0:	d206      	bcs.n	800cee0 <__hexnan+0xa0>
 800ced2:	2d07      	cmp	r5, #7
 800ced4:	dc04      	bgt.n	800cee0 <__hexnan+0xa0>
 800ced6:	462a      	mov	r2, r5
 800ced8:	4649      	mov	r1, r9
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff ff8a 	bl	800cdf4 <L_shift>
 800cee0:	4544      	cmp	r4, r8
 800cee2:	d936      	bls.n	800cf52 <__hexnan+0x112>
 800cee4:	f1a8 0204 	sub.w	r2, r8, #4
 800cee8:	4623      	mov	r3, r4
 800ceea:	f853 1b04 	ldr.w	r1, [r3], #4
 800ceee:	f842 1f04 	str.w	r1, [r2, #4]!
 800cef2:	429f      	cmp	r7, r3
 800cef4:	d2f9      	bcs.n	800ceea <__hexnan+0xaa>
 800cef6:	1b3b      	subs	r3, r7, r4
 800cef8:	f023 0303 	bic.w	r3, r3, #3
 800cefc:	3304      	adds	r3, #4
 800cefe:	3401      	adds	r4, #1
 800cf00:	3e03      	subs	r6, #3
 800cf02:	42b4      	cmp	r4, r6
 800cf04:	bf88      	it	hi
 800cf06:	2304      	movhi	r3, #4
 800cf08:	4443      	add	r3, r8
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f843 2b04 	str.w	r2, [r3], #4
 800cf10:	429f      	cmp	r7, r3
 800cf12:	d2fb      	bcs.n	800cf0c <__hexnan+0xcc>
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	b91b      	cbnz	r3, 800cf20 <__hexnan+0xe0>
 800cf18:	4547      	cmp	r7, r8
 800cf1a:	d128      	bne.n	800cf6e <__hexnan+0x12e>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	603b      	str	r3, [r7, #0]
 800cf20:	2005      	movs	r0, #5
 800cf22:	b007      	add	sp, #28
 800cf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf28:	3501      	adds	r5, #1
 800cf2a:	2d08      	cmp	r5, #8
 800cf2c:	f10b 0b01 	add.w	fp, fp, #1
 800cf30:	dd06      	ble.n	800cf40 <__hexnan+0x100>
 800cf32:	4544      	cmp	r4, r8
 800cf34:	d9c1      	bls.n	800ceba <__hexnan+0x7a>
 800cf36:	2300      	movs	r3, #0
 800cf38:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf3c:	2501      	movs	r5, #1
 800cf3e:	3c04      	subs	r4, #4
 800cf40:	6822      	ldr	r2, [r4, #0]
 800cf42:	f000 000f 	and.w	r0, r0, #15
 800cf46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf4a:	6020      	str	r0, [r4, #0]
 800cf4c:	e7b5      	b.n	800ceba <__hexnan+0x7a>
 800cf4e:	2508      	movs	r5, #8
 800cf50:	e7b3      	b.n	800ceba <__hexnan+0x7a>
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d0dd      	beq.n	800cf14 <__hexnan+0xd4>
 800cf58:	f1c3 0320 	rsb	r3, r3, #32
 800cf5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf60:	40da      	lsrs	r2, r3
 800cf62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf66:	4013      	ands	r3, r2
 800cf68:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf6c:	e7d2      	b.n	800cf14 <__hexnan+0xd4>
 800cf6e:	3f04      	subs	r7, #4
 800cf70:	e7d0      	b.n	800cf14 <__hexnan+0xd4>
 800cf72:	2004      	movs	r0, #4
 800cf74:	e7d5      	b.n	800cf22 <__hexnan+0xe2>

0800cf76 <__ascii_mbtowc>:
 800cf76:	b082      	sub	sp, #8
 800cf78:	b901      	cbnz	r1, 800cf7c <__ascii_mbtowc+0x6>
 800cf7a:	a901      	add	r1, sp, #4
 800cf7c:	b142      	cbz	r2, 800cf90 <__ascii_mbtowc+0x1a>
 800cf7e:	b14b      	cbz	r3, 800cf94 <__ascii_mbtowc+0x1e>
 800cf80:	7813      	ldrb	r3, [r2, #0]
 800cf82:	600b      	str	r3, [r1, #0]
 800cf84:	7812      	ldrb	r2, [r2, #0]
 800cf86:	1e10      	subs	r0, r2, #0
 800cf88:	bf18      	it	ne
 800cf8a:	2001      	movne	r0, #1
 800cf8c:	b002      	add	sp, #8
 800cf8e:	4770      	bx	lr
 800cf90:	4610      	mov	r0, r2
 800cf92:	e7fb      	b.n	800cf8c <__ascii_mbtowc+0x16>
 800cf94:	f06f 0001 	mvn.w	r0, #1
 800cf98:	e7f8      	b.n	800cf8c <__ascii_mbtowc+0x16>

0800cf9a <_realloc_r>:
 800cf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	b921      	cbnz	r1, 800cfb0 <_realloc_r+0x16>
 800cfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfaa:	4611      	mov	r1, r2
 800cfac:	f7fd bedc 	b.w	800ad68 <_malloc_r>
 800cfb0:	b92a      	cbnz	r2, 800cfbe <_realloc_r+0x24>
 800cfb2:	f7fd fe65 	bl	800ac80 <_free_r>
 800cfb6:	2400      	movs	r4, #0
 800cfb8:	4620      	mov	r0, r4
 800cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbe:	f000 f840 	bl	800d042 <_malloc_usable_size_r>
 800cfc2:	4285      	cmp	r5, r0
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	d802      	bhi.n	800cfce <_realloc_r+0x34>
 800cfc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cfcc:	d8f4      	bhi.n	800cfb8 <_realloc_r+0x1e>
 800cfce:	4629      	mov	r1, r5
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	f7fd fec9 	bl	800ad68 <_malloc_r>
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d0ec      	beq.n	800cfb6 <_realloc_r+0x1c>
 800cfdc:	42b5      	cmp	r5, r6
 800cfde:	462a      	mov	r2, r5
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	bf28      	it	cs
 800cfe4:	4632      	movcs	r2, r6
 800cfe6:	f7ff fc45 	bl	800c874 <memcpy>
 800cfea:	4621      	mov	r1, r4
 800cfec:	4640      	mov	r0, r8
 800cfee:	f7fd fe47 	bl	800ac80 <_free_r>
 800cff2:	463c      	mov	r4, r7
 800cff4:	e7e0      	b.n	800cfb8 <_realloc_r+0x1e>

0800cff6 <__ascii_wctomb>:
 800cff6:	4603      	mov	r3, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	b141      	cbz	r1, 800d00e <__ascii_wctomb+0x18>
 800cffc:	2aff      	cmp	r2, #255	@ 0xff
 800cffe:	d904      	bls.n	800d00a <__ascii_wctomb+0x14>
 800d000:	228a      	movs	r2, #138	@ 0x8a
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	f04f 30ff 	mov.w	r0, #4294967295
 800d008:	4770      	bx	lr
 800d00a:	700a      	strb	r2, [r1, #0]
 800d00c:	2001      	movs	r0, #1
 800d00e:	4770      	bx	lr

0800d010 <fiprintf>:
 800d010:	b40e      	push	{r1, r2, r3}
 800d012:	b503      	push	{r0, r1, lr}
 800d014:	4601      	mov	r1, r0
 800d016:	ab03      	add	r3, sp, #12
 800d018:	4805      	ldr	r0, [pc, #20]	@ (800d030 <fiprintf+0x20>)
 800d01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01e:	6800      	ldr	r0, [r0, #0]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	f000 f83f 	bl	800d0a4 <_vfiprintf_r>
 800d026:	b002      	add	sp, #8
 800d028:	f85d eb04 	ldr.w	lr, [sp], #4
 800d02c:	b003      	add	sp, #12
 800d02e:	4770      	bx	lr
 800d030:	20000030 	.word	0x20000030

0800d034 <abort>:
 800d034:	b508      	push	{r3, lr}
 800d036:	2006      	movs	r0, #6
 800d038:	f000 fa08 	bl	800d44c <raise>
 800d03c:	2001      	movs	r0, #1
 800d03e:	f7f4 fedd 	bl	8001dfc <_exit>

0800d042 <_malloc_usable_size_r>:
 800d042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d046:	1f18      	subs	r0, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	bfbc      	itt	lt
 800d04c:	580b      	ldrlt	r3, [r1, r0]
 800d04e:	18c0      	addlt	r0, r0, r3
 800d050:	4770      	bx	lr

0800d052 <__sfputc_r>:
 800d052:	6893      	ldr	r3, [r2, #8]
 800d054:	3b01      	subs	r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	b410      	push	{r4}
 800d05a:	6093      	str	r3, [r2, #8]
 800d05c:	da08      	bge.n	800d070 <__sfputc_r+0x1e>
 800d05e:	6994      	ldr	r4, [r2, #24]
 800d060:	42a3      	cmp	r3, r4
 800d062:	db01      	blt.n	800d068 <__sfputc_r+0x16>
 800d064:	290a      	cmp	r1, #10
 800d066:	d103      	bne.n	800d070 <__sfputc_r+0x1e>
 800d068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d06c:	f000 b932 	b.w	800d2d4 <__swbuf_r>
 800d070:	6813      	ldr	r3, [r2, #0]
 800d072:	1c58      	adds	r0, r3, #1
 800d074:	6010      	str	r0, [r2, #0]
 800d076:	7019      	strb	r1, [r3, #0]
 800d078:	4608      	mov	r0, r1
 800d07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <__sfputs_r>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	4606      	mov	r6, r0
 800d084:	460f      	mov	r7, r1
 800d086:	4614      	mov	r4, r2
 800d088:	18d5      	adds	r5, r2, r3
 800d08a:	42ac      	cmp	r4, r5
 800d08c:	d101      	bne.n	800d092 <__sfputs_r+0x12>
 800d08e:	2000      	movs	r0, #0
 800d090:	e007      	b.n	800d0a2 <__sfputs_r+0x22>
 800d092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d096:	463a      	mov	r2, r7
 800d098:	4630      	mov	r0, r6
 800d09a:	f7ff ffda 	bl	800d052 <__sfputc_r>
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	d1f3      	bne.n	800d08a <__sfputs_r+0xa>
 800d0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0a4 <_vfiprintf_r>:
 800d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	b09d      	sub	sp, #116	@ 0x74
 800d0ac:	4614      	mov	r4, r2
 800d0ae:	4698      	mov	r8, r3
 800d0b0:	4606      	mov	r6, r0
 800d0b2:	b118      	cbz	r0, 800d0bc <_vfiprintf_r+0x18>
 800d0b4:	6a03      	ldr	r3, [r0, #32]
 800d0b6:	b90b      	cbnz	r3, 800d0bc <_vfiprintf_r+0x18>
 800d0b8:	f7fc fe68 	bl	8009d8c <__sinit>
 800d0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0be:	07d9      	lsls	r1, r3, #31
 800d0c0:	d405      	bmi.n	800d0ce <_vfiprintf_r+0x2a>
 800d0c2:	89ab      	ldrh	r3, [r5, #12]
 800d0c4:	059a      	lsls	r2, r3, #22
 800d0c6:	d402      	bmi.n	800d0ce <_vfiprintf_r+0x2a>
 800d0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ca:	f7fc ff84 	bl	8009fd6 <__retarget_lock_acquire_recursive>
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	071b      	lsls	r3, r3, #28
 800d0d2:	d501      	bpl.n	800d0d8 <_vfiprintf_r+0x34>
 800d0d4:	692b      	ldr	r3, [r5, #16]
 800d0d6:	b99b      	cbnz	r3, 800d100 <_vfiprintf_r+0x5c>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f000 f938 	bl	800d350 <__swsetup_r>
 800d0e0:	b170      	cbz	r0, 800d100 <_vfiprintf_r+0x5c>
 800d0e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0e4:	07dc      	lsls	r4, r3, #31
 800d0e6:	d504      	bpl.n	800d0f2 <_vfiprintf_r+0x4e>
 800d0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ec:	b01d      	add	sp, #116	@ 0x74
 800d0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f2:	89ab      	ldrh	r3, [r5, #12]
 800d0f4:	0598      	lsls	r0, r3, #22
 800d0f6:	d4f7      	bmi.n	800d0e8 <_vfiprintf_r+0x44>
 800d0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0fa:	f7fc ff6d 	bl	8009fd8 <__retarget_lock_release_recursive>
 800d0fe:	e7f3      	b.n	800d0e8 <_vfiprintf_r+0x44>
 800d100:	2300      	movs	r3, #0
 800d102:	9309      	str	r3, [sp, #36]	@ 0x24
 800d104:	2320      	movs	r3, #32
 800d106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d10e:	2330      	movs	r3, #48	@ 0x30
 800d110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2c0 <_vfiprintf_r+0x21c>
 800d114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d118:	f04f 0901 	mov.w	r9, #1
 800d11c:	4623      	mov	r3, r4
 800d11e:	469a      	mov	sl, r3
 800d120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d124:	b10a      	cbz	r2, 800d12a <_vfiprintf_r+0x86>
 800d126:	2a25      	cmp	r2, #37	@ 0x25
 800d128:	d1f9      	bne.n	800d11e <_vfiprintf_r+0x7a>
 800d12a:	ebba 0b04 	subs.w	fp, sl, r4
 800d12e:	d00b      	beq.n	800d148 <_vfiprintf_r+0xa4>
 800d130:	465b      	mov	r3, fp
 800d132:	4622      	mov	r2, r4
 800d134:	4629      	mov	r1, r5
 800d136:	4630      	mov	r0, r6
 800d138:	f7ff ffa2 	bl	800d080 <__sfputs_r>
 800d13c:	3001      	adds	r0, #1
 800d13e:	f000 80a7 	beq.w	800d290 <_vfiprintf_r+0x1ec>
 800d142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d144:	445a      	add	r2, fp
 800d146:	9209      	str	r2, [sp, #36]	@ 0x24
 800d148:	f89a 3000 	ldrb.w	r3, [sl]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 809f 	beq.w	800d290 <_vfiprintf_r+0x1ec>
 800d152:	2300      	movs	r3, #0
 800d154:	f04f 32ff 	mov.w	r2, #4294967295
 800d158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d15c:	f10a 0a01 	add.w	sl, sl, #1
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	9307      	str	r3, [sp, #28]
 800d164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d168:	931a      	str	r3, [sp, #104]	@ 0x68
 800d16a:	4654      	mov	r4, sl
 800d16c:	2205      	movs	r2, #5
 800d16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d172:	4853      	ldr	r0, [pc, #332]	@ (800d2c0 <_vfiprintf_r+0x21c>)
 800d174:	f7f3 f854 	bl	8000220 <memchr>
 800d178:	9a04      	ldr	r2, [sp, #16]
 800d17a:	b9d8      	cbnz	r0, 800d1b4 <_vfiprintf_r+0x110>
 800d17c:	06d1      	lsls	r1, r2, #27
 800d17e:	bf44      	itt	mi
 800d180:	2320      	movmi	r3, #32
 800d182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d186:	0713      	lsls	r3, r2, #28
 800d188:	bf44      	itt	mi
 800d18a:	232b      	movmi	r3, #43	@ 0x2b
 800d18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d190:	f89a 3000 	ldrb.w	r3, [sl]
 800d194:	2b2a      	cmp	r3, #42	@ 0x2a
 800d196:	d015      	beq.n	800d1c4 <_vfiprintf_r+0x120>
 800d198:	9a07      	ldr	r2, [sp, #28]
 800d19a:	4654      	mov	r4, sl
 800d19c:	2000      	movs	r0, #0
 800d19e:	f04f 0c0a 	mov.w	ip, #10
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a8:	3b30      	subs	r3, #48	@ 0x30
 800d1aa:	2b09      	cmp	r3, #9
 800d1ac:	d94b      	bls.n	800d246 <_vfiprintf_r+0x1a2>
 800d1ae:	b1b0      	cbz	r0, 800d1de <_vfiprintf_r+0x13a>
 800d1b0:	9207      	str	r2, [sp, #28]
 800d1b2:	e014      	b.n	800d1de <_vfiprintf_r+0x13a>
 800d1b4:	eba0 0308 	sub.w	r3, r0, r8
 800d1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	9304      	str	r3, [sp, #16]
 800d1c0:	46a2      	mov	sl, r4
 800d1c2:	e7d2      	b.n	800d16a <_vfiprintf_r+0xc6>
 800d1c4:	9b03      	ldr	r3, [sp, #12]
 800d1c6:	1d19      	adds	r1, r3, #4
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	9103      	str	r1, [sp, #12]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	bfbb      	ittet	lt
 800d1d0:	425b      	neglt	r3, r3
 800d1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d1d6:	9307      	strge	r3, [sp, #28]
 800d1d8:	9307      	strlt	r3, [sp, #28]
 800d1da:	bfb8      	it	lt
 800d1dc:	9204      	strlt	r2, [sp, #16]
 800d1de:	7823      	ldrb	r3, [r4, #0]
 800d1e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1e2:	d10a      	bne.n	800d1fa <_vfiprintf_r+0x156>
 800d1e4:	7863      	ldrb	r3, [r4, #1]
 800d1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e8:	d132      	bne.n	800d250 <_vfiprintf_r+0x1ac>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	1d1a      	adds	r2, r3, #4
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	9203      	str	r2, [sp, #12]
 800d1f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1f6:	3402      	adds	r4, #2
 800d1f8:	9305      	str	r3, [sp, #20]
 800d1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2d0 <_vfiprintf_r+0x22c>
 800d1fe:	7821      	ldrb	r1, [r4, #0]
 800d200:	2203      	movs	r2, #3
 800d202:	4650      	mov	r0, sl
 800d204:	f7f3 f80c 	bl	8000220 <memchr>
 800d208:	b138      	cbz	r0, 800d21a <_vfiprintf_r+0x176>
 800d20a:	9b04      	ldr	r3, [sp, #16]
 800d20c:	eba0 000a 	sub.w	r0, r0, sl
 800d210:	2240      	movs	r2, #64	@ 0x40
 800d212:	4082      	lsls	r2, r0
 800d214:	4313      	orrs	r3, r2
 800d216:	3401      	adds	r4, #1
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21e:	4829      	ldr	r0, [pc, #164]	@ (800d2c4 <_vfiprintf_r+0x220>)
 800d220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d224:	2206      	movs	r2, #6
 800d226:	f7f2 fffb 	bl	8000220 <memchr>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d03f      	beq.n	800d2ae <_vfiprintf_r+0x20a>
 800d22e:	4b26      	ldr	r3, [pc, #152]	@ (800d2c8 <_vfiprintf_r+0x224>)
 800d230:	bb1b      	cbnz	r3, 800d27a <_vfiprintf_r+0x1d6>
 800d232:	9b03      	ldr	r3, [sp, #12]
 800d234:	3307      	adds	r3, #7
 800d236:	f023 0307 	bic.w	r3, r3, #7
 800d23a:	3308      	adds	r3, #8
 800d23c:	9303      	str	r3, [sp, #12]
 800d23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d240:	443b      	add	r3, r7
 800d242:	9309      	str	r3, [sp, #36]	@ 0x24
 800d244:	e76a      	b.n	800d11c <_vfiprintf_r+0x78>
 800d246:	fb0c 3202 	mla	r2, ip, r2, r3
 800d24a:	460c      	mov	r4, r1
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7a8      	b.n	800d1a2 <_vfiprintf_r+0xfe>
 800d250:	2300      	movs	r3, #0
 800d252:	3401      	adds	r4, #1
 800d254:	9305      	str	r3, [sp, #20]
 800d256:	4619      	mov	r1, r3
 800d258:	f04f 0c0a 	mov.w	ip, #10
 800d25c:	4620      	mov	r0, r4
 800d25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d262:	3a30      	subs	r2, #48	@ 0x30
 800d264:	2a09      	cmp	r2, #9
 800d266:	d903      	bls.n	800d270 <_vfiprintf_r+0x1cc>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d0c6      	beq.n	800d1fa <_vfiprintf_r+0x156>
 800d26c:	9105      	str	r1, [sp, #20]
 800d26e:	e7c4      	b.n	800d1fa <_vfiprintf_r+0x156>
 800d270:	fb0c 2101 	mla	r1, ip, r1, r2
 800d274:	4604      	mov	r4, r0
 800d276:	2301      	movs	r3, #1
 800d278:	e7f0      	b.n	800d25c <_vfiprintf_r+0x1b8>
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	462a      	mov	r2, r5
 800d280:	4b12      	ldr	r3, [pc, #72]	@ (800d2cc <_vfiprintf_r+0x228>)
 800d282:	a904      	add	r1, sp, #16
 800d284:	4630      	mov	r0, r6
 800d286:	f7fb ff29 	bl	80090dc <_printf_float>
 800d28a:	4607      	mov	r7, r0
 800d28c:	1c78      	adds	r0, r7, #1
 800d28e:	d1d6      	bne.n	800d23e <_vfiprintf_r+0x19a>
 800d290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d292:	07d9      	lsls	r1, r3, #31
 800d294:	d405      	bmi.n	800d2a2 <_vfiprintf_r+0x1fe>
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	059a      	lsls	r2, r3, #22
 800d29a:	d402      	bmi.n	800d2a2 <_vfiprintf_r+0x1fe>
 800d29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29e:	f7fc fe9b 	bl	8009fd8 <__retarget_lock_release_recursive>
 800d2a2:	89ab      	ldrh	r3, [r5, #12]
 800d2a4:	065b      	lsls	r3, r3, #25
 800d2a6:	f53f af1f 	bmi.w	800d0e8 <_vfiprintf_r+0x44>
 800d2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2ac:	e71e      	b.n	800d0ec <_vfiprintf_r+0x48>
 800d2ae:	ab03      	add	r3, sp, #12
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	4b05      	ldr	r3, [pc, #20]	@ (800d2cc <_vfiprintf_r+0x228>)
 800d2b6:	a904      	add	r1, sp, #16
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f7fc f9a7 	bl	800960c <_printf_i>
 800d2be:	e7e4      	b.n	800d28a <_vfiprintf_r+0x1e6>
 800d2c0:	0800d988 	.word	0x0800d988
 800d2c4:	0800d992 	.word	0x0800d992
 800d2c8:	080090dd 	.word	0x080090dd
 800d2cc:	0800d081 	.word	0x0800d081
 800d2d0:	0800d98e 	.word	0x0800d98e

0800d2d4 <__swbuf_r>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	460e      	mov	r6, r1
 800d2d8:	4614      	mov	r4, r2
 800d2da:	4605      	mov	r5, r0
 800d2dc:	b118      	cbz	r0, 800d2e6 <__swbuf_r+0x12>
 800d2de:	6a03      	ldr	r3, [r0, #32]
 800d2e0:	b90b      	cbnz	r3, 800d2e6 <__swbuf_r+0x12>
 800d2e2:	f7fc fd53 	bl	8009d8c <__sinit>
 800d2e6:	69a3      	ldr	r3, [r4, #24]
 800d2e8:	60a3      	str	r3, [r4, #8]
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	071a      	lsls	r2, r3, #28
 800d2ee:	d501      	bpl.n	800d2f4 <__swbuf_r+0x20>
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	b943      	cbnz	r3, 800d306 <__swbuf_r+0x32>
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f000 f82a 	bl	800d350 <__swsetup_r>
 800d2fc:	b118      	cbz	r0, 800d306 <__swbuf_r+0x32>
 800d2fe:	f04f 37ff 	mov.w	r7, #4294967295
 800d302:	4638      	mov	r0, r7
 800d304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	6922      	ldr	r2, [r4, #16]
 800d30a:	1a98      	subs	r0, r3, r2
 800d30c:	6963      	ldr	r3, [r4, #20]
 800d30e:	b2f6      	uxtb	r6, r6
 800d310:	4283      	cmp	r3, r0
 800d312:	4637      	mov	r7, r6
 800d314:	dc05      	bgt.n	800d322 <__swbuf_r+0x4e>
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	f7ff fa47 	bl	800c7ac <_fflush_r>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d1ed      	bne.n	800d2fe <__swbuf_r+0x2a>
 800d322:	68a3      	ldr	r3, [r4, #8]
 800d324:	3b01      	subs	r3, #1
 800d326:	60a3      	str	r3, [r4, #8]
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	6022      	str	r2, [r4, #0]
 800d32e:	701e      	strb	r6, [r3, #0]
 800d330:	6962      	ldr	r2, [r4, #20]
 800d332:	1c43      	adds	r3, r0, #1
 800d334:	429a      	cmp	r2, r3
 800d336:	d004      	beq.n	800d342 <__swbuf_r+0x6e>
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	07db      	lsls	r3, r3, #31
 800d33c:	d5e1      	bpl.n	800d302 <__swbuf_r+0x2e>
 800d33e:	2e0a      	cmp	r6, #10
 800d340:	d1df      	bne.n	800d302 <__swbuf_r+0x2e>
 800d342:	4621      	mov	r1, r4
 800d344:	4628      	mov	r0, r5
 800d346:	f7ff fa31 	bl	800c7ac <_fflush_r>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d0d9      	beq.n	800d302 <__swbuf_r+0x2e>
 800d34e:	e7d6      	b.n	800d2fe <__swbuf_r+0x2a>

0800d350 <__swsetup_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4b29      	ldr	r3, [pc, #164]	@ (800d3f8 <__swsetup_r+0xa8>)
 800d354:	4605      	mov	r5, r0
 800d356:	6818      	ldr	r0, [r3, #0]
 800d358:	460c      	mov	r4, r1
 800d35a:	b118      	cbz	r0, 800d364 <__swsetup_r+0x14>
 800d35c:	6a03      	ldr	r3, [r0, #32]
 800d35e:	b90b      	cbnz	r3, 800d364 <__swsetup_r+0x14>
 800d360:	f7fc fd14 	bl	8009d8c <__sinit>
 800d364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d368:	0719      	lsls	r1, r3, #28
 800d36a:	d422      	bmi.n	800d3b2 <__swsetup_r+0x62>
 800d36c:	06da      	lsls	r2, r3, #27
 800d36e:	d407      	bmi.n	800d380 <__swsetup_r+0x30>
 800d370:	2209      	movs	r2, #9
 800d372:	602a      	str	r2, [r5, #0]
 800d374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d378:	81a3      	strh	r3, [r4, #12]
 800d37a:	f04f 30ff 	mov.w	r0, #4294967295
 800d37e:	e033      	b.n	800d3e8 <__swsetup_r+0x98>
 800d380:	0758      	lsls	r0, r3, #29
 800d382:	d512      	bpl.n	800d3aa <__swsetup_r+0x5a>
 800d384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d386:	b141      	cbz	r1, 800d39a <__swsetup_r+0x4a>
 800d388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d38c:	4299      	cmp	r1, r3
 800d38e:	d002      	beq.n	800d396 <__swsetup_r+0x46>
 800d390:	4628      	mov	r0, r5
 800d392:	f7fd fc75 	bl	800ac80 <_free_r>
 800d396:	2300      	movs	r3, #0
 800d398:	6363      	str	r3, [r4, #52]	@ 0x34
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3a0:	81a3      	strh	r3, [r4, #12]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6063      	str	r3, [r4, #4]
 800d3a6:	6923      	ldr	r3, [r4, #16]
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	89a3      	ldrh	r3, [r4, #12]
 800d3ac:	f043 0308 	orr.w	r3, r3, #8
 800d3b0:	81a3      	strh	r3, [r4, #12]
 800d3b2:	6923      	ldr	r3, [r4, #16]
 800d3b4:	b94b      	cbnz	r3, 800d3ca <__swsetup_r+0x7a>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3c0:	d003      	beq.n	800d3ca <__swsetup_r+0x7a>
 800d3c2:	4621      	mov	r1, r4
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f000 f883 	bl	800d4d0 <__smakebuf_r>
 800d3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ce:	f013 0201 	ands.w	r2, r3, #1
 800d3d2:	d00a      	beq.n	800d3ea <__swsetup_r+0x9a>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	60a2      	str	r2, [r4, #8]
 800d3d8:	6962      	ldr	r2, [r4, #20]
 800d3da:	4252      	negs	r2, r2
 800d3dc:	61a2      	str	r2, [r4, #24]
 800d3de:	6922      	ldr	r2, [r4, #16]
 800d3e0:	b942      	cbnz	r2, 800d3f4 <__swsetup_r+0xa4>
 800d3e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3e6:	d1c5      	bne.n	800d374 <__swsetup_r+0x24>
 800d3e8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ea:	0799      	lsls	r1, r3, #30
 800d3ec:	bf58      	it	pl
 800d3ee:	6962      	ldrpl	r2, [r4, #20]
 800d3f0:	60a2      	str	r2, [r4, #8]
 800d3f2:	e7f4      	b.n	800d3de <__swsetup_r+0x8e>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e7f7      	b.n	800d3e8 <__swsetup_r+0x98>
 800d3f8:	20000030 	.word	0x20000030

0800d3fc <_raise_r>:
 800d3fc:	291f      	cmp	r1, #31
 800d3fe:	b538      	push	{r3, r4, r5, lr}
 800d400:	4605      	mov	r5, r0
 800d402:	460c      	mov	r4, r1
 800d404:	d904      	bls.n	800d410 <_raise_r+0x14>
 800d406:	2316      	movs	r3, #22
 800d408:	6003      	str	r3, [r0, #0]
 800d40a:	f04f 30ff 	mov.w	r0, #4294967295
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d412:	b112      	cbz	r2, 800d41a <_raise_r+0x1e>
 800d414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d418:	b94b      	cbnz	r3, 800d42e <_raise_r+0x32>
 800d41a:	4628      	mov	r0, r5
 800d41c:	f000 f830 	bl	800d480 <_getpid_r>
 800d420:	4622      	mov	r2, r4
 800d422:	4601      	mov	r1, r0
 800d424:	4628      	mov	r0, r5
 800d426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d42a:	f000 b817 	b.w	800d45c <_kill_r>
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d00a      	beq.n	800d448 <_raise_r+0x4c>
 800d432:	1c59      	adds	r1, r3, #1
 800d434:	d103      	bne.n	800d43e <_raise_r+0x42>
 800d436:	2316      	movs	r3, #22
 800d438:	6003      	str	r3, [r0, #0]
 800d43a:	2001      	movs	r0, #1
 800d43c:	e7e7      	b.n	800d40e <_raise_r+0x12>
 800d43e:	2100      	movs	r1, #0
 800d440:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d444:	4620      	mov	r0, r4
 800d446:	4798      	blx	r3
 800d448:	2000      	movs	r0, #0
 800d44a:	e7e0      	b.n	800d40e <_raise_r+0x12>

0800d44c <raise>:
 800d44c:	4b02      	ldr	r3, [pc, #8]	@ (800d458 <raise+0xc>)
 800d44e:	4601      	mov	r1, r0
 800d450:	6818      	ldr	r0, [r3, #0]
 800d452:	f7ff bfd3 	b.w	800d3fc <_raise_r>
 800d456:	bf00      	nop
 800d458:	20000030 	.word	0x20000030

0800d45c <_kill_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d07      	ldr	r5, [pc, #28]	@ (800d47c <_kill_r+0x20>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	4611      	mov	r1, r2
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	f7f4 fcb7 	bl	8001ddc <_kill>
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	d102      	bne.n	800d478 <_kill_r+0x1c>
 800d472:	682b      	ldr	r3, [r5, #0]
 800d474:	b103      	cbz	r3, 800d478 <_kill_r+0x1c>
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	bf00      	nop
 800d47c:	20000974 	.word	0x20000974

0800d480 <_getpid_r>:
 800d480:	f7f4 bca4 	b.w	8001dcc <_getpid>

0800d484 <__swhatbuf_r>:
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	460c      	mov	r4, r1
 800d488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d48c:	2900      	cmp	r1, #0
 800d48e:	b096      	sub	sp, #88	@ 0x58
 800d490:	4615      	mov	r5, r2
 800d492:	461e      	mov	r6, r3
 800d494:	da0d      	bge.n	800d4b2 <__swhatbuf_r+0x2e>
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d49c:	f04f 0100 	mov.w	r1, #0
 800d4a0:	bf14      	ite	ne
 800d4a2:	2340      	movne	r3, #64	@ 0x40
 800d4a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	6031      	str	r1, [r6, #0]
 800d4ac:	602b      	str	r3, [r5, #0]
 800d4ae:	b016      	add	sp, #88	@ 0x58
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	466a      	mov	r2, sp
 800d4b4:	f000 f848 	bl	800d548 <_fstat_r>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	dbec      	blt.n	800d496 <__swhatbuf_r+0x12>
 800d4bc:	9901      	ldr	r1, [sp, #4]
 800d4be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d4c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d4c6:	4259      	negs	r1, r3
 800d4c8:	4159      	adcs	r1, r3
 800d4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4ce:	e7eb      	b.n	800d4a8 <__swhatbuf_r+0x24>

0800d4d0 <__smakebuf_r>:
 800d4d0:	898b      	ldrh	r3, [r1, #12]
 800d4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d4:	079d      	lsls	r5, r3, #30
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460c      	mov	r4, r1
 800d4da:	d507      	bpl.n	800d4ec <__smakebuf_r+0x1c>
 800d4dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	6123      	str	r3, [r4, #16]
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	6163      	str	r3, [r4, #20]
 800d4e8:	b003      	add	sp, #12
 800d4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ec:	ab01      	add	r3, sp, #4
 800d4ee:	466a      	mov	r2, sp
 800d4f0:	f7ff ffc8 	bl	800d484 <__swhatbuf_r>
 800d4f4:	9f00      	ldr	r7, [sp, #0]
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7fd fc34 	bl	800ad68 <_malloc_r>
 800d500:	b948      	cbnz	r0, 800d516 <__smakebuf_r+0x46>
 800d502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d506:	059a      	lsls	r2, r3, #22
 800d508:	d4ee      	bmi.n	800d4e8 <__smakebuf_r+0x18>
 800d50a:	f023 0303 	bic.w	r3, r3, #3
 800d50e:	f043 0302 	orr.w	r3, r3, #2
 800d512:	81a3      	strh	r3, [r4, #12]
 800d514:	e7e2      	b.n	800d4dc <__smakebuf_r+0xc>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	6020      	str	r0, [r4, #0]
 800d51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d51e:	81a3      	strh	r3, [r4, #12]
 800d520:	9b01      	ldr	r3, [sp, #4]
 800d522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d526:	b15b      	cbz	r3, 800d540 <__smakebuf_r+0x70>
 800d528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d52c:	4630      	mov	r0, r6
 800d52e:	f000 f81d 	bl	800d56c <_isatty_r>
 800d532:	b128      	cbz	r0, 800d540 <__smakebuf_r+0x70>
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	f023 0303 	bic.w	r3, r3, #3
 800d53a:	f043 0301 	orr.w	r3, r3, #1
 800d53e:	81a3      	strh	r3, [r4, #12]
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	431d      	orrs	r5, r3
 800d544:	81a5      	strh	r5, [r4, #12]
 800d546:	e7cf      	b.n	800d4e8 <__smakebuf_r+0x18>

0800d548 <_fstat_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4d07      	ldr	r5, [pc, #28]	@ (800d568 <_fstat_r+0x20>)
 800d54c:	2300      	movs	r3, #0
 800d54e:	4604      	mov	r4, r0
 800d550:	4608      	mov	r0, r1
 800d552:	4611      	mov	r1, r2
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	f7f4 fca1 	bl	8001e9c <_fstat>
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	d102      	bne.n	800d564 <_fstat_r+0x1c>
 800d55e:	682b      	ldr	r3, [r5, #0]
 800d560:	b103      	cbz	r3, 800d564 <_fstat_r+0x1c>
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	bf00      	nop
 800d568:	20000974 	.word	0x20000974

0800d56c <_isatty_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d06      	ldr	r5, [pc, #24]	@ (800d588 <_isatty_r+0x1c>)
 800d570:	2300      	movs	r3, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	602b      	str	r3, [r5, #0]
 800d578:	f7f4 fca0 	bl	8001ebc <_isatty>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_isatty_r+0x1a>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	b103      	cbz	r3, 800d586 <_isatty_r+0x1a>
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	20000974 	.word	0x20000974

0800d58c <_init>:
 800d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58e:	bf00      	nop
 800d590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d592:	bc08      	pop	{r3}
 800d594:	469e      	mov	lr, r3
 800d596:	4770      	bx	lr

0800d598 <_fini>:
 800d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59a:	bf00      	nop
 800d59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59e:	bc08      	pop	{r3}
 800d5a0:	469e      	mov	lr, r3
 800d5a2:	4770      	bx	lr
